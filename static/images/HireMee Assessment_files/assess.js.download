var _testPinDB = TAFFY();
var _sectionDetailsDB = new TAFFY();
var _questionSetDB = TAFFY();
var _questionOptionSetDB = TAFFY();
var _subQuestionDB = TAFFY();
var _assessmentAnswerDB = TAFFY();
var _multimediaQuestion = TAFFY();


var resumePoint = "1";
var currentSNo = 0;
var currentSectionID = 0;
var currentSectionName = 0;
var currentQuestionID = 0;
var currentOptionID = 0;
var currentQuestion = '';
var currentIsMultipleOption = 0;
var durationType = 0;
var currentClickMode;

var totalNoofSection = 0;
var totalNoofQuestions = 0;
var currentSectionSno = 0;
var currentSectionQuestionSNo = 0;
var currentSectionQuestionCount = 0;
var currentQuestionPalleteID = 0;
var currentQuestionType = '';
var currentSectionDuration;

var lastSectionSno = 0;
var lastSectionElapsedTime = '';

var questionCount = 0;
var sectionwisequestionCount = 0;
var duration = '';
var lastElapsedTime = '';
var lastSectionId = 0;
var lastSectionDurationInMins = '';

var countDownTimerInstance = {};
var previousSectionId = 0;
var previousQuestionId = 0;
var previousExamAnswer = '';
var previousSno = 0;
var previousStopTimerSectionId;
var previousQuestionType = "";

var isWindowProctor = 0;
var isImageProctor = 0;
var isRemainingTime = false;
var isFirstTime = 0;
var isSectionNavigation = '0';
var isPreviousButton = '0';

var totalNoofRetries = 0;
var actualNoofRetries = 0;

var cameraFlag = false;
var palleteElementValues;
var palleteSectionSno;
var AutomaticInvokeFlag;

var CurrentCompilerName;
var CurrentModeType;
var CurrentProblemCode;
var CurrentProblemId;
var CurrentCompilerId = 0;
var CurrentS3Id;
var Source;
var input;
var SubmissionId;
var _resultset;
var _previousResultSet;
var _currentResultSet;
var questionPalleteEnumId;
var invokesectiondata = 0;

var typingpromiseResult;
var typingTestResolve;

var _Gelement;
var _Qelement;
var _Qsection;

var TypingTestFirstTime = 0;
var isTestEvent;
var isSubQuestion = false;
var isOption = false;
var isQuestionPallete;
var SectionCount = 0;

var isResumeTypeTest = true;
var isTimerElaspedTigger = false;
var isTypingTimerElapsed = false;
var is_media_type;

var previouseQuesEndTime = "00:00:00";
let isSection = false;
let sectionStartTime = "00:00:00";
let isSubmitCapture = false;
let isEndtestCapture = false;
let endTestlastlapsedtime = "00:00:00";

var isPreviousOff = false;
let adjective_EntityMinCount = "";

var _logDetails;
var autoSaveCoding;
var autoSaveHeartbeatlog;
var autoSaveImageProcLog;
var autoSaveSubjective;
var autoSaveEssay;

var eventclick = false;
var fileData;
var isNofiles = false;
var fileLength;
var cnt = "";
var iswindowproct = false;
var navOff = false;
var EssayS3Data;
let sectionfirsttime = "00:00:00";
let ispresection = false;
var is_multiple_facet;

var markforreviewData = [];
var marforreviewCount = 0;

var windowProNavigationMode;
var isWindowblur = false;
var isLimitReach = false;
var isfileBytes = 0;
var maxFilesize = 0;

var isTimer = false;
var allSecElapsed = false;
var iswebcamActive = false;
var isSubjectiveMandatory = false;

var currentInternetSpeed = 0;
var isSubmitCaptureCancel = false;
var isNavigation = 0;

//function disableF5(e) {
//    if ((e.which || e.keyCode) == 116 || (e.ctrlKey && e.keyCode == 82)) e.preventDefault();
//    else if ((e.which || e.keyCode) == 116) {
//        e.preventDefault();
//    }
//};

function ForAvoidInitialSpaces(Space, event) {
    var value = Space.textContent;
    if (value.indexOf(" ") == 0) {
        if (Space.value.match(/\s/g)) {
            Space.textContent = Space.textContent.replace(/\s/g, '');
        }
        return false;
    }
    else {
        if (event)
            verifyTypingText(event);
        return true;
    }
}

//function getCharCount(txtID) {
//    var cnt = (500 - (parseInt($("#" + txtID).val().length))).toString();
//    $("#spnCharCount").html("Remaining chars - " + cnt);
//}

$(document).ready(function () {
    try {
        GetSectionDetails();
        _logDetails = window.localStorage.getItem("testpin");
        //$(document).on("keydown", disableF5);
        $("#subjectiveUpload").hide();
        $("#divloadercontent").text("Please Wait");
        $("#pauseBtnhms").val("Start");
        $("#divloading").show();
        //InternetListner();
        LoadTestPinDB();
        $("#videoRecorder").hide();
        $("#videoRecorderButtons").hide();
        $("#divTypingTest").hide();
        $("#divSubjectiveType").hide();
        $("#divEssayType").hide();
        $("#text").val('');
        $("#button_calc").hide();
    } catch (e) {
        $("#divloading").hide();
        PostJavascriptError("Assessment-Document Ready", "Assessment-Document Ready: " + e.message + ":" + "Testpin:" + _logDetails);
    }
});
function DetectMobileBrowser() {
    try {
        var check = false;
        (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);
        if (check == true) {
            //$('#btnStartExam').attr('disabled', true);
            //$("#testPinValidate").text("*Cannot accessed");
            //$('body').css({
            //    "-webkit-transform": "rotate(-90deg)"
            //});
            if ($('#collapse-widget').text() != 'OPEN') {
                $('#collapse-widget').click();
            }
        }
        return check;
    } catch (e) {
        throw e;
    }
}
$("#btnEndtest").on('click', function () {
    LoadQuestionPallete();
    try {
        MCQAnswerupdate();
        var data;
        switch (currentClickMode) {
            case ClickEvent.TimerElapsed:
                $('#btnEndtest').removeAttr('data-target');
                $('#btnNext').attr('data-target', '');
                currentClickMode = null;
                FreezeTimer();

                if (durationType == DurationTypeEnum.ExamWise) {
                    lastSectionElapsedTime = "00:00:00";
                    ProcessEventLog(ClickEvent.TimerElapsed);
                }

                if (isPreviousOff == true) {
                    data = false;
                    isPreviousOff = false;
                }
                else {
                    //var sectionDetails = _sectionDetailsDB({ section_id: { ">": currentSectionID }, Last_ElapsedTimeInHours: { "!is": "00:00:00" } }).get();
                    //data = sectionDetails.length;       
                    data = FindAutomaticNextSectionId();
                }

                if (data == false) {
                    allSecElapsed = true;
                    swal.fire({
                        title: '<span><font color="#ED5364">TimeOut</font></span>',
                        text: "Time Expired",
                        showCancelButton: false,
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        confirmButtonText: "OK",
                        confirmButtonColor: '#ed5364',
                        allowOutsideClick: false,
                        timer: 60000,
                    }).then((result) => {
                        isEndtestCapture = true;
                        let promiseResult = new Promise(function (resolve, reject) {
                            if (currentQuestionType == QuestionTypeEnum.TypingTest) {
                                TypingTestAlert();
                            }
                            resolve("done");
                        });
                        promiseResult.then(result => ProcessResult());
                    })
                }

                else {
                    // endTestClickAlert();     
                    if (String(_testPinDB().first().is_question_pallete) == "0" && String(isSectionNavigation) == "0" && String(isPreviousButton) == "0") {
                        endTestClickAlert();
                    }
                    else {
                        GetMarforReviewCount();
                    }

                    //SubjectiveFileMandatory();
                    //if (isSubjectiveMandatory != true) {
                    //    if (String(_testPinDB().first().is_question_pallete) == "0" && String(isSectionNavigation) == "0" && String(isPreviousButton) == "0") {
                    //        endTestClickAlert();
                    //    }
                    //    else {
                    //        GetMarforReviewCount();
                    //    }
                    //}
                    //else {
                    //    return false;
                    //}
                }

                break;

            default:
                //$("#pauseBtnhms").val("Pause");
                //$("#pauseBtnhms").trigger("click");
                // endTestClickAlert();
                if (String(_testPinDB().first().is_question_pallete) == "0" && String(isSectionNavigation) == "0" && String(isPreviousButton) == "0") {
                    endTestClickAlert();
                }
                else {
                    GetMarforReviewCount();
                }
                break;
        }

    }
    catch (e) {
        var data = "Assessment- End Test Click :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("End Test Click", data);
    }
});
function TypingTestAlert() {
    var _exam_answer = document.getElementById('hdnTypeTestResult').value;
    var examAnswerObj = _assessmentAnswerDB({ question_id: currentQuestionID }).get();

    var splitStr = _exam_answer.split("~");
    var _WPM = splitStr[0].split(":")[1];
    var _CPM = splitStr[1].split(":")[1];
    var _Accuracy = splitStr[2].split(":")[1];
    var _NoOfMistake = splitStr[5].split(":")[1];

    if (_Accuracy == 'NaN' || _WPM == null || _CPM == null) {
        _Accuracy = "0.00";
        _CPM = "0";
        _WPM = "0";
        _NoOfMistake = "0";
    }

    if (_exam_answer != '') {
        examAnswerObj[0].exam_answer.WPM = splitStr[0].split(":")[1];//WPM
        examAnswerObj[0].exam_answer.CPM = splitStr[1].split(":")[1];//CPM
        examAnswerObj[0].exam_answer.Accuracy = splitStr[2].split(":")[1];//Accuracy
        examAnswerObj[0].exam_answer.QuestionId = splitStr[3].split(":")[1];//QuestionId
        examAnswerObj[0].exam_answer.User_Answer = splitStr[4].split(":")[1];//User_Answer   
        examAnswerObj[0].exam_answer.NoofMistakes = splitStr[5].split(":")[1];//No of Mistake                 
    }
    var swl_html = `<div align="center" class="col-md-12">Accuracy = ` + _Accuracy + `% </div></br ><div align="center" class="col-md-12">Words Per Minute(WPM) = ` + _WPM + ` </div></br ><div align="center" class="col-md-12">Character Per Minute(CPM) = ` + _CPM + ` </div><br /><div align="center" class="col-md-12">Number Of Mistake= ` + _NoOfMistake + ` </div>`
    swal.fire({
        html: swl_html,
        title: '',
        imageUrl: '/Images/Pro/success.svg',
        imageWidth: 80,
        imageHeight: 80,
        type: "success",
        showCancelButton: false,
        confirmButtonText: "OK",
        allowOutsideClick: false
    }).then((result) => {
        if (result.value) {
            //$("#collapse-widget").click();
        }
    });
}


function GetEndTestDetails() {
    $("#divloading").show();
    var testpin = _testPinDB().first().TestPin;

    var requestData = {
        TestPin: testpin
    };

    try {

        $.ajax({
            url: "/Assessment/GetEndTestDetails",
            type: "POST",
            dataType: 'json',
            //data: '{TestPin : "' + testpin + '", Token : "' + token + '"}',
            data: JSON.stringify(requestData),
            contentType: 'application/json;charset=utf-8',
            timeout: 60000,
            tryCount: 0,
            retryLimit: 1,
            success: function (response) {
                $("#divloading").show();
                $('#tblCustomFormDetails').empty();
                $('#tblSubjectiveDetails').empty();
                if (response.code == Number(APIStatusCodeEnum.Ok)) {
                    //FreezeTimer();
                    if (response.customFormLists.length > 0 && response.customFormLists != null) {
                        $('#divCustomForm').show();
                        $.each(response.customFormLists, function (i, value) {
                            $('#tblCustomFormDetails').append("<tr class='EndtestTable'><td class='EndtestTable'>" + value.field_name + "</td><td class='EndtestTable'>" + value.field_value + "</td></tr>");
                        });
                    }
                    else {
                        $('#divCustomForm').hide();
                        $('#divCustomFormText').attr('style', 'display: flex  !important');
                        $('#divCustomFormText').text('No Records Found.');
                    }

                    if (response.subjectivequestionLists.length > 0 && response.subjectivequestionLists != null) {
                        $('#divSubDetails').show();
                        $.each(response.subjectivequestionLists, function (i, value) {
                            $('#tblSubjectiveDetails').append("<tr class='EndtestTable'><td class='EndtestTable'>" + value.section_name + "</td><td class='EndtestTable'>" + value.QNo + "</td><td class='EndtestTable'>" + value.No_of_files_uploaded + "</td></tr>");
                        });
                    }
                    else {
                        $('#divSubDetails').hide();
                        $('#divSubjectiveText').attr('style', 'display: flex  !important');
                        $('#divSubjectiveText').text('No Records Found.');
                    }
                    $("#divloading").hide();

                }
                else if (response == Number(APIStatusCodeEnum.Invalid)) {
                    $('#divCustomForm').hide();
                    $('#divSubDetails').hide();
                    $('#divCustomFormText').attr('style', 'display: flex  !important');
                    $('#divCustomFormText').text('No Records Found');
                    $('#divSubjectiveText').attr('style', 'display: flex  !important');
                    $('#divSubjectiveText').text('No Records Found');
                    $("#divloading").hide();
                }
                else {
                    $("#divloading").hide();
                    swal.fire({
                        title: '<span></span>',
                        text: ErrorMessageEnum.InternalServerError,
                        type: "error",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        confirmButtonColor: '#ed5364',
                        closeOnConfirm: true,
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.value) {
                            UnfreezeTimer();
                            var settingsinfo = _testPinDB().first().settingsname;
                            if (settingsinfo != null && settingsinfo != "") {

                                window.location.href = settingsinfo;
                            }

                        }
                    })

                    UnfreezeTimer();
                    var data = " LoadAssessment - GetEndTestDetails Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                    PostJavascriptError(data);
                    return;
                }
            }
        });
    } catch (e) {
        PostJavascriptError("GetEndTestDetails", "Assessment - GetEndTestDetails in ajax call : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}
$('#btnEndtestSave').click(function () {
    ProcessResult();
});
$('#btnEndtestModelClose').click(function () {
    $('#btnNext').attr('data-target', '');
    $('#tblCustomFormDetails').empty();
    $('#tblSubjectiveDetails').empty();
    isTimer = false;
    markforreviewData = [];
    currentClickMode = null;
    isEndtestCapture = false;
    $("#pauseBtnhms").val("Start");
    HandleTimerButton();
});
function GetMarforReviewCount() {
    try {
        //var quesData;
        switch (durationType) {
            case DurationTypeEnum.ExamWise:
                //quesData = _questionSetDB().get();
                //if (quesData != false) {
                //    $.each(quesData, function (i, item) {
                //        if (item.Question_Palette_Enum_Id == 3) {
                //            markforreviewData.push(item.Question_Palette_Enum_Id);
                //        }
                //    });
                //    marforreviewCount = markforreviewData.length;
                //    if (marforreviewCount > 0) {
                //        markforReviewAlert();
                //    }
                //    else {
                //        endTestClickAlert();
                //    }

                //}
                marforreviewCount = _questionSetDB({ Question_Palette_Enum_Id: 3 }).count();
                if (marforreviewCount > 0) {
                    markforReviewAlert();
                }
                else {
                    endTestClickAlert();
                }
                break;
            case DurationTypeEnum.SectionWise:
                //quesData = _questionSetDB({ section_id: currentSectionID }).get();
                //if (quesData != false) {
                //    $.each(quesData, function (i, item) {
                //        if (item.Question_Palette_Enum_Id == 3) {
                //            markforreviewData.push(item.Question_Palette_Enum_Id);
                //        }
                //    });
                //    marforreviewCount = markforreviewData.length;
                //    if (marforreviewCount > 0) {
                //        markforReviewAlert();
                //    }
                //    else {
                //        endTestClickAlert();
                //    }
                //}
                marforreviewCount = _questionSetDB({ section_id: currentSectionID, Question_Palette_Enum_Id: 3 }).count();
                if (marforreviewCount > 0) {
                    markforReviewAlert();
                }
                else {
                    endTestClickAlert();
                }

                break;
        }


    }
    catch (e) {
        var data = "Assessment- GetMarforReviewCount :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("GetMarforReviewCount", data);
    }
}
function markforReviewAlert() {
    try {
        //FreezeTimer();
        eventclick = true;
        isEndtestCapture = true;
        isTimer = true;
        lastSectionElapsedTime = $("#future_date").text();
        if (_testPinDB().first().is_index_page == "true") {
            let promiseResult = new Promise(function (resolve, reject) {
                ProcessEventLog("Endtest", resolve);
                resolve("done");
            });
            promiseResult.then(result => GetCustomDetails());
            $('#divMarkforReview').show();
            $('#marforReviewCount').text(marforreviewCount)
        }
        else {
            ProcessEventLog("Endtest");
        }

        $("#pauseBtnhms").val("Start");
        HandleTimerButton();
        if (_testPinDB().first().is_index_page == "false") {
            $('#btnEndtest').removeAttr('data-target');
            $('#btnNext').attr('data-target', '');
            var msg;
            if (marforreviewCount > 1) {
                msg = ' questions marked for review.';
            }
            else {
                msg = ' question marked for review.';
            }
            swal.fire({
                title: 'Confirm End Test',
                html: 'You have ' + marforreviewCount + msg + '<br> <br>' + 'Are you sure you want to end this Test ?',
                imageUrl: '/Images/Pro/warning.svg',
                imageWidth: 80,
                imageHeight: 80,
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: "No, Please Continue",
                allowOutsideClick: false
            }).then((result) => {
                isEndtestCapture = true;
                if (result.value) {
                    markforreviewData = [];
                    ProcessResult();
                }
                else {
                    if (currentClickMode != ClickEvent.TimerElapsed) {
                        UnfreezeTimer();
                    }
                    markforreviewData = [];
                    currentClickMode = null;
                    isEndtestCapture = false;
                    if (isSubmitCaptureCancel) {
                        ProcessEventLog("Submitcancel");
                    }
                    else {
                        ProcessEventLog("Endtestcancel");
                    }

                    isSubmitCaptureCancel = false;

                }
            });
        }
    } catch (e) {
        var data = "Assessment- markforReviewAlert :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("markforReviewAlert", data);
    }

}

$("#pauseBtnhms").on('click', function () {
    try {
        if (isDoubleClicked($(this))) return;
        HandleTimerButton();

    } catch (e) {
        var data = "Assessment- pauseBtnhms Click :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError(data);
    }
});

function LoadTestPinDB() {
    try {
        ProcessTestPinDB();
    } catch (e) {
        PostJavascriptError("LoadTestPinDB", "Assessment - Load testpin DB : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function ProcessTestPinDB() {
    try {
        $.ajax({
            url: "/Assessment/LoadTestPinDB",
            type: "POST",
            dataType: 'json',
            contentType: 'application/json;charset=utf-8',
            timeout: 30000,
            tryCount: 0,
            retryLimit: 1,
            success: function (response) {
                _testPinDB.insert(JSON.stringify(response));
                BindAssessmentControls();
                GetQuestionSet();
                // HeartBeatLog();
                //UnfreezeTimer();

                if (Number(isImageProctor) == 1) {
                    WebCameraSetup();
                    //Webcam.on('load', function () {
                    //    SnapImage();
                    //});
                    SnapImage();
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $("#divloading").hide();
                var data = " LoadAssessment - ProcessTestPinDB Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                PostJavascriptError("ProcessTestPinDB", data);
                return;
            }
        });
    } catch (e) {
        PostJavascriptError("ProcessTestPinDB-Catch", "Assessment - Process testpin DB in ajax call : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function WebCameraSetup() {
    try {
        navigator.mediaDevices.enumerateDevices()
            .then(function (devices) {
                devices.forEach(function (device) {
                    if (device.kind == "videoinput") {
                        cameraFlag = true;
                        Webcam.attach("#backgroundcamContainer");
                    }
                });
            });
        if ((Number(isImageProctor) == 1) && (Number(_testPinDB().first().is_webcam) == 1)) {
            navigator.getMedia = (navigator.getUserMedia || // use the proper vendor prefix
                navigator.webkitGetUserMedia ||
                navigator.mozGetUserMedia ||
                navigator.msGetUserMedia);
            navigator.getMedia({ video: true }, function () {
                iswebcamActive = true;
            }, function () {
                // webcam is not available
                iswebcamActive = false;
            });
        }

    } catch (e) {
        PostJavascriptError("WebCameraSetup", "Assessment - Web camera setup : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

//function InternetListner() {
//    try {
//        window.addEventListener('offline', updateOnlineStatus);
//        window.addEventListener('online', updateOnlineStatus);
//    } catch (e) {
//        PostJavascriptError("InternetListner", "Assessment - Internet listner : " + e.message + ":" + "Testpin:" + _logDetails);
//    }
//}

$(document).ready(function () {
    $("#future_date").bind("TimerChange", function () {
        var _timerText = $("#future_date").text();
        typingpromiseResult = null;
        if (_timerText == "00:00:00") {
            isTimerElaspedTigger = true;
            typingpromiseResult = new Promise(function (resolve, reject) {
                InvokeTypingTest(resolve);
            });

            typingpromiseResult.then(result => BindTimerElapsed());
        }
        else {
            isTimerElaspedTigger = false;
        }
    });
});

function BindTimerElapsed() {
    clearInterval(TimerHandle);
    TimerElapsed();
    typingpromiseResult = null;
    isTimerElaspedTigger = false;
}

//function updateOnlineStatus(event) {
//    try {
//        var condition = navigator.onLine ? "online" : "offline";
//        if (condition == "online") {
//            $('#divSubloading').attr('style', 'display: none  !important');
//            //unfreeze
//            // UnfreezeTimer();
//            swal.fire({
//                title: '<span></span>',
//                text: "Now you are in online,Please continue.",
//                type: "error",
//                imageUrl: '/Images/Pro/success.svg',
//                imageWidth: 80,
//                imageHeight: 80,
//                showCancelButton: false,
//                confirmButtonColor: '#024059',
//                confirmButtonText: 'OK',
//                allowOutsideClick: false
//            }).then((result) => {
//                if (result.value) {
//                    $("#pauseBtnhms").val("Start");
//                    HandleTimerButton();
//                }
//            })


//        }
//        else {
//            //$("#divloadercontent").text("Waiting For Internet Connection");
//            $('#divSubloading').attr('style', 'display: flex  !important');
//            //freeze
//            FreezeTimer();

//            swal.fire({
//                title: '<span></span>',
//                text: "No internet,Please check your internet connection.",
//                type: "error",
//                imageUrl: '/Images/Pro/error.svg',
//                imageWidth: 80,
//                imageHeight: 80,
//                showCancelButton: false,
//                confirmButtonText: 'Refresh',
//                confirmButtonColor: '#ed5364',
//                allowOutsideClick: false
//            }).then((result) => {
//                if (result.value) {
//                    $('#divSubloading').attr('style', 'display: flex  !important');
//                }
//            })
//            //$("#pauseBtnhms").val("Start");
//            //HandleTimerButton();

//        }
//    } catch (e) {
//        PostJavascriptError("updateOnlineStatus", "Assessment - Update online status : " + e.message + ":" + "Testpin:" + _logDetails);
//    }
//}

function BindAssessmentControls() {
    try {
        var serverDate = _testPinDB().first().server_time;
        $("#sName").text(_testPinDB().first().first_name);
        $("#sDate").text(GetCurrentDate(serverDate));
        $("#sassessmentName").text(_testPinDB().first().assessment_name);

        lastElapsedTime = _testPinDB().first().Last_ElapsedTime;
        $("#future_date").text(lastElapsedTime);

        isSectionNavigation = _testPinDB().first().is_section_navigation;
        isPreviousButton = _testPinDB().first().is_previous;

        if (_testPinDB().first().test_logo != '' && _testPinDB().first().test_logo != null && _testPinDB().first().test_logo != undefined) {
            $("#imgLogo").attr('src', _testPinDB().first().test_logo);
        }
        else {
            $("#imgLogo").attr('src', "/Images/Pro/logo-ver.png");
        }

        if (_testPinDB().first().is_endtest != '' && _testPinDB().first().is_endtest != null && _testPinDB().first().is_endtest != undefined) {
            if (_testPinDB().first().is_endtest == '1') {
                $('#btnEndtest').show();
            }
            else {
                $('#btnEndtest').hide();
            }
        }

        if (_testPinDB().first().is_timer_display != '' && _testPinDB().first().is_timer_display != null && _testPinDB().first().is_timer_display != undefined) {
            if (_testPinDB().first().is_timer_display == '1') {
                $('#countdowntimer').show();
            }
            else {
                $("#divQuestionPalleteview").addClass("widget-right1");
                $('#countdowntimer').hide();
            }
        }

        if (isSectionNavigation != '' && isSectionNavigation != null && isSectionNavigation != undefined) {
            BindSectionTab();
        }

        if (_testPinDB().first().is_question_pallete != '' && _testPinDB().first().is_question_pallete != null && _testPinDB().first().is_question_pallete != undefined) {

            if (_testPinDB().first().is_question_pallete == '1') {
                $("#divQuestionPalleteview").show();
                $("#divquestionpalleteFooter").show();
                $("#divPalleteHeader").removeClass("question-pallete-hide");
                $("#divPalleteFooter").removeClass("question-footer-fwidth");
                $("btnMarkForReview").show();
            }
            else {
                $("#divQuestionPalleteview").hide();
                $("#divquestionpalleteFooter").hide();
                $("btnMarkForReview").hide();
                $("#collapse-widget").click();
                $("#collapse-widget").hide();
            }
        }
        BindPreviousSettings();
        BindTestPinDetails();
    } catch (e) {
        PostJavascriptError("BindAssessmentControls", "Assessment - Bind assessment controls : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

//Bind Previous button Settings()
function BindPreviousSettings() {
    try {
        if (isPreviousButton != '' && isPreviousButton != null && isPreviousButton != undefined) {
            if (isPreviousButton == "1" || isPreviousButton == 1) {
                $("#btnPrevious").show();
            }
            else {
                $("#btnPrevious").hide();
            }
        }
    } catch (e) {
        PostJavascriptError("BindPreviousSettings", "Assessment - Bind Previous Button Settings: " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function BindSectionTab() {
    try {
        $("#divSection").show();
        //if (isSectionNavigation == '1') {
        //    $("#divSection").show();
        //}
        //else {
        //    $("#divSection").hide();
        //}
    } catch (e) {
        PostJavascriptError("BindSectionTab", "Assessment - Bind Section Tab : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function BindTestPinDetails() {
    try {
        $("#TestPin").val(_testPinDB().first().TestPin);
        $("#ExamName").val(_testPinDB().first().assessment_name);
        $("#CompanyID").val(_testPinDB().first().company_id);
        $("#AssignID").val(_testPinDB().first().assign_id);
        $("#LoginAuditID").val(_testPinDB().first().login_audit_id);
        $("#candidate_id").val(_testPinDB().first().candidate_id);
        $("#is_feedback").val(_testPinDB().first().is_feedback);
        $("#is_score_display").val(_testPinDB().first().is_score_display);
        $("#redirect_url").val(_testPinDB().first().redirect_url);
        $("#Token").val(_testPinDB().first().Token);
        $("#exam_duration").val(_testPinDB().first().exam_duration);
        $("#attempt_id").val(_testPinDB().first().attempt_id);
        durationType = _testPinDB().first().duration_type;
        duration = _testPinDB().first().exam_duration;
        lastElapsedTime = _testPinDB().first().Last_ElapsedTime;
        lastSectionId = _testPinDB().first().last_updated_sectionid;
        totalNoofSection = _testPinDB().first().total_no_sections;
        totalNoofQuestions = _testPinDB().first().total_no_questions;
        isWindowProctor = _testPinDB().first().is_window_proctering;
        isImageProctor = _testPinDB().first().is_image_proctering;
        isTestEvent = _testPinDB().first().isTestEvent;
        isQuestionPallete = _testPinDB().first().is_question_pallete;
        maxFilesize = Number(_testPinDB().first().max_file_size);
        isfileBytes = Number(_testPinDB().first().max_file_size) * 1024 * 1024;
        if (maxFilesize == "" && maxFilesize == null) {
            $("#altSubfile").text("Maximum 5MB data in png, jpg and pdf format.");
        }
        else {
            $("#altSubfile").text("Maximum " + maxFilesize + "MB data in png, jpg and pdf format.");
        }

        if (_testPinDB().first().is_Scientific_calc != "" && _testPinDB().first().is_Scientific_calc != null) {
            if (Number(_testPinDB().first().is_Scientific_calc) == 1) {
                $("#button_calc").show();
            }
            else {
                $("#button_calc").hide();
            }
        }

    } catch (e) {
        PostJavascriptError("BindTestPinDetails", "Assessment - Bind testpin details : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function GetSectionDetails() {
    try {
        $.ajax({
            url: "/Assessment/LoadSectionDB",
            type: "POST",
            dataType: 'json',
            contentType: 'application/json;charset=utf-8',
            timeout: 30000,
            tryCount: 0,
            retryLimit: 1,
            success: function (response) {
                _sectionDetailsDB.insert(JSON.stringify(response));
                //UnfreezeTimer();
                SectionCount = _sectionDetailsDB().count();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $("#divloading").hide();
                var data = " LoadAssessment - GetSectionDetails Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                PostJavascriptError("GetSectionDetails", data);
                return;
            }
        });
    } catch (e) {
        PostJavascriptError("GetSectionDetails-Catch", "Assessment - GetSectionDetails in ajax call : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

//Note : Dynamic Section Controls Should have Unique Ids and so we Prefix the Following Conventions S-Section,P-QuestionPallete, Q-Question , R-Radio , C-Checkbox
//Invoke Last Section Id Given in Test Pin to Match Current Section in Resume Case
function BindSectionButton() {
    var funcName;
    AutomaticInvokeFlag = true;
    try {
        if (SectionCount == totalNoofSection) {
            switch (durationType) {
                case DurationTypeEnum.ExamWise:

                    BindSectionTab();
                    _sectionDetailsDB().each(function (item, index) {
                        var className = DynamicSectionButtonClassName.Default;
                        funcName = 'InvokeSectionButton(this)';
                        $("#divSectionButtons").append("<li class='nav-item'> <a id= '" + DynamicControlPrefixEnum.Section + item["section_id"] + "'  name = '" + DynamicControlPrefixEnum.Section + item["section_id"] + "' value = '" + item["SNo"] + "' class= '" + className + "' onclick = '" + funcName + "' > " + item["section_name"] + "</a></li>   ");
                    });
                    if (isSectionNavigation == '1') {
                        //_sectionDetailsDB().each(function (item, index) {
                        //    var className;
                        //    var lastElapsedTime = item.Last_ElapsedTimeInHours;

                        //    if (lastElapsedTime == '00:00:00') {
                        //        ///className = DynamicSectionButtonClassName.InActive;                                
                        //    }
                        //    else {
                        //        className = DynamicSectionButtonClassName.Default;
                        //    }
                        //    if (lastSectionId == item["section_id"]) {
                        //        className = DynamicSectionButtonClassName.Active;
                        //    }
                        //    funcName = 'InvokeSectionButton(this)';

                        //    $("#divSectionButtons").append("<li class='nav-item'> <a id= '" + DynamicControlPrefixEnum.Section + item["section_id"] + "'  name = '" + DynamicControlPrefixEnum.Section + item["section_id"] + "' value = '" + item["SNo"] + "' class= '" + className + "' onclick = '" + funcName + "' > " + item["section_name"] + "</a></li>   ");

                        //    if (lastElapsedTime == '00:00:00') {
                        //        $("#" + DynamicControlPrefixEnum.Section + item.section_id).css("pointer-events", "none");
                        //        $("#" + DynamicControlPrefixEnum.Section + item.section_id).parent().css("cursor", "not-allowed");
                        //    }

                        //});


                        //_sectionDetailsDB().each(function (item, index) {
                        //    var className = DynamicSectionButtonClassName.Default;
                        //    funcName = 'InvokeSectionButton(this)';
                        //    $("#divSectionButtons").append("<li class='nav-item'> <a id= '" + DynamicControlPrefixEnum.Section + item["section_id"] + "'  name = '" + DynamicControlPrefixEnum.Section + item["section_id"] + "' value = '" + item["SNo"] + "' class= '" + className + "' onclick = '" + funcName + "' > " + item["section_name"] + "</a></li>   ");
                        //});
                    }
                    else {
                        //ProcessEventLog("");
                        eventclick = true;
                        //if (invokesectiondata != 0) {
                        //    $("#divloading").show();
                        //    ProcessEventLog("");
                        //    UnfreezeTimer();
                        //}
                        //else {
                        //    AssignPreviousControlValues();
                        //}
                        //invokesectiondata = invokesectiondata + 1;
                        //BindQuestion(resumePoint, QuestionMode.ResumeQuestion);
                        //UnfreezeTimer();
                    }
                    break;

                case DurationTypeEnum.SectionWise:

                    _sectionDetailsDB().each(function (item, index) {
                        var className;
                        var lastElapsedTime = item.Last_ElapsedTimeInHours;

                        if (lastElapsedTime == '00:00:00') {
                            ///className = DynamicSectionButtonClassName.InActive;                                
                        }
                        else {
                            className = DynamicSectionButtonClassName.Default;
                        }

                        if (lastSectionId == item["section_id"]) {
                            className = DynamicSectionButtonClassName.Active;
                        }

                        funcName = 'InvokeSectionButton(this)';

                        $("#divSectionButtons").append("<li class='nav-item'> <a id= '" + DynamicControlPrefixEnum.Section + item["section_id"] + "'  name = '" + DynamicControlPrefixEnum.Section + item["section_id"] + "' value = '" + item["SNo"] + "' class= '" + className + "' onclick = '" + funcName + "' > " + item["section_name"] + "</a></li>   ");

                        if (lastElapsedTime == '00:00:00') {
                            $("#" + DynamicControlPrefixEnum.Section + item.section_id).css("pointer-events", "none");
                            $("#" + DynamicControlPrefixEnum.Section + item.section_id).parent().css("cursor", "not-allowed");
                        }
                    });
                    if (isSectionNavigation == '1') {
                        //_sectionDetailsDB().each(function (item, index) {
                        //    var className;
                        //    var lastElapsedTime = item.Last_ElapsedTimeInHours;

                        //    if (lastElapsedTime == '00:00:00') {
                        //        ///className = DynamicSectionButtonClassName.InActive;                                
                        //    }
                        //    else {
                        //        className = DynamicSectionButtonClassName.Default;
                        //    }
                        //    if (lastSectionId == item["section_id"]) {
                        //        className = DynamicSectionButtonClassName.Active;
                        //    }
                        //    funcName = 'InvokeSectionButton(this)';

                        //    $("#divSectionButtons").append("<li class='nav-item'> <a id= '" + DynamicControlPrefixEnum.Section + item["section_id"] + "'  name = '" + DynamicControlPrefixEnum.Section + item["section_id"] + "' value = '" + item["SNo"] + "' class= '" + className + "' onclick = '" + funcName + "' > " + item["section_name"] + "</a></li>   ");

                        //    if (lastElapsedTime == '00:00:00') {
                        //        $("#" + DynamicControlPrefixEnum.Section + item.section_id).css("pointer-events", "none");
                        //        $("#" + DynamicControlPrefixEnum.Section + item.section_id).parent().css("cursor", "not-allowed");
                        //    }
                        //});
                    }
                    else {
                        isNavigation = 1;
                        //ProcessEventLog("");

                        eventclick = true;
                        //if (invokesectiondata != 0) {
                        //    $("#divloading").show();
                        //    ProcessEventLog("");
                        //    UnfreezeTimer();
                        //}
                        //else {
                        //    AssignPreviousControlValues();
                        //}
                        //invokesectiondata = invokesectiondata + 1;
                        //GetCurrentSectionSno(lastSectionId, 'SectionID');
                        //BindSectionWiseQuestion(currentSectionSno, QuestionMode.ResumeQuestion);
                        //UnfreezeTimer();
                    }
                    break;
            }

        }
        else {
            // swal.fire("Oops", "Section set is not matched !", "error");
            swal.fire({
                title: '<span>Oops</span>',
                text: "Section set is not matched !",
                type: "error",
                imageUrl: '/Images/Pro/error.svg',
                imageWidth: 80,
                imageHeight: 80,
                showCancelButton: false,
                confirmButtonColor: '#ED5364',
                confirmButtonText: 'OK',
                allowOutsideClick: false
            }).then((result) => {
                if (result.value) {
                    redirectHomescreen();
                }

            })
            //RedirectToTestPinPage();
        }
    } catch (e) {
        var data = "Assessment - BindSectionButton in ajax call : " + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("BindSectionButton", data);
        throw e;
    }
}
//Note: It is used to find the current section Id automatically for section id which is not timer elapsed
function RefreshSectionButton() {
    try {
        _sectionDetailsDB().each(function (item, index) {
            var className;
            var _lastElapsedTime = item["Last_ElapsedTimeInHours"];

            if (currentSectionID == item.section_id) {
                className = DynamicSectionButtonClassName.Active;
            }
            else {
                className = DynamicSectionButtonClassName.Default;
            }

            if (durationType == DurationTypeEnum.SectionWise) {
                if (_lastElapsedTime == '00:00:00') {
                    className = DynamicSectionButtonClassName.InActive;
                }
            }

            var oldclass = $('#' + DynamicControlPrefixEnum.Section + item.section_id).attr('class');
            if (oldclass != '' && oldclass != null && oldclass != undefined) {
                $('#' + DynamicControlPrefixEnum.Section + item.section_id).removeClass(oldclass);
            }
            $('#' + DynamicControlPrefixEnum.Section + item.section_id).addClass(className);

            if ((className == DynamicSectionButtonClassName.InActive)) {

                $("#" + DynamicControlPrefixEnum.Section + item.section_id).css("pointer-events", "none");
                $("#" + DynamicControlPrefixEnum.Section + item.section_id).parent().css("cursor", "not-allowed");
            }
            else {
                //Default case               
                if (String(_testPinDB().first().is_section_navigation) == "1") {
                    $("#" + DynamicControlPrefixEnum.Section + item.section_id).css("pointer-events", "all");
                    $("#" + DynamicControlPrefixEnum.Section + item.section_id).parent().css("cursor", "default");
                }
                else {

                    $("#" + DynamicControlPrefixEnum.Section + item.section_id).css("pointer-events", "none");
                    $("#" + DynamicControlPrefixEnum.Section + item.section_id).parent().css("cursor", "not-allowed");
                }
            }
        });
        $("#" + DynamicControlPrefixEnum.Section + currentSectionID).css("pointer-events", "none");
        $("#" + DynamicControlPrefixEnum.Section + currentSectionID).parent().css("cursor", "not-allowed");
    } catch (e) {
        var data = "Assessment - RefreshSectionButton in ajax call : " + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("RefreshSectionButton", data);
    }
}

function InvokeSectionButton(element) {
    try {
        MCQAnswerupdate();
        FreezeTimer();
        isSection = true;
        eventclick = true;
        sectionStartTime = previouseQuesEndTime;
        if (isTimerElaspedTigger == true) {
            return;
        }
        SubjectiveFileMandatory();
        if (isSubjectiveMandatory != true) {
            var sectionid = element.id.replace(DynamicControlPrefixEnum.Section, '');
            var ques = _questionSetDB({ section_id: sectionid, question_type: "7" }).get();

            if (currentClickMode == ClickEvent.TimerElapsed) { lastSectionElapsedTime = "00:00:00" }
            else { lastSectionElapsedTime = $("#future_date").text(); }


            if (ques != null && ques.length > 0) {
                // var _time = $("#future_date").text();
                var _time = _sectionDetailsDB({ section_id: Number(sectionid) }).first().Last_ElapsedTimeInHours;
                if (_time != '00:00:00') {

                    if (isResumeTypeTest == false) {
                        swal.fire({
                            title: '<span>Typing Test</span>',
                            text: "You will  have only one attempt for Typing Test.",
                            imageUrl: '/Images/Pro/warning.svg',
                            imageWidth: 80,
                            imageHeight: 80,
                            showCancelButton: false,
                            confirmButtonText: "Yes",
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.value) {
                                isResumeTypeTest = true;
                                UnfreezeTimer();
                                typingpromiseResult = null;
                                _Gelement = element;
                                isResumeTypeTest = true;
                                if (isDoubleClicked($(this))) return;
                                typingpromiseResult = new Promise(function (resolve, reject) {
                                    InvokeTypingTest(resolve);
                                });
                                typingpromiseResult.then(result => BindSectionButtonInfo());

                            }
                            else {
                                UnfreezeTimer();
                                return false;
                            }
                        });
                    }
                    else {
                        swal.fire({
                            title: '<span>Typing Test</span>',
                            text: "You will  have only one attempt for Typing Test. Are you sure you want to enter the typing test Section?",
                            imageUrl: '/Images/Pro/warning.svg',
                            imageWidth: 80,
                            imageHeight: 80,
                            showCancelButton: true,
                            confirmButtonText: "Yes",
                            cancelButtonText: "No, Please Continue",
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.value) {

                                UnfreezeTimer();
                                typingpromiseResult = null;
                                _Gelement = element;
                                isResumeTypeTest = true;
                                if (isDoubleClicked($(this))) return;
                                typingpromiseResult = new Promise(function (resolve, reject) {
                                    InvokeTypingTest(resolve);
                                });
                                typingpromiseResult.then(result => BindSectionButtonInfo());
                            }
                            else {
                                UnfreezeTimer();
                                return false;
                            }
                        });

                    }
                }
            }
            else {
                $("#pauseBtnhms").val("Start");
                HandleTimerButton();
                //UnfreezeTimer();           
                //$("#pauseBtnhms").val("Start");
                //$("#pauseBtnhms").click();
                typingpromiseResult = null;
                _Gelement = element;
                typingpromiseResult = new Promise(function (resolve, reject) {
                    InvokeTypingTest(resolve);
                });
                typingpromiseResult.then(result => BindSectionButtonInfo());

            }
        }
        else {
            return false;
        }

    }
    catch (e) {
        var data = "Assessment - InvokeSectionButton in ajax call : " + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("InvokeSectionButton", data);
    }
}

function SubjectiveFileMandatory() {
    try {
        $("#pauseBtnhms").val("Start");
        HandleTimerButton();
        isSubjectiveMandatory = true;
        var _elapseTime = $("#future_date").text();
        if (_elapseTime != "00:00:00") {
            if (currentQuestionType == "3") {
                var questionData = _questionSetDB({ id: currentQuestionID }).first();
                var isSubFilesMandatory = questionData.is_subjectivefiles_mandatory;
                var subjectiveS3ID = "";
                var listS3ID = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                for (var i = 0; i < listS3ID.listSubjectiveS3.length; i++) {
                    data = listS3ID.listSubjectiveS3[i].S3_Id;
                    subjectiveS3ID += "," + data;
                }
                if ((subjectiveS3ID == "" || subjectiveS3ID == null || subjectiveS3ID == undefined) && isSubFilesMandatory == true) {
                    if (currentClickMode != ClickEvent.TimerElapsed) {
                        $('#btnEndtest').removeAttr('data-target');
                        $('#btnNext').attr('data-target', '');
                    }
                    swal.fire({
                        title: '',
                        text: "Please upload the file.",
                        imageUrl: '/Images/Pro/warning.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        allowOutsideClick: false,
                    }).then((result) => {
                        if (result.value) {

                            $("#divloading").hide();
                        }
                    });
                }
                else {
                    isSubjectiveMandatory = false;
                }
            }
            else {
                isSubjectiveMandatory = false;
            }
        }
        else {
            isSubjectiveMandatory = false;
        }

        return isSubjectiveMandatory;
    }
    catch (e) {
        var data = "Assessment - SubjectiveFileMandatory in ajax call : " + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("SubjectiveFileMandatory", data);
    }

}

function BindSectionButtonInfo() {
    try {
        element = _Gelement;
        isNavigation = 1;
        if (lastSectionElapsedTime != "00:00:00") {
            if (!validatePsychometericQuestionSelection()) {
                return;
            }
        }

        AutomaticInvokeFlag = true;

        var tmpSectionId = element.id.replace(DynamicControlPrefixEnum.Section, '');
        currentSectionID = tmpSectionId;
        var elementId = "#" + element.id;
        var elementValue = $(elementId).attr("value");
        currentSectionSno = elementValue;

        switch (durationType) {
            case DurationTypeEnum.ExamWise:
                BindQuestion(resumePoint, QuestionMode.ResumeQuestion);
                break;
            case DurationTypeEnum.SectionWise:
                BindSectionWiseQuestion(Number(currentSectionSno), QuestionMode.ResumeQuestion);
                break;
            default:
                break;
        }
        if (invokesectiondata != 0) {
            $("#divloading").show();
            ProcessEventLog("");
            UnfreezeTimer();
        }
        else {
            AssignPreviousControlValues();
        }

        invokesectiondata = invokesectiondata + 1;
        typingpromiseResult = null;
    }
    catch (e) {
        var data = "Assessment - BindSectionButtonInfo in ajax call : " + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("BindSectionButtonInfo", data);
    }

}

function BindTimer() {
    try {
        switch (durationType) {
            case DurationTypeEnum.ExamWise:
                if (lastElapsedTime != '' && lastElapsedTime != null && lastElapsedTime != undefined) {
                    BindTimerControls(lastElapsedTime);
                }
                else {
                    ConvertMinToTimeFormat(duration);
                }
                break;

            case DurationTypeEnum.SectionWise:
                ConvertMinToTimeFormat(String(lastSectionDurationInMins));
                break;
        }
    } catch (e) {
        PostJavascriptError("BindTimer", "Assessment - Get Duration in ajax call: " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function GetQuestionSet() {
    $("#divloading").show();

    var testpin = _testPinDB().first().TestPin;
    var token = _testPinDB().first().Token;
    var loginauditid = _testPinDB().first().login_audit_id;

    var requestData = {
        TestPin: testpin,
        Token: token,
        LoginAuditID: loginauditid, questionMode: "QuestionSet"
    };
    try {
        $.ajax({
            url: "/Assessment/GetQuestionSet",
            type: "POST",
            dataType: 'json',
            //data: '{TestPin : "' + testpin + '", Token : "' + token + '", LoginAuditID : "' + loginauditid + '" ,questionMode : "QuestionSet"}',
            data: JSON.stringify(requestData),
            contentType: 'application/json;charset=utf-8',
            timeout: 60000,
            tryCount: 0,
            retryLimit: 1,
            success: function (response) {
                if (response == Number(APIStatusCodeEnum.InternalServerError)) {
                    FreezeTimer();

                    swal.fire({
                        title: '<span></span>',
                        text: "Error in Collecting Question Set !",
                        type: "error",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        showCancelButton: false,
                        confirmButtonColor: '#ED5364',
                        confirmButtonText: 'OK',
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.value) {
                            //UnfreezeTimer();
                            var settingsinfo = _testPinDB().first().settingsname;
                            if (settingsinfo != null && settingsinfo != "") {
                                window.location.href = settingsinfo;
                            }

                        }
                        else {
                            $("#pauseBtnhms").val("Start");
                            $("#pauseBtnhms").click();
                        }
                    })
                }
                else if (response == Number(APIStatusCodeEnum.DuplicateUserLoggedIn)) {
                    //window.location.href = "/ThankYou/DuplicateUserThankYou";
                    swal.fire({
                        title: '<span></span>',
                        text: ErrorMessageEnum.DuplicateUserLoggedIn,
                        type: "error",
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        confirmButtonColor: '#ed5364',
                        closeOnConfirm: true,
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.value) {
                            UnfreezeTimer();
                            var settingsinfo = _testPinDB().first().settingsname;
                            if (settingsinfo != null && settingsinfo != "") {
                                window.location.href = settingsinfo;
                            }

                        }
                    })
                }
                else if (response.message == Number(APIStatusCodeEnum.ScheduleExpire)) {
                    swal.fire({
                        title: '<span></span>',
                        text: response.message,
                        type: "error",
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        confirmButtonColor: '#ed5364',
                        closeOnConfirm: true,
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.value) {
                            UnfreezeTimer();
                            var settingsinfo = _testPinDB().first().settingsname;
                            if (settingsinfo != null && settingsinfo != "") {
                                window.location.href = settingsinfo;
                            }

                        }
                    })
                }
                else {
                    _questionSetDB.insert(response);

                    questionCount = _questionSetDB().count();
                    GetMultimediaQuestions();
                    LoadQuestionPallete();
                    GetQuestionOptionSet();

                    UnfreezeTimer();
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $("#divloading").hide();
                //swal.fire({
                //    title: '<span></span>',
                //    text: ErrorMessageEnum.InternalServerError,
                //    type: "error",
                //    showCancelButton: false,
                //    confirmButtonText: "OK",
                //    imageUrl: '/Images/Pro/error.svg',
                //    imageWidth: 80,
                //    imageHeight: 80,
                //    confirmButtonColor: '#ed5364',
                //    closeOnConfirm: true,
                //    allowOutsideClick: false
                //}).then((result) => {
                //    if (result.value) {
                //        UnfreezeTimer();
                //        var settingsinfo = _testPinDB().first().settingsname;
                //        if (settingsinfo != null && settingsinfo != "") {
                //            window.location.href = settingsinfo;
                //        }

                //    }
                //})
                var data = " LoadAssessment - GetQuestionSet Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                PostJavascriptError("GetQuestionSet", data);
                return;
            }
        });
    } catch (e) {
        PostJavascriptError("GetQuestionSet-Catch", "Assessment - Get question set in ajax call: " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function GetMultimediaQuestions() {
    try {
        $.ajax({
            url: "/Assessment/GetMultimediaQuestion",
            type: "POST",
            dataType: 'json',
            data: '',
            contentType: 'application/json;charset=utf-8',
            timeout: 60000,
            tryCount: 0,
            retryLimit: 1,
            success: function (response) {
                if (response == Number(APIStatusCodeEnum.InternalServerError)) {
                    FreezeTimer();
                    internalServerError("Error in Collecting MultiMedia Question Set !");
                }
                else {
                    _multimediaQuestion.insert(response);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $("#divloading").hide();
                //swal.fire({
                //    title: '<span></span>',
                //    text: ErrorMessageEnum.InternalServerError,
                //    type: "error",
                //    showCancelButton: false,
                //    confirmButtonText: "OK",
                //    imageUrl: '/Images/Pro/error.svg',
                //    imageWidth: 80,
                //    imageHeight: 80,
                //    confirmButtonColor: '#ed5364',
                //    closeOnConfirm: true,
                //    allowOutsideClick: false
                //}).then((result) => {
                //    if (result.value) {
                //        UnfreezeTimer();
                //        var settingsinfo = _testPinDB().first().settingsname;
                //        if (settingsinfo != null && settingsinfo != "") {

                //            window.location.href = settingsinfo;
                //        }
                //    }
                //})
                var data = " LoadAssessment - GetMultimediaQuestions Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                PostJavascriptError("GetMultimediaQuestions", data);
                return;
            }
        });
    } catch (e) {
        PostJavascriptError("GetMultimediaQuestions-Catch", "Assessment - Get multimedia question set in ajax call: " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function GetQuestionOptionSet() {
    try {
        $.ajax({
            url: "/Assessment/GetQuestionOptionsSet",
            type: "POST",
            dataType: 'json',
            data: '',
            contentType: 'application/json;charset=utf-8',
            timeout: 60000,
            tryCount: 0,
            retryLimit: 1,
            success: function (response) {
                if (response == Number(APIStatusCodeEnum.InternalServerError)) {
                    FreezeTimer();
                    internalServerError("Error in Collecting Question Option Set !");
                }
                else {
                    _questionOptionSetDB.insert(response);
                    GetSubQuestionSet();
                    //UnfreezeTimer();
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $("#divloading").hide();
                //swal.fire({
                //    title: '<span></span>',
                //    text: ErrorMessageEnum.InternalServerError,
                //    type: "error",
                //    showCancelButton: false,
                //    confirmButtonText: "OK",
                //    imageUrl: '/Images/Pro/error.svg',
                //    imageWidth: 80,
                //    imageHeight: 80,
                //    confirmButtonColor: '#ed5364',
                //    closeOnConfirm: true,
                //    allowOutsideClick: false
                //}).then((result) => {
                //    if (result.value) {
                //        UnfreezeTimer();
                //        var settingsinfo = _testPinDB().first().settingsname;
                //        if (settingsinfo != null && settingsinfo != "") {

                //            window.location.href = settingsinfo;
                //        }

                //    }
                //})

                UnfreezeTimer();
                var data = " LoadAssessment - GetQuestionOptionSet Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                PostJavascriptError("GetQuestionOptionSet", data);
                return;
            }
        });
    } catch (e) {
        PostJavascriptError("GetQuestionOptionSet-Catch", "Assessment - Get question option set in ajax call: " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function GetSubQuestionSet() {
    try {
        FreezeTimer();
        $.ajax({
            url: "/Assessment/GetSubQuestionSet",
            type: "POST",
            dataType: 'json',
            data: '',
            contentType: 'application/json;charset=utf-8',
            timeout: 60000,
            tryCount: 0,
            retryLimit: 1,
            success: function (response) {
                if (response == Number(APIStatusCodeEnum.InternalServerError)) {
                    internalServerError("Error in Collecting Sub Question Set !");
                }
                else {
                    _subQuestionDB.insert(response);
                    GetAssessmentAnswerSet();
                    //UnfreezeTimer();
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $("#divloading").hide();
                //swal.fire({
                //    title: '<span></span>',
                //    text: ErrorMessageEnum.InternalServerError,
                //    type: "error",
                //    showCancelButton: false,
                //    confirmButtonText: "OK",
                //    imageUrl: '/Images/Pro/error.svg',
                //    imageWidth: 80,
                //    imageHeight: 80,
                //    confirmButtonColor: '#ed5364',
                //    closeOnConfirm: true,
                //    allowOutsideClick: false
                //}).then((result) => {
                //    if (result.value) {
                //        UnfreezeTimer();
                //        var settingsinfo = _testPinDB().first().settingsname;
                //        if (settingsinfo != null && settingsinfo != "") {

                //            window.location.href = settingsinfo;
                //        }                       
                //    }
                //})

                UnfreezeTimer();
                var data = " LoadAssessment - GetSubQuestionSet Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                PostJavascriptError("GetSubQuestionSet", data);
                return;
            }
        });
    } catch (e) {
        PostJavascriptError("GetSubQuestionSet-Catch", "Assessment - Get question set in ajax call: " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function GetAssessmentAnswerSet() {
    try {
        FreezeTimer();

        $.ajax({
            url: "/Assessment/GetAssessmentAnswerSet",
            type: "POST",
            dataType: 'json',
            data: '',
            contentType: 'application/json;charset=utf-8',
            timeout: 60000,
            tryCount: 0,
            retryLimit: 3,
            success: function (response) {
                if (response == Number(APIStatusCodeEnum.InternalServerError)) {
                    internalServerError("Error in Collecting Answer Set !");
                }

                else {
                    _assessmentAnswerDB.insert(response);
                    //UnfreezeTimer();


                    switch (durationType) {
                        case DurationTypeEnum.ExamWise:
                            BindSectionButton();
                            if (lastElapsedTime != null && lastElapsedTime != '' && lastElapsedTime != undefined) {
                                BindTimerControls(lastElapsedTime);
                            }
                            else {
                                ConvertMinToTimeFormat(String(duration));
                            }

                            if (isSectionNavigation == '1') {
                                //BindSectionButton();
                                isFirstTime = 1;
                                AssignPreviousControlValues();

                                if (lastSectionId != null && lastSectionId != '' && lastSectionId != undefined) {
                                    previousSectionId = lastSectionId;
                                    $('#' + DynamicControlPrefixEnum.Section + lastSectionId).click();
                                }
                                else {
                                    var firstSection = _sectionDetailsDB().first();
                                    previousSectionId = firstSection;
                                    $('#' + DynamicControlPrefixEnum.Section + firstSection.section_id).click();
                                }
                            }
                            else {
                                //BindSectionButton();
                                BindQuestion(resumePoint, QuestionMode.ResumeQuestion);
                            }

                            break;

                        case DurationTypeEnum.SectionWise:
                            isResumeTypeTest = false;
                            BindSectionButton();
                            isFirstTime = 1;

                            if (lastSectionId != null && lastSectionId != '' && lastSectionId != undefined) {
                                var secData = _sectionDetailsDB({ section_id: Number(lastSectionId) }).first().Last_ElapsedTimeInHours;
                                if (secData != '00:00:00' && secData != false) {
                                    previousSectionId = lastSectionId;
                                }
                                else {
                                    var result = false;
                                    _sectionDetailsDB().each(function (item, index) {
                                        if ((item["Last_ElapsedTimeInHours"] != '00:00:00') && (result == false)) {
                                            lastSectionId = item["section_id"];
                                            result = true;

                                        }
                                    });
                                }

                                $('#' + DynamicControlPrefixEnum.Section + lastSectionId).click();
                            }
                            else {
                                var firstSection = _sectionDetailsDB().first();
                                previousSectionId = firstSection;
                                $('#' + DynamicControlPrefixEnum.Section + firstSection.section_id).click();
                            }
                            break;

                        default:
                            break;
                    }
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $("#divloading").hide();
                //swal.fire({
                //    title: '<span></span>',
                //    text: ErrorMessageEnum.InternalServerError,
                //    type: "error",
                //    imageUrl: '/Images/Pro/error.svg',
                //    imageWidth: 80,
                //    imageHeight: 80,
                //    showCancelButton: false,
                //    confirmButtonText: "OK",
                //    confirmButtonColor: '#ed5364',
                //    closeOnConfirm: true,
                //    allowOutsideClick: false
                //}).then((result) => {
                //    if (result.value) {
                //        UnfreezeTimer();
                //        var settingsinfo = _testPinDB().first().settingsname;
                //        if (settingsinfo != null && settingsinfo != "") {

                //            window.location.href = settingsinfo;
                //        }

                //    }
                //})

                UnfreezeTimer();
                var data = " LoadAssessment - GetAssessmentAnswerSet Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                PostJavascriptError("GetAssessmentAnswerSet", data);
                return;
            }
        });
    } catch (e) {
        PostJavascriptError("GetAssessmentAnswerSet-catch", "Assessment - Get assessment answer set in ajax call: " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function ProcessResult() {
    $("#divloading").show();
    try {
        var testpin = _testPinDB().first().TestPin;
        var companyID = _testPinDB().first().company_id;
        var assignid = _testPinDB().first().assign_id;
        var token = _testPinDB().first().Token;
        var LoginAuditID = _testPinDB().first().login_audit_id;
        var Candidate_id = _testPinDB().first().candidate_id;
        var is_score_display = _testPinDB().first().is_score_display;
        var is_feedback = _testPinDB().first().is_feedback;
        var redirect_url = _testPinDB().first().redirect_url;
        var company_name = _testPinDB().first().company_name;

        var requestData = {
            TestPin: testpin, CompanyID: companyID, AssignID: assignid,
            LoginAuditID: LoginAuditID, Candidate_id: Candidate_id,
            Token: token,
            is_feedback: is_feedback, is_score_display: is_score_display,
            redirect_url: redirect_url, company_name: company_name
        };
        $.ajax({
            url: "../ThankYou/PostThankYou",
            type: "POST",
            dataType: 'json',
            // data: '{TestPin : "' + testpin + '",CompanyID:"' + companyID + '",AssignID:"' + assignid + '",LoginAuditID:"' + LoginAuditID + '",Candidate_id:"' + Candidate_id + '", Token :"' + token + '" ,is_feedback : "' + is_feedback + '" ,is_score_display : "' + is_score_display + '",redirect_url : "' + redirect_url + '",  company_name:"' + company_name + '"}',
            data: JSON.stringify(requestData),
            contentType: 'application/json;charset=utf-8',
            timeout: 60000,
            tryCount: 0,
            retryLimit: 1,
            success: function (response) {
                response = JSON.parse(JSON.stringify(response));

                if (Number(response) == APIStatusCodeEnum.Ok) {
                    clearInterval(autoSaveHeartbeatlog);
                    clearInterval(autoSaveImageProcLog);
                    window.location.href = "/ThankYou/LoadThankYou";
                }
                else {
                    $("#divloading").hide();
                    //internalServerError("Error in Processing Result !");
                    commonErrorAlert();
                }

            },
            error: function (jqXHR, textStatus, errorThrown) {
                $("#divloading").hide();
                var data = " LoadAssessment - ProcessResult Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                PostJavascriptError("ProcessResult", data);
                return;
            }
        });


    } catch (e) {
        PostJavascriptError("ProcessResult", "Error in Process Result :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}


function GetCurrentDate(serverDate) {
    try {
        //const date = new Date();
        //const yy = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)
        //const mm = new Intl.DateTimeFormat('en', { month: 'long' }).format(date)
        //const dd = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)
        //var today = `${dd}-${mm}-${yy}`;

        var dateString = serverDate;
        var date = new Date(dateString);
        const yy = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)
        const mm = new Intl.DateTimeFormat('en', { month: 'long' }).format(date)
        const dd = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)
        var today = `${dd}-${mm}-${yy}`;
        return today;
    } catch (e) {
        PostJavascriptError("GetCurrentDate", "Error in Get Current Date :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

//function GetCurrentDate() {
//    try {
//        var today = new Date();
//        var dd = today.getDate();
//        var mm = today.getMonth() + 1; //January is 0!
//        var yyyy = today.getFullYear();
//        if (dd < 10) {
//            dd = '0' + dd;
//        }
//        if (mm < 10) {
//            mm = '0' + mm;
//        }
//        var today = dd + '/' + mm + '/' + yyyy;
//        return today;
//    } catch (e) {
//        PostJavascriptError("Error in Get Current Date :" + e.message + ":" + "Testpin:" + _logDetails);
//    }
//}

function SnapImage() {
    try {
        //autoSaveImageProcLog = setInterval(ImageProctoringLog, 60000);
        var imageProcLimitmin = _testPinDB().first().is_img_threshold_limit;
        if (imageProcLimitmin != null) {
            autoSaveImageProcLog = setInterval(ImageProctoringLog, imageProcLimitmin);
        }
        else {
            autoSaveImageProcLog = setInterval(ImageProctoringLog, 60000);
        }
    } catch (e) {
        PostJavascriptError("SnapImage", "Error in Snap Image :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function ImageProctoringLog() {
    try {
        if (Webcam.stream != null && Webcam.stream != "" && Webcam.stream != undefined) {
            if (Webcam.stream.active == false) {
                iswebcamActive = false;
            }
            else {
                iswebcamActive = true;
            }
        }
        else {
            iswebcamActive = iswebcamActive;
        }

        if ((Number(isImageProctor) == 1) && (Number(_testPinDB().first().is_webcam) == 1)) {
            if (iswebcamActive == false) {
                swal.fire({
                    title: '<span></span>',
                    text: 'Please enable the camera and try again .',
                    type: "error",
                    showCancelButton: false,
                    confirmButtonText: "OK",
                    imageUrl: '/Images/Pro/error.svg',
                    imageWidth: 80,
                    imageHeight: 80,
                    confirmButtonColor: '#ed5364',
                    closeOnConfirm: true,
                    allowOutsideClick: false
                }).then((result) => {
                    if (result.value) {
                        var settingsinfo = _testPinDB().first().settingsname;
                        if (settingsinfo != null && settingsinfo != "") {
                            window.location.href = settingsinfo;
                        }

                    }
                })
            }
            else {
                snapPhoto();
            }
        }
        else {
            snapPhoto();
        }

    } catch (e) {
        PostJavascriptError("ImageProctoringLog", "Error in Image Proctoring Log :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}
function snapPhoto() {
    try {
        var _testPin = _testPinDB().first().TestPin;
        var _companyId = _testPinDB().first().company_id;
        var _assignedId = _testPinDB().first().assign_id;
        var _candidateId = _testPinDB().first().candidate_id;
        var _loginAuditId = _testPinDB().first().login_audit_id;
        var _istrainingImage = '0';
        //var _token = _testPinDB().first().Token;


        Webcam.snap(function (data_uri) {
            var requestData = {
                imageBase64Data: data_uri, testpin: _testPin, CompanyID: _companyId,
                AssignID: _assignedId, LoginAuditID: _loginAuditId,
                CandidateID: _candidateId, isTrainingImage: _istrainingImage
                //,Token: _token
            };

            $.ajax({
                url: "/ImageProctoring/PostImagetoS3",
                type: "POST",
                dataType: 'json',
                //data: '{imageBase64Data : "' + data_uri + '", testpin : "' + _testPin + '", CompanyID : "' + _companyId + '", AssignID : "' + _assignedId + '", LoginAuditID : "' + _loginAuditId + '", CandidateID : "' + _candidateId + '", isTrainingImage : "' + _istrainingImage + '" }',
                data: JSON.stringify(requestData),
                contentType: 'application/json;charset=utf-8',
                timeout: 30000,
                tryCount: 0,
                retryLimit: 3,
                success: function (response) {
                    if (Number(response) == APIStatusCodeEnum.Invalid) {
                        FreezeTimer();
                        //internalServerError("Error in Image Processing!, Please check your internet bandwidth.");
                        commonErrorAlert();
                    }
                    else if (Number(response) == APIStatusCodeEnum.DuplicateUserLoggedIn) {
                        //window.location.href = "/ThankYou/DuplicateUserThankYou";
                        swal.fire({
                            title: '<span></span>',
                            text: ErrorMessageEnum.DuplicateUserLoggedIn,
                            type: "error",
                            showCancelButton: false,
                            confirmButtonText: "OK",
                            imageUrl: '/Images/Pro/error.svg',
                            imageWidth: 80,
                            imageHeight: 80,
                            confirmButtonColor: '#ed5364',
                            closeOnConfirm: true,
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.value) {
                                UnfreezeTimer();
                                var settingsinfo = _testPinDB().first().settingsname;
                                if (settingsinfo != null && settingsinfo != "") {
                                    window.location.href = settingsinfo;
                                }

                            }
                        })
                    }
                    else if (response.Code == Number(APIStatusCodeEnum.ScheduleExpire)) {
                        swal.fire({
                            title: '<span></span>',
                            text: response.Message,
                            type: "error",
                            showCancelButton: false,
                            confirmButtonText: "OK",
                            imageUrl: '/Images/Pro/error.svg',
                            imageWidth: 80,
                            imageHeight: 80,
                            confirmButtonColor: '#ed5364',
                            closeOnConfirm: true,
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.value) {
                                let promiseResult = new Promise(function (resolve, reject) {
                                    ProcessEventLog(ClickEvent.AutoSubmit, resolve);
                                    resolve("done");
                                });
                                promiseResult.then(result => ProcessResult());
                            }
                        })
                    }

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    this.tryCount++;
                    $("#divloading").hide();
                    FreezeTimer();
                    if (this.tryCount <= this.retryLimit) {
                        $.ajax(this);
                        return;
                    }
                    UnfreezeTimer();
                    var data = " LoadAssessment - snapPhoto Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                    PostJavascriptError("snapPhoto", data);
                    return;
                }
            });
        })
    }
    catch (e) {
        PostJavascriptError("snapPhoto", "Error in Image Proctoring Log :" + e.message + ":" + "Testpin:" + _logDetails);
    }

}

$(window).blur(function (event) {
    cameraFlag = false;
    $("#divloading").hide();
    var elem = document.activeElement;
    if (elem && elem.tagName == 'IFRAME') {
        return true;
    }
    if (Number(isWindowProctor) == 1) {
        if (cameraFlag == false) {
            if (iswindowproct == false) {
                if (isLimitReach == false) {
                    windowProNavigationMode = 0;
                    isWindowblur = false;
                    WindowProctoringNavigationLog();
                }
                else {
                    //let promiseResult = new Promise(function (resolve, reject) {
                    //    ProcessEventLog("Endtest");
                    //    resolve("done");
                    //});
                    //promiseResult.then(result => ProcessResult());
                    ProcessEventLog("Endtest");
                    redirectHomescreen();
                    // RedirectToTestPinPage();
                    isLimitReach = false
                }
            }

        }
        else {
            //Note : This Flag must to be Reset in case of Image Proctoring.
            //This Flag is Reset because Webcamera allow prompt will trigger this Blur Event automatically.
            cameraFlag = false;
        }

    }
    return true;
});

function WindowProctoringNavigationLog() {
    try {
        if (_testPinDB().first().is_window_proctering == '0') {
            return;
        }

        var _testPin = _testPinDB().first().TestPin;
        var _companyId = _testPinDB().first().company_id;
        var _assignedId = _testPinDB().first().assign_id;
        var _loginAuditId = _testPinDB().first().login_audit_id;
        var _token = _testPinDB().first().Token;

        var requestData = {
            testpin: _testPin, CompanyID: _companyId, AssignID: _assignedId,
            LoginAuditID: _loginAuditId
            , Token: _token
            , navigation_mode: windowProNavigationMode
        };

        $.ajax({
            url: "/WindowProctoring/PostWindowProctorLog",
            type: "POST",
            dataType: 'json',
            //data: '{testpin : "' + _testPin + '", CompanyID: "' + _companyId + '" ,AssignID : "' + _assignedId + '" , LoginAuditID:"' + _loginAuditId + '",Token:"' + _token + '" ,navigation_mode:"' + windowProNavigationMode + '"}',
            data: JSON.stringify(requestData),
            contentType: 'application/json;charset=utf-8',
            timeout: 30000,
            tryCount: 0,
            retryLimit: 1,
            async: false,
            success: function (response) {
                if (Number(response.code) == APIStatusCodeEnum.Ok) {
                    if (isWindowblur == false) {
                        totalNoofRetries = response.total_no_of_retries;
                        actualNoofRetries = response.actual_no_of_retries;
                        var remainingTries = (totalNoofRetries - actualNoofRetries);
                        if ((Number(totalNoofRetries) == Number(actualNoofRetries)) || (Number(totalNoofRetries) < Number(actualNoofRetries))) {
                            isLimitReach = true;
                            FreezeTimer();
                            swal.fire({
                                title: '<span></span>',
                                text: "Window Proctoring limit has been reached !",
                                type: "error",
                                showCancelButton: false,
                                confirmButtonText: "OK",
                                imageUrl: '/Images/Pro/error.svg',
                                imageWidth: 80,
                                imageHeight: 80,
                                confirmButtonColor: '#ed5364',
                                allowOutsideClick: false,
                            }).then((result) => {
                                if (result.value) {
                                    ////UnfreezeTimer();                                   
                                    //let promiseResult = new Promise(function (resolve, reject) {
                                    //    ProcessEventLog("Endtest");
                                    //    resolve("done");
                                    //});
                                    //promiseResult.then(result => ProcessResult());
                                    ProcessEventLog("Endtest");
                                    redirectHomescreen();
                                    //window.location.href = "/TestPin/StartExam";
                                }

                            });

                        }
                        else {
                            isWindowblur = true;
                            windowProNavigationMode = 1;
                            windowProctoringLimit(remainingTries);
                        }
                    }

                }
                else if (Number(response) == APIStatusCodeEnum.Invalid) {
                    windowProctoringLimit(remainingTries);
                }
                else if (Number(response) == APIStatusCodeEnum.DuplicateUserLoggedIn) {
                    //window.location.href = "/Testpin/DuplicateUserThankYou";
                    swal.fire({
                        title: '<span></span>',
                        text: ErrorMessageEnum.DuplicateUserLoggedIn,
                        type: "error",
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        confirmButtonColor: '#ed5364',
                        closeOnConfirm: true,
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.value) {
                            UnfreezeTimer();
                            var settingsinfo = _testPinDB().first().settingsname;
                            if (settingsinfo != null && settingsinfo != "") {
                                window.location.href = settingsinfo;
                            }

                        }
                    })
                }
                else if (response.Code == Number(APIStatusCodeEnum.ScheduleExpire)) {
                    swal.fire({
                        title: '<span></span>',
                        text: response.Message,
                        type: "error",
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        confirmButtonColor: '#ed5364',
                        closeOnConfirm: true,
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.value) {
                            let promiseResult = new Promise(function (resolve, reject) {
                                ProcessEventLog(ClickEvent.AutoSubmit, resolve);
                                resolve("done");
                            });
                            promiseResult.then(result => ProcessResult());
                        }
                    })
                }
                else {
                    $("#divloading").hide();
                    //internalServerError("Error in Window Proctoring !");
                    commonErrorAlert();
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {

                this.tryCount++;
                $("#divloading").hide();
                FreezeTimer();
                if (this.tryCount <= this.retryLimit) {
                    $.ajax(this);
                    return;
                }
                UnfreezeTimer();
                var data = " LoadAssessment - WindowProctoringNavigationLog Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                PostJavascriptError("WindowProctoringNavigationLog", data);
                return;
            }
        });

    } catch (e) {
        PostJavascriptError("WindowProctoringNavigationLog-Catch", "Error in Window Proctoring Navigation Log :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

// if assessment is window proctored close the model and redirect to testpin page, else redirect to the testpin page
function RedirectToTestPinPage() {
    try {
        var isModel = window.localStorage.getItem("IsModel");
        if (isModel == "true") {
            window.localStorage.setItem("IsModelClosed", "true");
            window.close();
        }
        else {
            var settingsinfo = _testPinDB().first().settingsname;
            if (settingsinfo != null && settingsinfo != "") {

                window.location.href = settingsinfo;
            }

        }
    } catch (e) {
        throw e;
    }
}

function HeartBeatLog() {
    try {
        autoSaveHeartbeatlog = setInterval(ProcessHeartBeatLog, 180000);

    } catch (e) {
        PostJavascriptError("HeartBeatLog", "Error in Heart Beat Log :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function ProcessHeartBeatLog() {
    try {
        var _testPin = _testPinDB().first().TestPin;
        var _companyId = _testPinDB().first().company_id;
        var _assignedId = _testPinDB().first().assign_id;
        var _sectionId = currentSectionID;
        var _attemptId = _testPinDB().first().attempt_id;
        var _loginAuditId = _testPinDB().first().login_audit_id;
        var _token = _testPinDB().first().Token;
        var _elapseTime = $("#future_date").text();

        var requestData = {
            testpin: _testPin, CompanyID: _companyId, AssignID: _assignedId,
            SectionID: _sectionId, AttemptID: _attemptId, LoginAuditID: _loginAuditId,
            ElaspedTime: _elapseTime
            , Token: _token
        };

        $.ajax({
            url: "/HeartBeatLog/PostHeartBeatLog",
            type: "POST",
            dataType: 'json',
            //data: '{testpin : "' + _testPin + '", CompanyID: "' + _companyId + '" ,AssignID : "' + _assignedId + '",SectionID:"' + _sectionId + '",AttemptID:"' + _attemptId + '" , LoginAuditID:"' + _loginAuditId + '" , ElaspedTime : "' + _elapseTime + '", Token : "' + _token + '"}',
            data: JSON.stringify(requestData),
            contentType: 'application/json;charset=utf-8',
            timeout: 60000,
            tryCount: 0,
            retryLimit: 1,
            success: function (response) {
                if (Number(response) == Number(APIStatusCodeEnum.Invalid)) {
                    internalServerError("Error in Health Processing !");
                }
                else if (Number(response) == Number(APIStatusCodeEnum.DuplicateUserLoggedIn)) {
                    //window.location.href = "/ThankYou/DuplicateUserThankYou";
                    swal.fire({
                        title: '<span></span>',
                        text: ErrorMessageEnum.DuplicateUserLoggedIn,
                        type: "error",
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        confirmButtonColor: '#ed5364',
                        closeOnConfirm: true,
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.value) {
                            UnfreezeTimer();
                            var settingsinfo = _testPinDB().first().settingsname;
                            if (settingsinfo != null && settingsinfo != "") {
                                window.location.href = settingsinfo;
                            }

                        }
                    })
                }
                else if (response.Code == Number(APIStatusCodeEnum.ScheduleExpire)) {
                    swal.fire({
                        title: '<span></span>',
                        text: response.Message,
                        type: "error",
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        confirmButtonColor: '#ed5364',
                        closeOnConfirm: true,
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.value) {
                            let promiseResult = new Promise(function (resolve, reject) {
                                ProcessEventLog(ClickEvent.AutoSubmit, resolve);
                                resolve("done");
                            });
                            promiseResult.then(result => ProcessResult());
                        }
                    })
                }
                else if (Number(response.Code) == Number(APIStatusCodeEnum.Terminate)) {
                    swal.fire({
                        title: '<span></span>',
                        text: response.Message,
                        type: "error",
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        confirmButtonColor: '#ed5364',
                        closeOnConfirm: true,
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.value) {
                            UnfreezeTimer();
                            var settingsinfo = _testPinDB().first().settingsname;
                            if (settingsinfo != null && settingsinfo != "") {
                                window.location.href = settingsinfo;
                            }

                        }
                    })
                }
                else {
                    $("#divloading").hide();

                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                this.tryCount++;
                $("#divloading").hide();
                if (this.tryCount <= this.retryLimit) {
                    $.ajax(this);
                    return;
                }

                var data = "LoadAssessment - ProcessHeartBeatLog Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                PostJavascriptError("ProcessHeartBeatLog", data);
                return;
            }
        });
    } catch (e) {
        PostJavascriptError("ProcessHeartBeatLog", "Error in Process Heart Beat Log :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function TimerElapsed() {
    try {
        // MCQAnswerupdate();
        eventclick = true;
        switch (durationType) {
            case DurationTypeEnum.ExamWise:
                currentClickMode = ClickEvent.TimerElapsed;
                isPreviousOff = true;
                $("#btnEndtest").click();
                break;

            case DurationTypeEnum.SectionWise:
                currentClickMode = ClickEvent.TimerElapsed;
                previousQuestionId = currentQuestionID;
                previousQuestionType = currentQuestionType;
                switch (currentQuestionType) {
                    case QuestionTypeEnum.TypingTest:
                        isNavigation = 1;
                    case QuestionTypeEnum.SubjectiveType:
                        isNavigation = 1;
                        var _answer = $("#txtSubjectiveType").summernote('code');
                        _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: _answer });
                        var questionPalID;
                        if (_answer != '' && _answer != null && _answer != undefined && _answer != 0) {
                            questionPalID = QuestionPalleteEnum.Answered;
                        }
                        else {
                            qsuestionPalID = QuestionPalleteEnum.NotAnswered;
                        }
                        _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });

                        break;
                    default:
                        isNavigation = 1;
                        break;
                }

                if (allSecElapsed == false) {
                    var quesPallete = _testPinDB().first().is_previous;

                    if ((String(currentSNo) == String(totalNoofQuestions)) && (String(quesPallete) == "0")) {
                        isPreviousOff = true;
                        $("#btnEndtest").attr('disabled', false);
                        $("#btnEndtest").click();
                    }
                    else if (String(quesPallete) == "0" && String(isSectionNavigation) == "0") {
                        navOff = true;
                        previousSectionId = currentSectionID;
                        var secData = _sectionDetailsDB({ section_id: { ">": currentSectionID }, Last_ElapsedTimeInHours: { "!is": "00:00:00" } }).first();
                        if (secData != false) {
                            currentSectionID = secData.section_id;
                            currentSectionSno = secData.SNo;
                        }
                        else {
                            navOff = false;
                        }

                        ProcessEventLog(ClickEvent.TimerElapsed);
                    }
                    else {
                        ProcessEventLog(ClickEvent.TimerElapsed);
                    }
                }
                else {
                    let promiseResult = new Promise(function (resolve, reject) {
                        if (durationType == DurationTypeEnum.SectionWise) {
                            if (currentQuestionType == QuestionTypeEnum.TypingTest) {
                                TypingTestAlert();
                            }
                        }
                        resolve("done");
                    });
                    promiseResult.then(result => ProcessResult());
                    allSecElapsed = false;
                }


                // End test if all the section timer elapsed

                break;
        }

    } catch (e) {
        PostJavascriptError("TimerElapsed", "Error in Timer Elapsed :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function ConvertMinToTimeFormat(duration) {

    try {
        String.prototype.minsToHHMMSS = function () {
            var mins_num = parseFloat(this, 10);
            var _hours = Math.floor(mins_num / 60);
            var _minutes = Math.floor((mins_num - ((_hours * 3600)) / 60));
            var _seconds = Math.floor((mins_num * 60) - (_hours * 3600) - (_minutes * 60));
            if (_hours < 10) {
                _hours = "0" + _hours;
            }
            if (_minutes < 10) {
                _minutes = "0" + _minutes;
            }
            if (_seconds < 10) {
                _seconds = "0" + _seconds;
            }
            previouseQuesEndTime = _hours + ':' + _minutes + ':' + _seconds;
            return _hours + ':' + _minutes + ':' + _seconds;
        }
        var decimalMinuteString = duration;
        var timeString = decimalMinuteString.minsToHHMMSS();
        BindTimerControls(timeString);
    }
    catch (e) {
        PostJavascriptError("ConvertMinToTimeFormat", "Error in Convert Minutes To Time Format :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

//Note:Furture_Date element will be work only for Exam Wise.For Section wise we will be using only dynamic control.
//It will be in the combination of TimerPrefix + CurrentSectionId
function BindTimerControls(timeString) {
    try {

        var output;
        switch (durationType) {
            case DurationTypeEnum.ExamWise:
                previouseQuesEndTime = timeString;
                break
            case DurationTypeEnum.SectionWise:
                output = document.getElementById('future_date');
                output.innerText = timeString;
                var splitStr = timeString.split(':');
                if (isTimer == false) {
                    clearInterval(TimerHandle);
                    CountDownTimer(splitStr[0], splitStr[1], splitStr[2], output);
                }
                previouseQuesEndTime = timeString;
                sectionfirsttime = timeString;
                break;
        }

    } catch (e) {
        PostJavascriptError("BindTimerControls", "BindTimerControls :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}
var SphereEngineToken = "";

function BtnCodemirrorSubmitClick() {
    var inputselectmode = $('#select').val();
    if (inputselectmode != '' && inputselectmode != "--select--") {
        ProcessSpojS3Id();

        $("#divProgrammingRunCode").empty();
        //if (($('#editor_' + currentQuestionID).val() != '') && ($('#editor_' + currentQuestionID).val() != null) && ($('#editor_' + currentQuestionID).val() != undefined)) {
        if (editor.getValue() != '' && (editor.getValue() != null) && (editor.getValue() != undefined)) {
            PostSphereEngineResult();
            return true;
        }
        else {
            $("#divloading").hide();
            swal.fire({
                title: '<span></span>',
                text: "Please enter code, then only u can able to submit the code.",
                imageUrl: '/Images/Pro/warning.svg',
                imageWidth: 80,
                imageHeight: 80,
                type: 'waring',
                confirmButtonText: "Ok",
                allowOutsideClick: false
            }).then((result) => {
                if (result.value) {
                    $("#pauseBtnhms").val("Start");
                    $("#pauseBtnhms").click();
                    return false;
                }
            });
        }



    }
    else {
        alert("Please select the programing langugage");
        return false;
    }
}

function PostSphereEngineResult() {
    $("#divloading").show();
    $('#text').val('');
    var SphereEngineToken = "";
    FreezeTimer();
    var answerSetData = _assessmentAnswerDB({ question_id: currentQuestionID }).first();

    for (var i = 0; i < answerSetData.listlanguage.length; i++) {
        if (answerSetData.listlanguage[i].compiler_Name == CurrentCompilerName) {
            CurrentCompilerId = answerSetData.listlanguage[i].compiler_Id;
        }
    }

    var _compilerName = CurrentCompilerName;
    var _problemId = CurrentProblemId;
    var _problemCode = CurrentProblemCode;
    var _compilerId = CurrentCompilerId;
    var _Source = editor.getValue();

    var _accessToken;
    var _question_id = currentQuestionID;
    var encodedSource = escape(_Source);
    var testpin = _testPinDB().first().TestPin;
    var testCaseLength;
    var buttonName = $("#expand-code-area").text();

    var fd = new FormData();
    fd.append("compiler_Name", _compilerName);
    fd.append("problem_Id", _problemId);
    fd.append("problem_Code", _problemCode);
    fd.append("compiler_Id", _compilerId);
    fd.append("access_token", _accessToken);
    fd.append("question_id", _question_id);
    fd.append("strsource", encodedSource);
    fd.append("testpin", testpin);

    if (currentQuestionType == Number(QuestionTypeEnum.Code_Simulation)) {
        try {

            $.ajax({
                url: "/Assessment/GetSphereEngineTokenAsync",
                enctype: 'text/plain',
                type: "POST",
                data: fd,
                processData: false,
                contentType: false,
                cache: false,
                timeout: 60000,
                tryCount: 0,
                retryLimit: 10,
                success: function (response) {

                    SphereEngineToken = JSON.parse(response);
                    _resultset = SphereEngineToken.ResultSet;
                    var resultdata = ""; var resultstatus = ""; var resulttime = ""; var resultname = ""; var resultmemory = "";

                    if (_resultset != null && _resultset != undefined) {
                        if (_resultset.result != null && _resultset.result != undefined) {
                            SubmissionId = SphereEngineToken.submission_id;
                            var _exam_ans = _Source;
                            var _s3_id = SphereEngineToken.s3_id;

                            //16437	code not saved after submit code
                            var datalang = answerSetData.listlanguage;
                            for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                                if (answerSetData.listlanguage[i].compiler_Name == CurrentCompilerName) {
                                    _compilerId = answerSetData.listlanguage[i].compiler_Id;
                                    if (_s3_id != null && _s3_id != undefined && _s3_id != '') {
                                        datalang[i].s3_id = _s3_id;
                                    }
                                    datalang[i].IsSelected = 1;
                                    datalang[i].exam_answer = _Source;
                                }
                                else {
                                    datalang[i].IsSelected = 0;
                                }
                            }
                            //16437-update listlanguage
                            _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: _exam_ans, submission_id: SubmissionId, s3_id: _s3_id, IsSelectedCompiler: CurrentModeType, listlanguage: datalang });


                            if (_resultset.result.testcases != null) {
                                for (var i = 0; i < _resultset.result.testcases.length; i++) {
                                    testCaseLength = _resultset.result.testcases.length;
                                    var status = "";
                                    //if (_resultset.result.testcases[i].status.name == "wrong answer" || _resultset.result.testcases[i].status.name.includes("error")) {

                                    //    status = "<i class='fa fa-times-circle' aria-hidden='true' style='color: red;'></i>";
                                    //}
                                    //else {
                                    //    status = "<i class='fa fa-check-circle' aria-hidden='true' style='color: green;'></i>";
                                    //}
                                    if (_resultset.result.testcases[i].status.name == "accepted") {



                                        status = "<i class='fa fa-check-circle' aria-hidden='true' style='color: green;'></i>" + _resultset.result.testcases[i].status.name;
                                    }
                                    else {
                                        status = "<i class='fa fa-times-circle' aria-hidden='true' style='color: red;'></i>" + _resultset.result.testcases[i].status.name;
                                    }
                                    resultdata = resultdata + "<tr><td>Input " + _resultset.result.testcases[i].number + "</td><td>" + status + "</td><td>" + _resultset.result.testcases[i].time + "</td><td>" + _resultset.result.testcases[i].memory + "</td></tr>";
                                }

                            }
                            //if (_resultset.result.status.name == "wrong answer" || _resultset.result.status.name.includes("error")) {
                            //    resultstatus = "<i class='fa fa-times-circle' aria-hidden='true' style='color: red;'></i> " + _resultset.result.status.name;
                            //}
                            //else {
                            //    resultstatus = "<i class='fa fa-check-circle' aria-hidden='true' style='color: green;'></i>" + _resultset.result.status.name;
                            //}
                            if (_resultset.result.status.name == "accepted") {
                                resultstatus = "<i class='fa fa-check-circle' aria-hidden='true' style='color: green;'></i> " + _resultset.result.status.name;
                            }
                            else {
                                resultstatus = "<i class='fa fa-times-circle' aria-hidden='true' style='color: red;'></i>" + _resultset.result.status.name;
                            }
                            resulttime = _resultset.result.time;
                            resultname = _resultset.compiler.name;
                            resultmemory = _resultset.result.memory;
                            if (String(buttonName) == "Collapse") {
                                $("#expand-code-area").click();
                            }

                        }
                        else {
                            swal.fire({
                                title: '<span></span>',
                                text: ErrorMessageEnum.InternalServerError,
                                type: "error",
                                showCancelButton: false,
                                confirmButtonText: "OK",
                                imageUrl: '/Images/Pro/error.svg',
                                imageWidth: 80,
                                imageHeight: 80,
                                confirmButtonColor: '#ed5364',
                                closeOnConfirm: true,
                                allowOutsideClick: false
                            });
                        }
                    }

                    $("#codeResult").removeClass("error-badge").empty();
                    $("#testcase").empty();
                    var swal_html = `<div align="left" class="col-md-4">Submission ID</div><div class="col-md-1">=</div><div class="col-md-5">` + SubmissionId + `</div> </br><div align="left" class="col-md-4">Result</div><div class="col-md-1">=</div><div class="col-md-5">` + resultstatus + `</div> </br><div id="divresult" class="p-t-20" ><table id="tblResult" class="table table-bordered"><thead><tr><th>Time(Sec)</th><th>Memory(KiB)</th><th>Language</th></tr></thead><tbody><tr><td>` + resulttime + `</td><td>` + resultmemory + `</td><td>` + resultname + `</td></tr></tbody></table></div> </br><table id="table" class="table table-bordered"><thead><tr><th>Input</th><th>Result</th><th>Time(Sec)</th><th>Memory(KiB)</th></tr></thead><tbody> ` + resultdata + `</tbody></table>`;
                    $("#testcase").append(swal_html);
                    if (testCaseLength == null || testCaseLength == '' || testCaseLength == undefined) {
                        $("#error-badge").hide();
                        $('#table').hide();
                    }
                    else {
                        $("#codeResult").addClass("error-badge").text(testCaseLength);
                        $('#table').show();

                    }

                    ProcessSpojSubmissionResultLog();
                    var problemId = "#test-case-tab";
                    showCodingTabcontrol(problemId);
                    $("#divloading").hide();
                    UnfreezeTimer();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    this.tryCount++;
                    $("#divloading").hide();
                    if (this.tryCount <= this.retryLimit) {
                        $.ajax(this);
                        return;
                    }
                    else {
                        //swal.fire({
                        //    title: '<span></span>',
                        //    text: ErrorMessageEnum.InternalServerError,
                        //    type: "error",
                        //    showCancelButton: false,
                        //    confirmButtonText: "OK",
                        //    imageUrl: '/Images/Pro/error.svg',
                        //    imageWidth: 80,
                        //    imageHeight: 80,
                        //    confirmButtonColor: '#ed5364',
                        //    closeOnConfirm: true,
                        //    allowOutsideClick: false
                        //});
                    }
                    UnfreezeTimer();
                    var data = "PostSphereEngineResult - PostSphereEngineResult Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                    PostJavascriptError("PostSphereEngineResult", data);
                    return;
                }
            });
        } catch (e) {
            PostJavascriptError("PostSphereEngineResult", "PostSphereEngineResult - PostSphereEngineResult Ajax Call:" + e.message + ":" + "Testpin:" + _logDetails);
        }
    }


}
function PostSubjectiveTypeValue() {
    try {
        autoSaveSubjective = setInterval(ProcessSubjectiveTypeValue, 60000);
    } catch (e) {
        PostJavascriptError("PostSubjectiveTypeValue", "Error in PostSubjectiveTypeValue :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function ProcessSubjectiveTypeValue() {
    try {
        var source = $("#txtSubjectiveType").summernote('code');
        var elapsetime = $("#future_date").text();
        var testpin = _testPinDB().first().TestPin;
        var loginauditid = _testPinDB().first().login_audit_id;

        var requestData = {
            TestPin: testpin, LoginAuditID: loginauditid, QuestionID: currentQuestionID,
            ExamAnswer: source, LastElapsedTime: elapsetime
        };
        $.ajax({
            url: "/EventLog/PostSubjectiveLog",
            type: "POST",
            dataType: 'json',
            //data: '{TestPin:"' + testpin + '",LoginAuditID:"' + loginauditid + '",QuestionID:"' + currentQuestionID + '",ExamAnswer:"' + source + '",LastElapsedTime:"' + elapsetime + '"}',
            data: JSON.stringify(requestData),
            contentType: 'application/json;charset=utf-8',
            timeout: 30000,
            tryCount: 0,
            retryLimit: 3,
            success: function (response) {
                _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: source });
            }
        });

    }
    catch (e) {
        PostJavascriptError("ProcessSubjectiveTypeValue", "Error in ProcessSubjectiveTypeValue :" + e.message + ":" + "Testpin:" + _logDetails);
    }


}

function PostS3Id() {
    try {
        autoSaveCoding = setInterval(ProcessSpojS3Id, 60000);
    } catch (e) {
        PostJavascriptError("PostS3Id", "Error in PostS3Id :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function ProcessSpojS3Id() {
    try {
        var _Source = editor.getValue();
        var encodedSource = escape(_Source);
        var requestData = { source: encodedSource, question_id: currentQuestionID };

        if (($('#editor_' + currentQuestionID).val() != '') && ($('#editor_' + currentQuestionID).val() != null) && ($('#editor_' + currentQuestionID).val() != undefined)) {
            $.ajax({
                url: "/Assessment/PostS3Id",
                type: "POST",
                dataType: 'json',
                //data: '{source:"' + encodedSource + '",question_id:"' + currentQuestionID + '"}',
                data: JSON.stringify(requestData),
                contentType: 'application/json;charset=utf-8',
                timeout: 30000,
                tryCount: 0,
                retryLimit: 3,
                success: function (response) {
                    var SphereEngineS3Id = JSON.parse(response);
                    var _s3_id = SphereEngineS3Id.s3_id;

                    var answerSetData = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                    var datalang = answerSetData.listlanguage;
                    for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                        if (answerSetData.listlanguage[i].compiler_Name == CurrentCompilerName) {
                            CurrentCompilerId = answerSetData.listlanguage[i].compiler_Id;
                            if (_s3_id != null && _s3_id != undefined && _s3_id != '') {
                                datalang[i].s3_id = _s3_id;
                                CurrentS3Id = _s3_id;
                            }
                            datalang[i].IsSelected = 1;
                            datalang[i].exam_answer = _Source;
                        }
                        else {
                            datalang[i].IsSelected = 0;
                        }
                        _assessmentAnswerDB({ question_id: currentQuestionID }).update({ s3_id: _s3_id });
                        _assessmentAnswerDB({ question_id: currentQuestionID }).update({ listlanguage: datalang });


                    }
                    //  HandleTimerButton();
                    ProcessSpojLog();
                }

            });
        }

    }
    catch (e) {
        PostJavascriptError("PostS3Id", "Error in PostS3Id :" + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function ProcessSpojLog() {
    try {
        var testpin = _testPinDB().first().TestPin;
        var assignedid = _testPinDB().first().assign_id;
        var loginauditid = _testPinDB().first().login_audit_id;
        var requestData = {
            TestPin: testpin, AssignID: assignedid, LoginAuditID: loginauditid,
            compiler_id: CurrentCompilerId, QuestionID: currentQuestionID,
            ExamAnswer: CurrentS3Id
        };

        $.ajax({
            url: "/EventLog/PostS3IdLog",
            type: "POST",
            dataType: 'json',
            //data: '{TestPin:"' + testpin + '",AssignID:"' + assignedid + '",LoginAuditID:"' + loginauditid + '",compiler_id:"' + CurrentCompilerId + '",QuestionID:"' + currentQuestionID + '",ExamAnswer:"' + CurrentS3Id + '"}',
            data: JSON.stringify(requestData),
            contentType: 'application/json;charset=utf-8',
            timeout: 60000,
            tryCount: 0,
            retryLimit: 3,
            success: function (response) {
            }

        });
    } catch (e) {
        PostJavascriptError("ProcessSpojLog", "Error in ProcessSpojLog :" + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function PostEssayTypeValue() {
    try {
        autoSaveEssay = setInterval(ProcessEssayS3Id, 60000);
    } catch (e) {
        PostJavascriptError("PostEssayTypeValue", "Error in PostEssayTypeValue:" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function ProcessEssayS3Id() {
    try {
        var _Source = $("#txtEssayType").val();
        if (_Source != null && _Source != "" && _Source != undefined) {
            var encodedSource = escape(_Source);
            var request = {
                source: encodedSource, question_id: currentQuestionID
            };
            $.ajax({
                url: "/Assessment/PostEssayTypeS3Id",
                async: false,
                type: "POST",
                dataType: 'json',
                //data: '{source:"' + encodedSource + '",question_id:"' + currentQuestionID + '"}',
                data: JSON.stringify(request),
                contentType: 'application/json;charset=utf-8',
                timeout: 30000,
                tryCount: 0,
                retryLimit: 3,
                success: function (response) {
                    var SphereEngineS3Id = JSON.parse(response);
                    CurrentS3Id = SphereEngineS3Id.s3_id;
                    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ s3_id: CurrentS3Id });
                    ProcessSpojLog();
                }

            });
        }
    } catch (e) {
        PostJavascriptError("ProcessEssayS3Id", "Error in ProcessEssayS3Id:" + e.message + ":" + "Testpin:" + _logDetails);
    }

}


function ProcessSpojSubmissionResultLog() {
    try {
        var Resultdata = JSON.stringify(_resultset);

        var _testPin = _testPinDB().first().TestPin;
        var _companyID = _testPinDB().first().company_id;
        var _assignID = _testPinDB().first().assign_id;
        var _attempID = _testPinDB().first().attempt_id;
        var _candidate_id = _testPinDB().first().candidate_id;
        var _sectionID = currentSectionID;
        var _question_id = currentQuestionID;
        var _exam_answer = escape(Resultdata);
        var _login_audit_id = _testPinDB().first().login_audit_id;
        var _question_palette_enum_id = QuestionPalleteEnum.Answered;
        var _last_elapsedTime = $("#future_date").text();
        var _s3_id;
        var _compilerId;
        var _compilerName = CurrentCompilerName;
        var isNavigation = 0;
        var isSelected = 1;

        var answerSetData = _assessmentAnswerDB({ question_id: _question_id }).first();
        var datalang = answerSetData.listlanguage;
        for (var i = 0; i < answerSetData.listlanguage.length; i++) {
            if (answerSetData.listlanguage[i].compiler_Name == _compilerName) {
                _compilerId = answerSetData.listlanguage[i].compiler_Id;
                _s3_id = answerSetData.listlanguage[i].s3_id;
                datalang[i].IsSelected = 1;

            }
            else {
                datalang[i].IsSelected = 0;
            }
        }

        _assessmentAnswerDB({ question_id: currentQuestionID }).update({ listlanguage: datalang });
        var requestData = {
            //Token: _token,
            TestPin: _testPin, CompanyID: _companyID,
            AssignID: _assignID, AttemptID: _attempID, SectionID: _sectionID, QuestionID: _question_id,
            ExamAnswer: _exam_answer, LoginAuditID: _login_audit_id, QuestionPaletteEnumID: _question_palette_enum_id,
            LastElapsedTime: _last_elapsedTime, CandidateID: _candidate_id, s3_id: _s3_id,
            CompilerId: _compilerId, CompilerName: _compilerName, IsSelected: isSelected,
            IsNavigation: isNavigation
        };

        $.ajax({
            url: "/EventLog/PostSpojResultLog",
            type: "POST",
            dataType: 'json',
            //data: '{Token:"' + _token + '",TestPin : "' + _testPin + '", CompanyID: "' + _companyID + '" ,AssignID : "' + _assignID + '",AttemptID:"' + _attempID + '",SectionID:"' + _sectionID + '",QuestionID:"' + _question_id + '" , ExamAnswer:"' + _exam_answer + '" , LoginAuditID : "' + _login_audit_id + '", QuestionPaletteEnumID : "' + _question_palette_enum_id + '",LastElapsedTime:"' + _last_elapsedTime + '",CandidateID:"' + _candidate_id + '",s3_id:"' + _s3_id + '",CompilerId:"' + _compilerId + '",CompilerName:"' + _compilerName + '",IsSelected:"' + isSelected + '",IsNavigation:"' + isNavigation + '"}',
            data: JSON.stringify(requestData),
            contentType: 'application/json;charset=utf-8',
            timeout: 30000,
            tryCount: 0,
            retryLimit: 3,
            success: function (response) {

            }
        });

    } catch (e) {
        PostJavascriptError("ProcessSpojSubmissionResultLog", "Error in ProcessSpojSubmissionResultLog:" + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function PostSphereEngineCompileResult() {

    $("#divProgrammingRunCode").html('');
    $("#testcase").empty();
    $("#codeResult").removeClass("error-badge").empty();
    var problemId = "#problem-tab";
    showCodingTabcontrol(problemId);

    $("#divloading").show();
    FreezeTimer();
    if (editor.getValue() == '' || (editor.getValue() == null) || (editor.getValue() == undefined)) {
        $("#divloading").hide();
        swal.fire({
            title: '<span></span>',
            text: "Please enter code, then only u can able to run the code.",
            imageUrl: '/Images/Pro/warning.svg',
            imageWidth: 80,
            imageHeight: 80,
            type: 'waring',
            confirmButtonText: "Ok",
            allowOutsideClick: false
        }).then((result) => {
            if (result.value) {
                $("#pauseBtnhms").val("Start");
                $("#pauseBtnhms").click();
                return false;
            }
        });
        return false;
    }


    var answerSetData = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
    for (var i = 0; i < answerSetData.listlanguage.length; i++) {
        if (answerSetData.listlanguage[i].compiler_Name == CurrentCompilerName) {
            CurrentCompilerId = answerSetData.listlanguage[i].compiler_Id;
        }
    }

    var SphereEngineToken = "";
    var _compilerName = CurrentCompilerName;
    var _problemId = CurrentProblemId;
    var _problemCode = CurrentProblemCode;
    var _compilerId = CurrentCompilerId;
    var _Source = editor.getValue();
    var _input = $('#text').val();

    var _accessToken;
    var _question_id = currentQuestionID;
    var encodedSource = escape(_Source);



    var fd = new FormData();
    fd.append("compiler_Name", _compilerName);
    fd.append("problem_Id", _problemId);
    fd.append("problem_Code", _problemCode);
    fd.append("compiler_Id", _compilerId);
    fd.append("access_token", _accessToken);
    fd.append("question_id", _question_id);
    fd.append("strsource", encodedSource);
    fd.append("input", _input);

    if (currentQuestionType == Number(QuestionTypeEnum.Code_Simulation)) {
        try {

            $.ajax({
                url: "/Assessment/GetSphereEngineCompileTokenAsync",
                enctype: 'text/plain',
                type: "POST",
                data: fd,
                processData: false,
                contentType: false,
                cache: false,
                timeout: 60000,
                tryCount: 0,
                retryLimit: 10,
                success: function (response) {
                    $('#divProgrammingRunCode').empty();
                    SphereEngineToken = JSON.parse(response);
                    SubmissionId = SphereEngineToken.submission_id;
                    //var QuestionId = SphereEngineToken.question_id;
                    //var _exam_ans = _Source;
                    _resultset = SphereEngineToken.ResultSet;
                    // var resultdata = "";
                    var resultstatus = "";
                    var bordercolor = "";

                    var res = _resultset.result.status.name.includes("error")
                    if (res == true) {
                        resultstatus = "<div id='statusDiv'><i class='fa fa-times-circle' aria-hidden='true' style='color: red;'></i>&nbsp; '" + _resultset.result.status.name + "'</div>";
                        bordercolor = "red";
                    }
                    else {
                        //resultstatus = "<i class='fa fa-check-circle' aria-hidden='true' style='color: green;'></i>&nbsp;" + _resultset.result.status.name;
                        resultstatus = "<div id='statusDiv'><i class='fa fa-check-circle' aria-hidden='true' style='color: green;'></i>&nbsp;'" + _resultset.result.status.name + "'</div>";
                        bordercolor = "green";
                    }

                    //FreezeTimer();                 
                    //var dataoutput = '<b style="color:' + bordercolor + '">' + resultstatus + '</b><br/><b>Compiler Message</b><br/><p style="color:' + bordercolor + '">' + _resultset.result.compilerinfo + '</p><br/><b>Output Status<b><br/><p style="background:#fff;border-bottom: 3px solid ' + bordercolor + '">' + _resultset.result.outputinfo + '</p>';


                    var dataoutput = '<div id=compilerMsgDiv><b style="color:' + bordercolor + '">' + resultstatus + '</b><br/><b>Compiler Message</b><br/><p style="color:' + bordercolor + '">' + _resultset.result.compilerinfo + '</p></div><br/><div id="errorDiv"><b><p style="color:black">Error Message</p></b><p style="color:red">' + _resultset.result.errorinfo + '<p/></div><br/><div id=outputDiv><b>Output Status</b><br/><p style="background:#fff;border-bottom: 3px solid ' + bordercolor + '">' + _resultset.result.outputinfo + '</p></div>';
                    $("#divProgrammingRunCode").empty();
                    $("#divProgrammingRunCode").append(dataoutput);


                    if (_resultset.result.errorinfo == '' || _resultset.result.errorinfo == null || _resultset.result.errorinfo == undefined) {
                        $('#errorDiv').hide();
                        $('#statusDiv').show();
                        $('#compilerMsgDiv').show();

                        if (_resultset.result.status.name.includes("error")) {
                            $('#outputDiv').hide();
                        }
                        else {
                            $('#outputDiv').show();
                        }
                    }
                    else {
                        $('#errorDiv').show();
                        $('#statusDiv').show();
                        $('#compilerMsgDiv').show();
                        $('#outputDiv').hide();
                        if (_resultset.result.compilerinfo.includes("Compiled Successfully")) {
                            $('#statusDiv').hide();
                            $('#compilerMsgDiv').hide();
                        }
                        else {
                            $('#statusDiv').show();
                            $('#compilerMsgDiv').show();
                        }
                    }

                    $("#divloading").hide();
                    $("#text").val('');
                    UnfreezeTimer();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    this.tryCount++;
                    $("#divloading").hide();
                    if (this.tryCount <= this.retryLimit) {
                        $.ajax(this);
                        return;
                    }

                    UnfreezeTimer();
                    var data = "PostSphereEngineCompileResult - PostSphereEngineCompileResult Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                    PostJavascriptError("PostSphereEngineCompileResult", data);
                    return;
                }
            });
        } catch (e) {
            PostJavascriptError("PostSphereEngineCompileResult-Catch", "Error in PostSphereEngineCompileResult:" + e.message + ":" + "Testpin:" + _logDetails);
        }
    }


}

function CancelSphereEngineQuestion() {
    try {

        swal.fire({
            title: '<span></span>',
            text: "Are you sure you want to cancel this question?",
            imageUrl: '/Images/Pro/warning.svg',
            imageWidth: 80,
            imageHeight: 80,
            type: 'waring',
            showCancelButton: false,
            confirmButtonText: "Yes",
            allowOutsideClick: false
        }).then((result) => {
            if (result.value) {
                EnableButtons();
                HandleTimerButton();
            }
            else {
            }
        });

    } catch (e) {
        var data = "Assessment -CancelSphereEngineQuestion:" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("CancelSphereEngineQuestion", data);
    }
}

function CheckboxSphereEngineInput() {
    try {

        var checkBox = document.getElementById("chkSphereEngineInput");
        var text = document.getElementById("text");
        if (checkBox.checked == true) {
            text.style.display = "block";
        } else {
            text.style.display = "none";
        }


    } catch (e) {
        var data = "Assessment-CheckboxSphereEngineInput :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("CheckboxSphereEngineInput", data);
    }
}

$("#btnTypeEndTest").click(function () {
    try {
        if ($("#btnTypeEndTest").val() != '' && $("#txtTypingTest").val() != '') {

            _sectionDetailsDB({ section_id: Number(currentSectionID) }).update({ Last_ElapsedTimeInHours: '00:00:00' });
        }
        else {
            // swal("Please Enter Your Value");
        }
        if (typingTestResolve != null) {
            typingTestResolve("done");
        }

    } catch (e) {
        var data = "Assessment-btnTypeEndTest Click :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("btnTypeEndTest Click", data);
    }
});

$("#btnTypeCancelTest").click(function () {
    try {

        swal.fire({
            title: '<span></span>',
            text: "Are you sure you want to cancel this question?",
            imageUrl: '/Images/Pro/warning.svg',
            imageWidth: 80,
            imageHeight: 80,
            type: 'waring',
            showCancelButton: false,
            confirmButtonText: "Yes",
            allowOutsideClick: false
        }).then((result) => {
            if (result.value) {
                HandleTimerButton();
            }
            else {
            }
        });


    } catch (e) {
        var data = "Assessment-btnTypeCancelTest :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("btnTypeCancelTest", data);
    }
});

$("#btnMarkForReview").click(function () {
    // FreezeTimer();
    UnfreezeTimer();
    SubjectiveFileMandatory();
    if (isSubjectiveMandatory != true) {
        try {
            swal.fire({
                title: 'Confirm Question for Review',
                text: 'Are you sure you want to mark this Question for Review',
                imageUrl: '/Images/Pro/warning.svg',
                imageWidth: 80,
                imageHeight: 80,
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: "Cancel",
                allowOutsideClick: false
            }).then((result) => {
                if (result.value) {
                    MCQAnswerupdate();
                    UnfreezeTimer();
                    typingpromiseResult = null;
                    if (isDoubleClicked($(this))) return;
                    typingpromiseResult = new Promise(function (resolve, reject) {
                        InvokeTypingTest(resolve);
                    });

                    typingpromiseResult.then(result => BindMarkforReviewNavigation());
                }
                else {
                    UnfreezeTimer();
                }
                //UnfreezeTimer();
            })


        } catch (e) {
            var data = "Assessment- mark for review Click :" + e.message + ":" + "Testpin:" + _logDetails;
            PostJavascriptError("Mark for review Click", data);
        }
    }
    else {
        return false;
    }

});
function BindMarkforReviewNavigation() {
    try {
        if (currentClickMode == ClickEvent.TimerElapsed) {
            lastSectionElapsedTime = "00:00:00";
        }
        else {
            lastSectionElapsedTime = $("#future_date").text();
        }
        _question_palette_enum_id = QuestionPalleteEnum.MarkForReview;
        _questionSetDB({ id: currentQuestionID }).update({ Question_Palette_Enum_Id: _question_palette_enum_id });
        //var ques = _questionSetDB({ id: currentQuestionID }).first();
        isNavigation = 1;

        ProcessEventLog(ClickEvent.MarkForReview);
        isTimer = false;
        typingpromiseResult = null;
    } catch (e) {
        var data = "Assessment-BindMarkforReviewNavigation :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("BindMarkforReviewNavigation", data);
    }

}

$("#btnNext").click(function () {
    try {
        MCQAnswerupdate();
        typingpromiseResult = null;
        $("#pauseBtnhms").val("Start");
        $("#pauseBtnhms").click();
        if (isDoubleClicked($(this))) return;
        if ($.trim($("#btnNext").text()).includes('Submit')) {
            isSubmitCapture = true;
        }
        else {
            isSubmitCapture = false;
        }
        typingpromiseResult = new Promise(function (resolve, reject) {
            InvokeTypingTest(resolve);
        });

        typingpromiseResult.then(result => BindNextNavigation());



    } catch (e) {
        var data = "Assessment- Next Click :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("Next Click", data);
    }
});

function InvokeTypingTest(resolve) {
    try {
        typingTestResolve = resolve;
        if (QuestionTypeEnum.TypingTest == currentQuestionType) {

            $("#btnTypeEndTest").click();
        }
        else {
            if (typingTestResolve != null) {
                typingTestResolve("done");
            }
        }
    } catch (e) {
        var data = "Assessment- InvokeTypingTest :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("InvokeTypingTest", data);
    }

}

function BindNextNavigation() {
    try {
        if ($.trim($("#btnNext").text()) == 'Next') {
            if (currentClickMode == ClickEvent.TimerElapsed) {
                lastSectionElapsedTime = "00:00:00";
            }
            else {
                lastSectionElapsedTime = $("#future_date").text();
            }
            isNavigation = 1;
            ProcessEventLog(ClickEvent.Next);
            isTimer = false;
            typingpromiseResult = null;
        }
        else {
            if (currentClickMode == ClickEvent.TimerElapsed) {
                lastSectionElapsedTime = "00:00:00";
            }
            else {
                lastSectionElapsedTime = $("#future_date").text();
            }
            $("#divloading").show();
            SubjectiveFileMandatory()
            var is_PshycometricMandatory = validatePsychometericQuestionSelectionOnProcessEventLog();
            if (isSubjectiveMandatory != true && is_PshycometricMandatory != false) {
                $("#btnEndtest").click();
            }
            else {
                return false;
            }

        }
    } catch (e) {
        var data = "Assessment- BindNextNavigation :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("BindNextNavigation", data);
    }

}

$("#btnPrevious").on('click', function () {
    try {
        $("#pauseBtnhms").val("Start");
        $("#pauseBtnhms").click();
        MCQAnswerupdate();
        typingpromiseResult = null;
        if (isDoubleClicked($(this))) return;
        typingpromiseResult = new Promise(function (resolve, reject) {
            InvokeTypingTest(resolve);
        });

        typingpromiseResult.then(result => BindPreviousNavigation());

    }
    catch (e) {
        var data = "Assessment- Previous Click :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("Previous Click", data);
    }
});

function BindPreviousNavigation() {
    try {
        if (currentClickMode == ClickEvent.TimerElapsed) {
            lastSectionElapsedTime = "00:00:00";
        }
        else {
            lastSectionElapsedTime = $("#future_date").text();
        }
        isNavigation = 1;

        ProcessEventLog(ClickEvent.Previous);
        isTimer = false;
        typingpromiseResult = null;
    } catch (e) {
        var data = "Assessment- BindPreviousNavigation :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("BindPreviousNavigation", data);
    }

}

$("#btnInstruction").click(function () {
    try {
        if (isDoubleClicked($(this))) return;
        //FreezeTimer();
        BindInstructions();
    }
    catch (e) {
        var data = "Assessment- Instruction Click :" + e.message + ":" + "Testpin:" + _logDetails;
        PostJavascriptError("Instruction Click", data);
    }
});

$("#btnModelClose,#btnOkModelCloase").on('click', function () {
    UnfreezeTimer();
});

function BindInstructions() {
    try {
        $("#lblInstruction").html(_sectionDetailsDB({ section_id: Number(currentSectionID) }).first().section_content);
        $("#lblInstructionName").html(_sectionDetailsDB({ section_id: Number(currentSectionID) }).first().section_name);
    } catch (e) {
        throw e;
        PostJavascriptError("BindInstructions", "Assessment - Bind Instruction Click:" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

//Note : Linkert Pattern: QuestionId~SubQuestionId~ExamAnswer^ QuestionId~SubQuestionId~ExamAnswer
//Note : Pscycometric Pattern : QuestionId~SubQuestionId~ExamAnswer

function ProcessEventLog(clickMode, resolve = null) {
    try {

        //FreezeTimer();
        $("#divloading").show();
        MeasureConnectionSpeed();
        $("#divQuestionPallete").attr('disabled', true);
        $("#videoRecorder").hide();
        $("#videoRecorderButtons").hide();
        isResumeTypeTest = true;
        isTypingTimerElapsed = false;

        //var _token = _testPinDB().first().Token;
        var _testPin = _testPinDB().first().TestPin;
        var _companyID = _testPinDB().first().company_id;
        var _assignID = _testPinDB().first().assign_id;
        var _attempID = _testPinDB().first().attempt_id;
        var _candidate_id = _testPinDB().first().candidate_id;
        var _sectionID = previousSectionId;
        var _question_id = previousQuestionId;
        var _exam_answer = '';
        var _login_audit_id = _testPinDB().first().login_audit_id;
        var _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
        var _last_elapsedTime;
        var isParargraphOption = true;
        var _s3_id = '';
        var psychometeric_sub_question_type = "";
        var subjectiveS3ID = "";
        var subjectiveFileDetails = "";
        var essay_id = "";
        var _essaytypeanswer = "";
        var isSubjectiveUpload = false;


        if (previousQuestionId == 0 || previousQuestionId == null || previousQuestionId == "") {
            previousQuestionId = currentQuestionID;
            _question_id = currentQuestionID;
        }
        if (previousQuestionType == "" || previousQuestionType == null) {
            previousQuestionType = currentQuestionType;
        }

        if (previousSno != 0) {
            currentSNo = previousSno;
        }
        //if (previousQuestionType == QuestionTypeEnum.Code_Simulation) {
        //    ProcessSpojS3Id();
        //}
        switch (durationType) {

            case DurationTypeEnum.ExamWise:
            case DurationTypeEnum.SectionWise:
                if (lastSectionElapsedTime == '' || lastSectionElapsedTime == null || lastSectionElapsedTime == undefined) {

                    if (clickMode == ClickEvent.TimerElapsed) {
                        _last_elapsedTime = "00:00:00";
                    }
                    else {
                        _last_elapsedTime = $("#future_date").text();
                    }
                }
                else {
                    if (clickMode == ClickEvent.TimerElapsed) {
                        _last_elapsedTime = "00:00:00";
                    }
                    else {
                        _last_elapsedTime = lastSectionElapsedTime;
                    }
                }
                break;
        }
        if (Number(durationType) == Number(DurationTypeEnum.ExamWise)) {
            if (clickMode != ClickEvent.TimerElapsed) {
                $("#pauseBtnhms").val("Start");
                $("#pauseBtnhms").click();
            }
            else {
                FreezeTimer();
            }
        }
        else {
            FreezeTimer();
        }

        switch (previousQuestionType) {
            case QuestionTypeEnum.SituationReaction:
            case QuestionTypeEnum.MCQ:
            case QuestionTypeEnum.MCQWeightages:
                if (!isSection) {
                    MCQAnswerupdate();
                }
                var answer = _assessmentAnswerDB({ question_id: previousQuestionId }).first();
                _exam_answer = answer.exam_answer;

                var paletteID = _questionSetDB({ id: previousQuestionId }).first();
                _question_palette_enum_id = paletteID.Question_Palette_Enum_Id;
                if (_question_palette_enum_id == 1) {
                    if (_exam_answer != null && _exam_answer != '' && _exam_answer != 'undefined' && _exam_answer != 0) {
                        _question_palette_enum_id = QuestionPalleteEnum.Answered;
                    }
                    else {
                        _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                    }
                }
                else if (_question_palette_enum_id == 3) {
                    _question_palette_enum_id = QuestionPalleteEnum.MarkForReview;
                }
                else {
                    _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                }
                if (clickMode == "Next" || clickMode == "Previous") {
                    if (_exam_answer != null && _exam_answer != '' && _exam_answer != 'undefined' && _exam_answer != 0) {
                        _question_palette_enum_id = QuestionPalleteEnum.Answered;
                    }
                    else {
                        _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                    }
                }

                break;

            case QuestionTypeEnum.LinkertType:
                break;

            case QuestionTypeEnum.Psychometric:

                var ques = _questionSetDB({ id: previousQuestionId }).first();
                let psychometericSubQusType = ques.psychometeric_sub_question_type_id;
                psychometeric_sub_question_type = psychometericSubQusType;
                switch (psychometericSubQusType) {
                    case PsychometericSubQuestionTypeEnum.RatingScale:
                        var answer = _assessmentAnswerDB({ question_id: previousQuestionId }).first();

                        _exam_answer = answer.exam_answer;
                        var paletteID = _questionSetDB({ id: previousQuestionId }).first();
                        _question_palette_enum_id = paletteID.Question_Palette_Enum_Id;

                        if (_question_palette_enum_id == 1) {
                            _question_palette_enum_id = QuestionPalleteEnum.Answered;
                        }
                        else if (_question_palette_enum_id == 3) {
                            _question_palette_enum_id = QuestionPalleteEnum.MarkForReview;
                        }
                        else {
                            _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                        }
                        if (clickMode == "Next" || clickMode == "Previous") {
                            if (_exam_answer != null && _exam_answer != '' && _exam_answer != 'undefined' && _exam_answer != 0) {
                                _question_palette_enum_id = QuestionPalleteEnum.Answered;
                            }
                            else {
                                _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                            }
                        }
                        break;

                    case PsychometericSubQuestionTypeEnum.ForcedChoice:
                        var subQID = 0;
                        var optionID = 0;
                        var res = [];
                        var answer = _assessmentAnswerDB({ question_id: previousQuestionId }).get();
                        var countForceAnwser = 0;
                        if (answer.length > 0) {
                            for (var i = 0; i < answer.length; i++) {
                                subQID = answer[i].sub_question_id;
                                optionID = answer[i].exam_answer;
                                // _last_elapsedTime = $("#future_date").text();
                                if (optionID == 0) {
                                    countForceAnwser = countForceAnwser + 1;
                                }
                                if ((subQID != 0 && optionID == 0) || (subQID == 0 && optionID != 0)) {
                                    isParargraphOption = false;
                                    /*Note : If Timer Elapsed we need to send exam answer to server in order to transverse to other Section*/
                                    if (_last_elapsedTime == '00:00:00') {

                                        res[i] = currentQuestionID + '~' + subQID + '~' + optionID;
                                    }
                                    else {


                                        res[i] = currentQuestionID + '~' + subQID + '~' + optionID;

                                    }
                                }
                                else {

                                    res[i] = currentQuestionID + '~' + subQID + '~' + optionID;
                                }
                                subQID = 0;
                                optionID = 0;
                            }
                        }
                        _exam_answer = res

                        var paletteID = _questionSetDB({ id: previousQuestionId }).first();
                        _question_palette_enum_id = paletteID.Question_Palette_Enum_Id;


                        if (_question_palette_enum_id == 1) {
                            _question_palette_enum_id = QuestionPalleteEnum.Answered;
                        }
                        else if (_question_palette_enum_id == 3) {
                            _question_palette_enum_id = QuestionPalleteEnum.MarkForReview;
                        }
                        else {
                            _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                        }
                        if (clickMode == "Next" || clickMode == "Previous") {
                            if (_exam_answer != null && _exam_answer != '' && _exam_answer != 'undefined' && _exam_answer != 0) {
                                if (countForceAnwser < 3)
                                    _question_palette_enum_id = QuestionPalleteEnum.Answered;
                                else
                                    _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                            }
                            else {
                                _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                            }
                        }
                        break;

                    case PsychometericSubQuestionTypeEnum.AdjectivesType:
                        var subQID = 0;
                        var optionID = 0;
                        var res = [];
                        var countForceAnwser = 0;
                        var answer = _assessmentAnswerDB({ question_id: previousQuestionId }).get();
                        if (answer.length > 0) {
                            for (var i = 0; i < answer.length; i++) {
                                subQID = answer[i].sub_question_id;
                                optionID = answer[i].exam_answer;
                                // _last_elapsedTime = $("#future_date").text();
                                if (optionID == 0) {
                                    countForceAnwser = countForceAnwser + 1;
                                }
                                if ((subQID != 0 && optionID == 0) || (subQID == 0 && optionID != 0)) {
                                    isParargraphOption = false;
                                    /*Note : If Timer Elapsed we need to send exam answer to server in order to transverse to other Section*/
                                    if (_last_elapsedTime == '00:00:00') {
                                        if (optionID.includes(',')) {
                                            optionID = optionID.replace(/\,/g, '^');
                                        }

                                        res[i] = currentQuestionID + '~' + subQID + '~' + optionID;
                                    }
                                    else {
                                        if (optionID.includes(',')) {
                                            optionID = optionID.replace(/\,/g, '^');
                                        }

                                        res[i] = currentQuestionID + '~' + subQID + '~' + optionID;
                                    }
                                }
                                else {

                                    if (optionID.includes(',')) {
                                        optionID = optionID.replace(/\,/g, '^');
                                    }

                                    res[i] = currentQuestionID + '~' + subQID + '~' + optionID;
                                }
                                subQID = 0;
                                optionID = 0;
                            }
                        }

                        _exam_answer = res;
                        var paletteID = _questionSetDB({ id: previousQuestionId }).first();
                        _question_palette_enum_id = paletteID.Question_Palette_Enum_Id;

                        if (_question_palette_enum_id == 1) {
                            _question_palette_enum_id = QuestionPalleteEnum.Answered;
                        }
                        else if (_question_palette_enum_id == 3) {
                            _question_palette_enum_id = QuestionPalleteEnum.MarkForReview;
                        }
                        else {
                            _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                        }
                        if (clickMode == "Next" || clickMode == "Previous") {
                            if (_exam_answer != null && _exam_answer != '' && _exam_answer != 'undefined' && _exam_answer != 0) {
                                if (countForceAnwser < 2)
                                    _question_palette_enum_id = QuestionPalleteEnum.Answered;
                                else
                                    _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                            }
                            else {
                                _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                            }
                        }
                        break;

                    default:
                        break;
                }

                if (_last_elapsedTime != "00:00:00" && !validatePsychometericQuestionSelectionOnProcessEventLog()) {
                    return false;
                }

                break;

            case QuestionTypeEnum.Code_Simulation:
                if (SubmissionId == '' || SubmissionId == null || SubmissionId == undefined) {

                    SubmissionId = "0";
                    var textarea = editor.getValue();

                    //in text area it will contain the submission id want to remove that
                    var _exam_ans = textarea;
                    _assessmentAnswerDB({ question_id: previousQuestionId }).update({ exam_answer: _exam_ans });

                }
                var _Source = editor.getValue();

                //var _Source = $("#editor_" + previousQuestionId + "").text();       

                _assessmentAnswerDB({ question_id: previousQuestionId }).update({ exam_answer: _Source, IsSelectedCompiler: CurrentModeType });

                var answer = _assessmentAnswerDB({ question_id: previousQuestionId }).first();
                //_exam_answer = escape(answer.exam_answer);
                _exam_answer = answer.exam_answer;
                _s3_id = answer.s3_id;

                var paletteID = _questionSetDB({ id: previousQuestionId }).first();

                _question_palette_enum_id = paletteID.Question_Palette_Enum_Id;

                var data = _assessmentAnswerDB({ question_id: previousQuestionId }).first();
                SubmissionId = data.submission_id;


                if (_question_palette_enum_id == 3) {
                    _question_palette_enum_id = QuestionPalleteEnum.MarkForReview;
                }
                else if ((_question_palette_enum_id == QuestionPalleteEnum.Answered) || (SubmissionId != 0 && SubmissionId != null)) {

                    _question_palette_enum_id = QuestionPalleteEnum.Answered;
                }
                else {

                    _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                }


                if (clickMode == "Next" || clickMode == "Previous") {
                    if ((_question_palette_enum_id == QuestionPalleteEnum.Answered) || (SubmissionId != null && SubmissionId != '' && SubmissionId != 'undefined' && SubmissionId != 0)) {
                        _question_palette_enum_id = QuestionPalleteEnum.Answered;
                    }
                    else {
                        _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                    }
                }

                _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: _question_palette_enum_id })

                var answerSetData = _assessmentAnswerDB({ question_id: previousQuestionId }).first();
                var datalang = answerSetData.listlanguage;
                for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                    if (answerSetData.listlanguage[i].compiler_Name == CurrentCompilerName) {
                        _compilerId = answerSetData.listlanguage[i].compiler_Id;
                        if (_s3_id != null && _s3_id != undefined && _s3_id != '') {
                            datalang[i].s3_id = _s3_id;
                        }
                        datalang[i].IsSelected = 1;
                        datalang[i].exam_answer = _Source;
                    }
                    else {
                        datalang[i].IsSelected = 0;
                    }
                }
                _assessmentAnswerDB({ question_id: previousQuestionId }).update({ listlanguage: datalang });
                BindCorrectAnswer('');


                break;

            case QuestionTypeEnum.TypingTest:
                _exam_answer = document.getElementById('hdnTypeTestResult').value;
                var examAnswerObj = _assessmentAnswerDB({ question_id: previousQuestionId }).get();

                var splitStr = _exam_answer.split("~");
                var _WPM = splitStr[0].split(":")[1];
                var _CPM = splitStr[1].split(":")[1];
                var _Accuracy = splitStr[2].split(":")[1];
                var _NoOfMistake = splitStr[5].split(":")[1];

                if (_Accuracy == 'NaN' || _WPM == null || _CPM == null) {
                    _Accuracy = "0.00";
                    _CPM = "0";
                    _WPM = "0";
                    _NoOfMistake = "0";
                }

                if (_exam_answer != '') {
                    examAnswerObj[0].exam_answer.WPM = splitStr[0].split(":")[1];//WPM
                    examAnswerObj[0].exam_answer.CPM = splitStr[1].split(":")[1];//CPM
                    examAnswerObj[0].exam_answer.Accuracy = splitStr[2].split(":")[1];//Accuracy
                    examAnswerObj[0].exam_answer.QuestionId = splitStr[3].split(":")[1];//QuestionId
                    examAnswerObj[0].exam_answer.User_Answer = splitStr[4].split(":")[1];//User_Answer      
                    examAnswerObj[0].exam_answer.NoofMistakes = splitStr[5].split(":")[1];//NoofMistakes                 
                }
                else {
                    examAnswerObj[0].exam_answer.WPM = "0";//WPM
                    examAnswerObj[0].exam_answer.CPM = "0";//CPM
                    examAnswerObj[0].exam_answer.Accuracy = "0";//Accuracy
                    examAnswerObj[0].exam_answer.QuestionId = String(previousQuestionId);//QuestionId
                    examAnswerObj[0].exam_answer.User_Answer = '';//User_Answer
                    examAnswerObj[0].exam_answer.NoofMistakes = '';//NoofMistakes

                    _exam_answer = '';
                }
                var paletteID = _questionSetDB({ id: previousQuestionId }).first();
                _question_palette_enum_id = paletteID.Question_Palette_Enum_Id;

                if (_exam_answer != '' && _exam_answer != null && _exam_answer != undefined && _exam_answer != 0) {
                    _question_palette_enum_id = QuestionPalleteEnum.Answered;
                }

                else {
                    _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                }
                if (clickMode == "Next" || clickMode == "Previous") {
                    if (_exam_answer != null && _exam_answer != '' && _exam_answer != 'undefined' && _exam_answer != 0) {
                        _question_palette_enum_id = QuestionPalleteEnum.Answered;
                    }
                    else {
                        _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                    }
                }
                isTypingTimerElapsed = true;
                _last_elapsedTime = '00:00:00';
                $("#btnNext").attr('disabled', false);
                $("#btnPrevious").attr('disabled', false);
                $("#btnMarkForReview").attr('disabled', false);
                if (Number(_testPinDB().first().is_Scientific_calc) == 1) {
                    $("#button_calc").show();
                    $("#button_calc").attr('disabled', false);
                }
                else {
                    $("#button_calc").hide();
                }

                break;

            case QuestionTypeEnum.Paragraph:
                var subQID = 0;
                var optionID = 0;
                var res = [];
                var answer = _assessmentAnswerDB({ question_id: previousQuestionId }).get();
                if (answer.length > 0) {
                    for (var i = 0; i < answer.length; i++) {
                        subQID = answer[i].sub_question_id;
                        optionID = answer[i].exam_answer;
                        // _last_elapsedTime = $("#future_date").text();
                        if ((subQID != 0 && optionID == 0) || (subQID == 0 && optionID != 0)) {
                            isParargraphOption = false;
                            /*Note : If Timer Elapsed we need to send exam answer to server in order to transverse to other Section*/
                            if (_last_elapsedTime == '00:00:00') {
                                res[i] = currentQuestionID + '~' + subQID + '~' + optionID;
                            }
                        }
                        else {
                            res[i] = currentQuestionID + '~' + subQID + '~' + optionID;
                        }
                        subQID = 0;
                        optionID = 0;
                    }
                }
                _exam_answer = res;
                if (isParargraphOption == false && _last_elapsedTime != '00:00:00') {
                    $("#divloading").hide();

                }

                var paletteID = _questionSetDB({ id: previousQuestionId }).first();
                _question_palette_enum_id = paletteID.Question_Palette_Enum_Id;

                if (_question_palette_enum_id == 1) {
                    _question_palette_enum_id = QuestionPalleteEnum.Answered;
                }
                else if (_question_palette_enum_id == 3) {
                    _question_palette_enum_id = QuestionPalleteEnum.MarkForReview;
                }
                else {
                    _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                }
                if (clickMode == "Next" || clickMode == "Previous") {
                    if (_exam_answer != null && _exam_answer != '' && _exam_answer != 'undefined' && _exam_answer != 0) {
                        _question_palette_enum_id = QuestionPalleteEnum.Answered;
                    }
                    else {
                        _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                    }
                }

                break;

            case QuestionTypeEnum.SubjectiveType:
                var listS3ID = _assessmentAnswerDB({ question_id: previousQuestionId }).first();
                for (var i = 0; i < listS3ID.listSubjectiveS3.length; i++) {
                    data = listS3ID.listSubjectiveS3[i].S3_Id;
                    var filename = listS3ID.listSubjectiveS3[i].Bucket_Id;
                    subjectiveS3ID += "," + data;
                    subjectiveFileDetails += "," + filename;
                }

                subjectiveS3ID = subjectiveS3ID.replace(',', '');
                subjectiveFileDetails = subjectiveFileDetails.replace(',', '');

                var questionData = _questionSetDB({ id: previousQuestionId }).first();
                var isSubFilesMandatory = questionData.is_subjectivefiles_mandatory;

                if (clickMode != ClickEvent.TimerElapsed && clickMode != "Endtest") {
                    $("#pauseBtnhms").val("Start");
                    HandleTimerButton();
                    if ((subjectiveS3ID == "" || subjectiveS3ID == null || subjectiveS3ID == undefined) && isSubFilesMandatory == true) {
                        isSubjectiveUpload = true;
                        $('#btnEndtest').removeAttr('data-target');
                        swal.fire({
                            title: '',
                            text: "Please upload the file.",
                            imageUrl: '/Images/Pro/warning.svg',
                            imageWidth: 80,
                            imageHeight: 80,
                            showCancelButton: false,
                            confirmButtonText: "OK",
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.value) {
                                $("#divloading").hide();
                            }
                        });
                        return false;
                    }
                    else {
                        isSubjectiveUpload = false;
                    }
                }
                else {
                    isSubjectiveUpload = false;
                }

                if (isSubjectiveUpload != true) {
                    var answer = _assessmentAnswerDB({ question_id: previousQuestionId }).first();
                    _exam_answer = answer.exam_answer;
                    if (clickMode != "MarkForReview") {
                        if ((_exam_answer != null && _exam_answer != '' && _exam_answer != 'undefined' && _exam_answer != 0) || (subjectiveS3ID != '' && subjectiveS3ID != null && subjectiveS3ID != 'undefined')) {
                            _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: QuestionPalleteEnum.Answered });
                        }
                        else {
                            _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: QuestionPalleteEnum.NotAnswered });
                        }
                    }

                    if (_exam_answer != null && _exam_answer != "" && _exam_answer != 'undefined') { _exam_answer = escape(_exam_answer); }
                    var paletteID = _questionSetDB({ id: previousQuestionId }).first();
                    _question_palette_enum_id = paletteID.Question_Palette_Enum_Id;

                    if (_question_palette_enum_id == 1) {
                        _question_palette_enum_id = QuestionPalleteEnum.Answered;
                    }
                    else if (_question_palette_enum_id == 3) {
                        _question_palette_enum_id = QuestionPalleteEnum.MarkForReview;
                    }
                    else {
                        _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                    }
                    if (clickMode == "Next" || clickMode == "Previous") {
                        if ((_exam_answer != null && _exam_answer != '' && _exam_answer != 'undefined' && _exam_answer != 0) || (subjectiveS3ID != '' && subjectiveS3ID != null && subjectiveS3ID != 'undefined')) {
                            _question_palette_enum_id = QuestionPalleteEnum.Answered;
                        }
                        else {
                            _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                        }
                    }

                }
                else {
                    return false;
                }
                break;
            case QuestionTypeEnum.EssayType:
                _essaytypeanswer = $("#txtEssayType").val().trim();
                var questionData = _questionSetDB({ id: previousQuestionId }).first();
                essay_id = questionData.essay_id;
                if (_essaytypeanswer != null && _essaytypeanswer != '' && _essaytypeanswer != undefined && _essaytypeanswer != "%20") {
                    ProcessEssayS3Id();
                    var answerdata = _assessmentAnswerDB({ question_id: previousQuestionId }).first();
                    _s3_id = answerdata.s3_id;
                    _exam_answer = _s3_id;
                }

                _essaytypeanswer = escape(_essaytypeanswer);

                if (_exam_answer != null && _exam_answer != "" && _exam_answer != 'undefined') {
                    //_exam_answer = escape(_exam_answer);
                    _exam_answer = _exam_answer;
                    _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: QuestionPalleteEnum.Answered });
                }
                else {
                    _exam_answer = "";
                    _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: QuestionPalleteEnum.NotAnswered });
                }


                _question_palette_enum_id = questionData.Question_Palette_Enum_Id;

                if (_question_palette_enum_id == 1) {
                    _question_palette_enum_id = QuestionPalleteEnum.Answered;
                }
                else if (_question_palette_enum_id == 3) {
                    _question_palette_enum_id = QuestionPalleteEnum.MarkForReview;
                }
                else {
                    _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                }
                if (clickMode == "Next" || clickMode == "Previous") {
                    if (_exam_answer != null && _exam_answer != '' && _exam_answer != 'undefined' && _exam_answer != 0) {
                        _question_palette_enum_id = QuestionPalleteEnum.Answered;
                    }
                    else {
                        _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
                    }
                }
                break;

        }

        //For Load QuestionPalette
        if (AutomaticInvokeFlag == true) {
            AutomaticInvokeFlag = false;

        }

        //by default section button will be invoked and thus will be process will server.so default dont mark question pallete as not answered.
        //Change to not viewed.If no Answer available in that mode.
        switch (clickMode) {
            case ClickEvent.Next:
                break;
            case ClickEvent.Previous:
                break;
            case ClickEvent.QuestionPallete:
                break;
            case ClickEvent.MarkForReview:
                break;
            //case ClickEvent.SectionInvoke:
            //    break;
            default:
                _question_palette_enum_id = _question_palette_enum_id;
                break;
        }

        if (previousSno == 1 && _exam_answer == null) {
            _question_palette_enum_id = QuestionPalleteEnum.NotAnswered;
        }


        //adding two parameters navigationmode, timespent
        let navigationMode = clickMode;
        if (isSection) {
            if (clickMode == "")
                navigationMode = 'SectionInvoke';
            else
                navigationMode = clickMode;

            if (ispresection) {
                var setime = _sectionDetailsDB({ section_id: Number(previousSectionId) }).first();
                previouseQuesEndTime = setime.Last_ElapsedTimeInHours;
            }
            else {
                if (sectionStartTime != "00:00:00")
                    previouseQuesEndTime = sectionStartTime;
            }
        }
        else if (isSubmitCapture) {
            navigationMode = "Submit";
            isSubmitCaptureCancel = true;
        }
        else if (isEndtestCapture)
            navigationMode = "Endtest";
        else
            navigationMode = clickMode;

        if (!isSection) {
            if (ispresection) {
                if (sectionStartTime != "00:00:00")
                    previouseQuesEndTime = sectionfirsttime;
            }
        }

        let startTimeSeconds = timeToSeconds(previouseQuesEndTime);
        let endTimeSeconds = timeToSeconds(isEndtestCapture ? $("#future_date").text() : _last_elapsedTime);
        let logLastElapsedTime = isEndtestCapture ? $("#future_date").text() : _last_elapsedTime;

        //var curQuestimespend = startTimeSeconds - endTimeSeconds;
        var curQuestimespend;
        if (startTimeSeconds > endTimeSeconds) {
            curQuestimespend = startTimeSeconds - endTimeSeconds;
        }
        else if (endTimeSeconds > startTimeSeconds) {
            curQuestimespend = endTimeSeconds - startTimeSeconds;
        }
        else {
            curQuestimespend = startTimeSeconds - endTimeSeconds;
        }

        var isSubmitEndTest = false;
        if (isSubmitCapture) {
            isSubmitEndTest = true;
        }
        else if (isEndtestCapture) {
            isSubmitEndTest = true;

            if (clickMode == null) {
                curQuestimespend = 0;
            }
        }
        if (navigationMode == "Endtestcancel" || navigationMode == "Submitcancel" || allSecElapsed == true) {
            curQuestimespend = 0;
            isSubmitCaptureCancel = false;
        }

        //if (allSecElapsed == true) {
        //    curQuestimespend = 0;
        //}

        isSection = false;
        isSubmitCapture = false;
        isEndtestCapture = false;

        var requestData = {
            TestPin: _testPin, CompanyID: _companyID, AssignID: _assignID, AttemptID: _attempID,
            SectionID: _sectionID, QuestionID: _question_id, ExamAnswer: escape(unescape(_exam_answer)), LoginAuditID: _login_audit_id,
            QuestionPaletteEnumID: _question_palette_enum_id, LastElapsedTime: logLastElapsedTime,
            ResumePonit: resumePoint, CandidateID: _candidate_id, question_type: previousQuestionType,
            s3_id: _s3_id, IsNavigation: isNavigation, compiler_id: CurrentCompilerId, navigationtype: navigationMode,
            timespend: curQuestimespend, psychometeric_sub_question_type_id: psychometeric_sub_question_type,
            subjective_uploadfiles: subjectiveS3ID, Bucket_Id: subjectiveFileDetails, EssayID: essay_id, Enterthetext: _essaytypeanswer,
            CurrentInternetSpeed: currentInternetSpeed
        };
        $.ajax({
            url: "/EventLog/PostEventLog",
            type: "POST",
            dataType: 'json',
            //data: '{Token:"' + _token + '",TestPin : "' + _testPin + '", CompanyID: "' + _companyID + '" ,AssignID : "' + _assignID + '",AttemptID:"' + _attempID + '",SectionID:"' + _sectionID + '",QuestionID:"' + _question_id + '" , ExamAnswer:"' + _exam_answer + '" , LoginAuditID : "' + _login_audit_id + '", QuestionPaletteEnumID : "' + _question_palette_enum_id + '",LastElapsedTime:"' + _last_elapsedTime + '",ResumePonit:"' + resumePoint + '",CandidateID:"' + _candidate_id + '",question_type:"' + previousQuestionType + '",s3_id:"' + _s3_id + '",IsNavigation:"' + isNavigation + '",compiler_id:"' + CurrentCompilerId + '",navigationtype:"' + navigationMode + '",timespend:"' + curQuestimespend + '"}',

            //for purpose while click on endtest LastElapsedTime is mismatched so will changed _last_elapsedTime to logLastElapsedTime
            //data: '{Token:"' + _token + '",TestPin : "' + _testPin + '", CompanyID: "' + _companyID + '" ,AssignID : "' + _assignID + '",AttemptID:"' + _attempID + '",SectionID:"' + _sectionID + '",QuestionID:"' + _question_id + '" , ExamAnswer:"' + _exam_answer + '" , LoginAuditID : "' + _login_audit_id + '", QuestionPaletteEnumID : "' + _question_palette_enum_id + '",LastElapsedTime:"' + logLastElapsedTime + '",ResumePonit:"' + resumePoint + '",CandidateID:"' + _candidate_id + '",question_type:"' + previousQuestionType + '",s3_id:"' + _s3_id + '",IsNavigation:"' + isNavigation + '",compiler_id:"' + CurrentCompilerId + '",navigationtype:"' + navigationMode + '",timespend:"' + curQuestimespend + '",psychometeric_sub_question_type_id:"' + psychometeric_sub_question_type + '",subjective_uploadfiles:"' + subjectiveS3ID + '",Bucket_Id:"' + subjectiveFileDetails + '",Requester:"' + requester + '",SecretKey:"' + secretKey + '",EssayID:"' + essay_id + '",Enterthetext"' + _essaytypeanswer + '",hash:"' + hashtoken + '",Datetimestamp:"' + isoDate + '"}',
            //data: '{Token:"' + _token + '",TestPin : "' + _testPin + '", CompanyID: "' + _companyID + '" ,AssignID : "' + _assignID + '",AttemptID:"' + _attempID + '",SectionID:"' + _sectionID + '",QuestionID:"' + _question_id + '" , ExamAnswer:"' + _exam_answer + '" , LoginAuditID : "' + _login_audit_id + '", QuestionPaletteEnumID : "' + _question_palette_enum_id + '",LastElapsedTime:"' + logLastElapsedTime + '",ResumePonit:"' + resumePoint + '",CandidateID:"' + _candidate_id + '",question_type:"' + previousQuestionType + '",s3_id:"' + _s3_id + '",IsNavigation:"' + isNavigation + '",compiler_id:"' + CurrentCompilerId + '",navigationtype:"' + navigationMode + '",timespend:"' + curQuestimespend + '",psychometeric_sub_question_type_id:"' + psychometeric_sub_question_type + '",subjective_uploadfiles:"' + subjectiveS3ID + '",Bucket_Id:"' + subjectiveFileDetails + '",SecretKey:"' + secretKey + '",EssayID:"' + essay_id + '",Enterthetext:"' + _essaytypeanswer + '",hash:"' + hashtoken + '",Datetimestamp:"' + isoDate + '"}',

            //command on Aug 24 2021
            //data: '{Token:"' + _token + '",TestPin : "' + _testPin + '", CompanyID: "' + _companyID + '" ,AssignID : "' + _assignID + '",AttemptID:"' + _attempID + '",SectionID:"' + _sectionID + '",QuestionID:"' + _question_id + '" , ExamAnswer:"' + _exam_answer + '" , LoginAuditID : "' + _login_audit_id + '", QuestionPaletteEnumID : "' + _question_palette_enum_id + '",LastElapsedTime:"' + logLastElapsedTime + '",ResumePonit:"' + resumePoint + '",CandidateID:"' + _candidate_id + '",question_type:"' + previousQuestionType + '",s3_id:"' + _s3_id + '",IsNavigation:"' + isNavigation + '",compiler_id:"' + CurrentCompilerId + '",navigationtype:"' + navigationMode + '",timespend:"' + curQuestimespend + '",psychometeric_sub_question_type_id:"' + psychometeric_sub_question_type + '",subjective_uploadfiles:"' + subjectiveS3ID + '",Bucket_Id:"' + subjectiveFileDetails + '",EssayID:"' + essay_id + '",Enterthetext:"' + _essaytypeanswer + '",CurrentInternetSpeed:"' + currentInternetSpeed + '"}',

            data: JSON.stringify(requestData),
            contentType: 'application/json;charset=utf-8',
            timeout: 60000,
            tryCount: 0,
            retryLimit: 0,
            success: function (response) {
                if (resolve != null) {
                    resolve("done");
                }
                if (Number(response) == Number(APIStatusCodeEnum.Ok)) {
                    switch (durationType) {
                        case DurationTypeEnum.ExamWise:
                            previouseQuesEndTime = _last_elapsedTime;
                            _questionSetDB({ sno: currentSNo }).update({ resume_point: resumePoint });
                            _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: _question_palette_enum_id });
                            _questionSetDB({ sno: currentSNo }).update({ Last_ElapsedTime: _last_elapsedTime });

                            if (isSectionNavigation = '1') {
                                _sectionDetailsDB({ section_id: Number(previousSectionId) }).update({ Last_ElapsedTimeInHours: _last_elapsedTime });
                            }
                            break;

                        case DurationTypeEnum.SectionWise:
                            _questionSetDB({ sno: currentSNo }).update({ resume_point: resumePoint });

                            if (isTypingTimerElapsed == true) {
                                _questionSetDB({ id: previousQuestionId }).update({ Question_Palette_Enum_Id: _question_palette_enum_id });
                                isTypingTimerElapsed = false;
                            }
                            else {
                                _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: _question_palette_enum_id });
                            }


                            _questionSetDB({ sno: currentSNo }).update({ Last_ElapsedTime: _last_elapsedTime });

                            //if (isSectionNavigation = '1') {
                            switch (previousQuestionType) {
                                case QuestionTypeEnum.TypingTest:
                                    //_sectionDetailsDB({ section_id: Number(previousSectionId) }).update({ Last_ElapsedTimeInHours: '00:00:00' });
                                    var swl_html = `<div align="center" class="col-md-12">Accuracy = ` + _Accuracy + `% </div></br ><div align="center" class="col-md-12">Words Per Minute(WPM) = ` + _WPM + ` </div></br ><div align="center" class="col-md-12">Character Per Minute(CPM) = ` + _CPM + ` </div><br /><div align="center" class="col-md-12">Number of Mistake = ` + _NoOfMistake + ` </div>`

                                    swal.fire({
                                        html: swl_html,
                                        title: '',
                                        imageUrl: '/Images/Pro/success.svg',
                                        imageWidth: 80,
                                        imageHeight: 80,
                                        type: "success",
                                        showCancelButton: false,
                                        confirmButtonText: "OK",
                                        allowOutsideClick: false
                                    }).then((result) => {
                                        if (result.value) {
                                            UnfreezeTimer();
                                            if (_testPinDB().first().is_question_pallete == '1') {
                                                $("#collapse-widget").click();
                                            }
                                        }
                                    });

                                    break;

                                default:
                                    _sectionDetailsDB({ section_id: Number(previousSectionId) }).update({ Last_ElapsedTimeInHours: _last_elapsedTime });
                                    break;
                            }

                            //}
                            break;
                    }
                    ispresection = false;
                    switch (clickMode) {
                        case ClickEvent.Previous:
                            eventclick = true;
                            sectionwisequestionCount = _questionSetDB({ section_id: String(currentSectionID) }).count();
                            if (currentSectionQuestionSNo == 1) {
                                var sectionDetails = _sectionDetailsDB({ section_id: { "<": currentSectionID }, Last_ElapsedTimeInHours: { "!is": "00:00:00" } }).last();

                                if (sectionDetails.question_type == 7) {
                                    var SectionElapsedTime = sectionDetails.Last_ElapsedTimeInHours;
                                    if (SectionElapsedTime != '00:00:00') {
                                        swal.fire({
                                            title: '<span>Typing Test</span>',
                                            text: "You will have only one attempt for Typing Test. Are you sure you want to enter the typing test Section?",
                                            imageUrl: '/Images/Pro/warning.svg',
                                            imageWidth: 80,
                                            imageHeight: 80,
                                            showCancelButton: true,
                                            confirmButtonText: "Yes",
                                            cancelButtonText: "No, Please Continue",
                                            allowOutsideClick: false
                                        }).then((result) => {
                                            if (result.value) {
                                                //AssignPreviousControlValues();
                                                UnfreezeTimer();
                                                clearInputControls();
                                                GetPreviousQuestionID();
                                            }
                                            else {
                                                UnfreezeTimer();
                                                return;
                                            }
                                        });
                                    }
                                    else {
                                        UnfreezeTimer();
                                        clearInputControls();
                                        GetPreviousQuestionID();
                                    }

                                }
                                else {
                                    UnfreezeTimer();
                                    clearInputControls();
                                    GetPreviousQuestionID();
                                }
                            }
                            else {
                                UnfreezeTimer();
                                clearInputControls();
                                GetPreviousQuestionID();
                            }

                            break;

                        case ClickEvent.Next:
                            eventclick = true;
                            if ($.trim($("#btnNext").text()).includes('Next')) {
                                sectionwisequestionCount = _questionSetDB({ section_id: String(currentSectionID) }).count();
                                if (sectionwisequestionCount == currentSectionQuestionSNo) {
                                    var sectionDetails = _sectionDetailsDB({ section_id: { ">": currentSectionID }, Last_ElapsedTimeInHours: { "!is": "00:00:00" } }).first();
                                    if (sectionDetails.question_type == 7) {
                                        var SectionElapsedTime = sectionDetails.Last_ElapsedTimeInHours;
                                        if (SectionElapsedTime != '00:00:00') {
                                            swal.fire({
                                                title: '<span>Typing Test</span>',
                                                text: "You will  have only one attempt for Typing Test. Are you sure you want to enter the typing test Section?",
                                                imageUrl: '/Images/Pro/warning.svg',
                                                imageWidth: 80,
                                                imageHeight: 80,
                                                type: "warning",
                                                showCancelButton: true,
                                                confirmButtonText: "Yes",
                                                cancelButtonText: "No, Please Continue",
                                                allowOutsideClick: false
                                            }).then((result) => {
                                                if (result.value) {
                                                    //AssignPreviousControlValues();
                                                    UnfreezeTimer();
                                                    clearInputControls();
                                                    GetNextQuestionID();
                                                }
                                                else {
                                                    UnfreezeTimer();
                                                    return;
                                                }
                                            });
                                        }
                                        else {
                                            UnfreezeTimer();
                                            clearInputControls();
                                            GetNextQuestionID();
                                        }

                                    }
                                    else {
                                        UnfreezeTimer();
                                        clearInputControls();
                                        GetNextQuestionID();
                                    }
                                }
                                else {
                                    UnfreezeTimer();
                                    GetNextQuestionID();
                                }

                            }
                            else {
                                UnfreezeTimer();
                                GetNextQuestionID();
                            }
                            break;
                        case ClickEvent.MarkForReview:
                            eventclick = true;
                            if ($.trim($("#btnNext").text()).includes('Next')) {
                                sectionwisequestionCount = _questionSetDB({ section_id: String(currentSectionID) }).count();
                                if (sectionwisequestionCount == currentSectionQuestionSNo) {
                                    var sectionDetails = _sectionDetailsDB({ section_id: { ">": currentSectionID }, Last_ElapsedTimeInHours: { "!is": "00:00:00" } }).first();
                                    if (sectionDetails.question_type == 7) {
                                        var SectionElapsedTime = sectionDetails.Last_ElapsedTimeInHours;
                                        if (SectionElapsedTime != '00:00:00') {
                                            swal.fire({
                                                title: '<span>Typing Test</span>',
                                                text: "You will have only one attempt for Typing Test. Are you sure you want to enter the typing test Section?",
                                                imageUrl: '/Images/Pro/warning.svg',
                                                imageWidth: 80,
                                                imageHeight: 80,
                                                type: "warning",
                                                showCancelButton: true,
                                                confirmButtonText: "Yes",
                                                cancelButtonText: "No, Please Continue",
                                                allowOutsideClick: false
                                            }).then((result) => {
                                                if (result.value) {
                                                    //AssignPreviousControlValues();
                                                    UnfreezeTimer();
                                                    clearInputControls();
                                                    GetNextQuestionID();
                                                }
                                                else {
                                                    UnfreezeTimer();
                                                    return;
                                                }
                                            });
                                        }

                                    }
                                    else {
                                        UnfreezeTimer();
                                        clearInputControls();
                                        GetNextQuestionID();
                                    }
                                }
                                else {
                                    UnfreezeTimer();
                                    GetNextQuestionID();
                                }

                            }
                            else {
                                UnfreezeTimer();
                                GetNextQuestionID();
                            }
                            break;
                        case ClickEvent.QuestionPallete:
                            eventclick = true;
                            BindPalleteQuestion();
                            break;

                        default:
                            if (durationType == DurationTypeEnum.SectionWise) {
                                ispresection = true;
                                switch (clickMode) {
                                    case ClickEvent.TimerElapsed:

                                        if (navOff == true) {
                                            $("#" + DynamicControlPrefixEnum.Section + previousSectionId).css("pointer-events", "none");
                                            $("#" + DynamicControlPrefixEnum.Section + previousSectionId).parent().css("cursor", "not-allowed");
                                            _sectionDetailsDB({ section_id: Number(previousSectionId) }).update({ Last_ElapsedTimeInHours: "00:00:00" });

                                        }
                                        else {
                                            $("#" + DynamicControlPrefixEnum.Section + currentSectionID).css("pointer-events", "none");
                                            $("#" + DynamicControlPrefixEnum.Section + currentSectionID).parent().css("cursor", "not-allowed");
                                            _sectionDetailsDB({ section_id: Number(currentSectionID) }).update({ Last_ElapsedTimeInHours: "00:00:00" });
                                        }


                                        var result = FindAutomaticNextSectionId();
                                        if (result == true) {
                                            BindSectionWiseQuestion(Number(currentSectionSno), QuestionMode.ResumeQuestion);
                                        }
                                        else {
                                            //timer elapse logic
                                            $("#btnEndtest").attr('disabled', false);
                                            $("#btnEndtest").click();

                                        }
                                        currentClickMode = null;
                                        break;

                                    default:
                                        if (TypingTestFirstTime == 0) {
                                            BindSectionWiseQuestion(Number(currentSectionSno), QuestionMode.ResumeQuestion);
                                        }
                                        currentClickMode = null;
                                        break;
                                }
                            }
                            else if (durationType == DurationTypeEnum.ExamWise) {
                                if (currentClickMode != ClickEvent.TimerElapsed) {
                                    BindQuestion(Number(currentSNo), QuestionMode.ResumeQuestion);
                                }
                            }
                            break;
                    }

                    switch (durationType) {
                        case DurationTypeEnum.ExamWise:
                            _questionSetDB({ section_id: currentSectionID, sno: { "!is": currentSNo } }).update({ resume_point: "0" });
                            break;
                        case DurationTypeEnum.SectionWise:
                            _questionSetDB({ section_id: currentSectionID, sno: { "!is": currentSNo } }).update({ resume_point: "0" });
                            break;
                    }
                }
                else if (Number(response) == Number(APIStatusCodeEnum.DuplicateUserLoggedIn)) {
                    //window.location.href = "/ThankYou/DuplicateUserThankYou";
                    swal.fire({
                        title: '<span></span>',
                        text: ErrorMessageEnum.DuplicateUserLoggedIn,
                        type: "error",
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        confirmButtonColor: '#ed5364',
                        closeOnConfirm: true,
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.value) {
                            UnfreezeTimer();
                            var settingsinfo = _testPinDB().first().settingsname;
                            if (settingsinfo != null && settingsinfo != "") {
                                window.location.href = settingsinfo;
                            }

                        }
                    })
                }
                else if (response.Code == Number(APIStatusCodeEnum.ScheduleExpire)) {
                    swal.fire({
                        title: '<span></span>',
                        text: response.Message,
                        type: "error",
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        confirmButtonColor: '#ed5364',
                        closeOnConfirm: true,
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.value) {
                            ProcessResult();
                        }
                    })
                }
                else if (Number(response.Code) == Number(APIStatusCodeEnum.Terminate)) {
                    swal.fire({
                        title: '<span></span>',
                        text: response.Message,
                        type: "error",
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        confirmButtonColor: '#ed5364',
                        closeOnConfirm: true,
                        allowOutsideClick: false
                    }).then((result) => {
                        if (result.value) {
                            UnfreezeTimer();
                            var settingsinfo = _testPinDB().first().settingsname;
                            if (settingsinfo != null && settingsinfo != "") {
                                window.location.href = settingsinfo;
                            }
                        }

                    })
                }
                else {
                    commonErrorAlert();
                    $("#divloading").hide();
                }
            },
            complete: function () {
                $("#divloading").hide();
                if (!isSubmitEndTest) {
                    if (durationType != DurationTypeEnum.ExamWise) {
                        UnfreezeTimer();
                    }
                }
                AssignPreviousControlValues();
                _exam_answer = ''
                subQID = 0;
                optionID = 0;

            },
            error: function (jqXHR, textStatus, errorThrown) {
                //this.tryCount++;
                $("#divloading").hide();
                commonErrorAlert();

                //if (this.tryCount <= this.retryLimit) {
                //    $.ajax(this);
                //    return;
                //}
                //else {
                //swal.fire({
                //    title: '<span></span>',
                //    text: ErrorMessageEnum.InternalServerError,
                //    type: "error",
                //    showCancelButton: false,
                //    confirmButtonText: "OK",
                //    imageUrl: '/Images/Pro/error.svg',
                //    imageWidth: 80,
                //    imageHeight: 80,
                //    confirmButtonColor: '#ed5364',
                //    closeOnConfirm: true,
                //});
                //}
                var data = " LoadAssessment - PostEventLog Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                PostJavascriptError(data);
                return;
            }
        });


    } catch (e) {
        PostJavascriptError("ProcessEventLog", "Assessment - ProcessEventLog:" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function AssignPreviousControlValues() {
    previousSectionId = currentSectionID;
    previousQuestionId = currentQuestionID;
    previousSno = currentSNo;
    previousQuestionType = currentQuestionType;
}

function FindAutomaticNextSectionId() {
    var result = false;
    try {
        if (navOff == true) {
            navOff = false;
            result = true;
        }
        else {
            _sectionDetailsDB().each(function (item, index) {

                if ((item["Last_ElapsedTimeInHours"] != '00:00:00') && (result == false)) {
                    currentSectionID = item["section_id"];
                    currentSectionSno = item["SNo"];
                    result = true;
                }
            });
        }

        return result;
    } catch (e) {
        PostJavascriptError("FindAutomaticNextSectionId", "Assessment - FindAutomaticNextSectionId:" + e.message + ":" + "Testpin:" + _logDetails);
        throw e;
    }
}

function clearInputControls() {
    try {
        clearInterval(autoSaveCoding);
        clearInterval(autoSaveSubjective);
        clearInterval(autoSaveEssay);
        currentQuestionID = 0;
        currentQuestion = '';
        currentIsMultipleOption = 0;
        currentSectionName = '';
        currentQuestionType = '';
        $("#sQuestionSNo").text('');
        $("#sQuestion").text('');
        $("#divSectionName").empty();
        $("#sCurrentQuestoinSNo").text('');
        $("#sTotalQuestion").text('');
        $("#divQuestionOptions").empty();
        $("#divMcqWeightageOptions").empty();
        $("#divConstantOptions").empty();
        $("#divPsychometricQuestions").empty();
        $("#divPsychometricOptions").empty();
        $("#divTypingTest").hide();
        $("#divSubjectiveType").hide();
        $("#divEssayType").hide();
        $("#spnCharCount").text('');
        $("#adjectiveHelp").hide();
        $("#txtEssayType").val("");

    } catch (e) {
        PostJavascriptError("clearInputControls", "Error in Clear input values on next question: " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function GetPreviousQuestionID() {
    try {
        switch (durationType) {
            case DurationTypeEnum.ExamWise:
                BindPreviousQuestion();
                break;

            case DurationTypeEnum.SectionWise:
                //if (isSectionNavigation == '1') {
                sectionwisequestionCount = _questionSetDB({ section_id: String(currentSectionID) }).count();

                if (sectionwisequestionCount >= currentSectionQuestionSNo) {
                    if (currentSectionQuestionSNo != 1) {
                        currentSNo = Number(currentSNo) - 1;
                        if (isPreviousButton == "1" || isPreviousButton == 1) {
                            btnPreviousSettings(currentSNo);
                        }
                        GetCurrentSectionSno(currentSNo, 'QuestionSno');
                    }
                    else {
                        previousResult = FindPreviousSectionId();
                    }

                    if (currentSectionQuestionSNo != 1) {
                        currentSectionQuestionSNo = Number(currentSectionQuestionSNo) - 1;
                    }

                    BindSectionWiseQuestion(currentSectionSno, QuestionMode.NavigateQuestion);
                }
                //}
                //else {
                //    BindPreviousQuestion();
                //}
                break;

            default:
                alert("No Previous Question");
                break;
        }

    } catch (e) {
        PostJavascriptError("GetPreviousQuestionID", "Assessment - Get Previous Question ID :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function FindPreviousSectionId() {
    var result = false;
    try {
        var sectionDetails = _sectionDetailsDB({ section_id: { "<": currentSectionID }, Last_ElapsedTimeInHours: { "!is": "00:00:00" } }).last();

        if (sectionDetails != false) {
            currentSectionID = sectionDetails.section_id;
            currentSectionSno = sectionDetails.SNo;
            lastSectionSno = currentSectionSno;
            var questionDetails = _questionSetDB({ section_id: String(currentSectionID), section_sno: String(sectionDetails.section_count) }).first();
            currentSNo = questionDetails.sno;
            result = true;
        }
        else {

            result = false;
        }
        return result;
    } catch (e) {
        PostJavascriptError("FindPreviousSectionId", "Assessment - Get Previous Question ID :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

// done for section navigation
function BindPreviousQuestion() {
    try {
        if (questionCount >= currentSNo && (currentSNo != 1)) {
            currentSNo = Number(currentSNo) - 1;
        }
        if (isPreviousButton == "1" || isPreviousButton == 1) {
            btnPreviousSettings(currentSNo);
        }
        switch (durationType) {
            case DurationTypeEnum.ExamWise:
                BindQuestion(currentSNo, QuestionMode.NavigateQuestion);
                break;
            case DurationTypeEnum.SectionWise:
                GetCurrentSectionSno(currentSNo, 'QuestionSno');
                BindSectionWiseQuestion(currentSectionSno, QuestionMode.NavigateQuestion);
            default:
        }
    } catch (e) {
        PostJavascriptError("BindPreviousQuestion", "Assessment - Bind Previous Question :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function GetNextQuestionID() {
    try {
        switch (durationType) {
            case DurationTypeEnum.ExamWise:
                BindNextQuestion();
                break;

            case DurationTypeEnum.SectionWise:
                //if (isSectionNavigation == '1') {
                sectionwisequestionCount = _questionSetDB({ section_id: String(currentSectionID) }).count();
                if (sectionwisequestionCount > currentSectionQuestionSNo) {
                    currentSectionQuestionSNo = Number(currentSectionQuestionSNo) + 1;
                    currentSNo = Number(currentSNo) + 1;
                    if (isPreviousButton == "1" || isPreviousButton == 1) {
                        btnPreviousSettings(currentSNo);
                    }
                    GetCurrentSectionSno(currentSNo, 'QuestionSno');
                    BindSectionWiseQuestion(currentSectionSno, QuestionMode.NavigateQuestion);
                }
                else if (sectionwisequestionCount < currentSectionQuestionSNo) {

                    currentSectionSno = Number(currentSectionSno) + 1;
                    var secID = _sectionDetailsDB({ SNo: currentSectionSno }).first().section_id;
                    currentSectionID = secID.toString();
                    BindSectionWiseQuestion(currentSectionSno, QuestionMode.ResumeQuestion);
                }
                else if (sectionwisequestionCount == currentSectionQuestionSNo) {
                    if (totalNoofSection > currentSectionSno) {
                        FindNextSectionId();
                        currentSectionSno = Number(currentSectionSno) + 1;
                        var secID = _sectionDetailsDB({ SNo: currentSectionSno }).first().section_id;
                        currentSectionID = secID.toString();
                        BindSectionWiseQuestion(currentSectionSno, QuestionMode.ResumeQuestion);
                    }
                    else if (totalNoofSection == currentSectionSno) {
                        $("#divloading").hide();
                        // $("#btnEndtest").click();
                        SubjectiveFileMandatory()
                        if (isSubjectiveMandatory != true) {
                            $("#btnEndtest").click();
                        }
                        else {
                            return false;
                        }
                    }
                }
                //}
                //else {
                //BindNextQuestion();
                //}
                break;

            default:
                alert("No Next Question");
                break;
        }
    } catch (e) {
        PostJavascriptError("GetNextQuestionID", "Assessment - Get Next Question ID :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function FindNextSectionId() {
    var result = false;
    try {

        var sectionDetails = _sectionDetailsDB({ section_id: { ">": currentSectionID }, Last_ElapsedTimeInHours: { "!is": "00:00:00" } }).first();
        currentSectionID = sectionDetails.section_id;
        currentSectionSno = sectionDetails.SNo;
        currentSectionSno = currentSectionSno - 1;
        return result;
    } catch (e) {
        PostJavascriptError("FindNextSectionId", "Assessment - FindNextSectionId:" + e.message + ":" + "Testpin:" + _logDetails);
    }
}
// done for section navigation
function BindNextQuestion() {
    try {
        if (questionCount > currentSNo) {
            currentSNo = Number(currentSNo) + 1;
            switch (durationType) {
                case DurationTypeEnum.ExamWise:
                    BindQuestion(currentSNo, QuestionMode.NavigateQuestion);
                    break;
                case DurationTypeEnum.SectionWise:
                    //need to bind timer based on the section
                    GetCurrentSectionSno(currentSNo, 'QuestionSno');
                    BindSectionWiseQuestion(currentSectionSno, QuestionMode.NavigateQuestion);
            }
        }
        else if (questionCount == currentSNo) {
            $("#divloading").hide();
            //$("#btnEndtest").click();
            SubjectiveFileMandatory()
            if (isSubjectiveMandatory != true) {
                $("#btnEndtest").click();
            }
            else {
                return false;
            }
        }
    } catch (e) {
        PostJavascriptError("BindNextQuestion", "Assessment - Bind Next Question :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function btnPreviousSettings(questionSno) {
    try {
        if (questionSno == "1") {
            $("#btnPrevious").hide();
        }
        else {
            BindPreviousSettings();
        }
    } catch (e) {
        PostJavascriptError("btnPreviousSettings", "Assessment - Previous Button Settings :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}
//Get Current Section Sno. based on the overall question serial no.
function GetCurrentSectionSno(paramID, paramType) {
    try {
        if (paramType == 'QuestionSno') {
            currentSNo = paramID.toString();
            var questionDetails = _questionSetDB({ sno: currentSNo }).first();
            currentSectionID = questionDetails.section_id;
        }
        else {
            currentSectionID = paramID; // section id
        }

        var sectionSno = _sectionDetailsDB({ section_id: Number(currentSectionID) }).first();
        currentSectionSno = sectionSno.SNo;

    } catch (e) {
        PostJavascriptError("GetCurrentSectionSno", "Assessment - Get Current Section Sno :" + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function BindQuestion(paramID, strQuestionMode) {
    try {
        clearInputControls();
        paramID = paramID.toString();
        var masterQuestion;
        var isResume = 0;

        switch (strQuestionMode) {
            case QuestionMode.ResumeQuestion:
                if (isSectionNavigation == '1') {
                    var SectionWiseQuestions = _questionSetDB({ section_id: String(currentSectionID) }).get();

                    for (var i = 0; i < SectionWiseQuestions.length; i++) {
                        var _sectionWiseQuestion = SectionWiseQuestions[i];
                        if (_sectionWiseQuestion.resume_point == '1' || _sectionWiseQuestion.resume_point == 1) {
                            isResume = 1;
                            masterQuestion = _sectionWiseQuestion;
                            break;
                        }
                    }
                    if (isResume == 0) {
                        masterQuestion = _questionSetDB({ section_id: String(currentSectionID) }).first();
                    }
                }
                else {
                    masterQuestion = _questionSetDB({ resume_point: paramID }).first();
                }
                break;
            case QuestionMode.NavigateQuestion:
                masterQuestion = _questionSetDB({ sno: paramID }).first();
                break;
            default:
                break;
        }
        currentSNo = masterQuestion.sno;
        currentSectionID = masterQuestion.section_id;
        currentSectionName = masterQuestion.section_name;
        is_media_type = masterQuestion.is_Media_type;
        var sectionCount = _sectionDetailsDB({ section_id: Number(currentSectionID) }).first().section_count;
        currentSectionQuestionCount = sectionCount;

        currentSectionQuestionSNo = masterQuestion.section_sno;
        currentQuestionID = masterQuestion.id;

        currentIsMultipleOption = masterQuestion.IsMultipleOption;
        currentQuestion = masterQuestion.question;
        currentQuestionType = masterQuestion.question_type;
        CurrentProblemCode = masterQuestion.problem_Code;
        CurrentProblemId = masterQuestion.problem_Id;
        is_multiple_facet = masterQuestion.is_multiple_facet;

        if (currentQuestionType == QuestionTypeEnum.Code_Simulation) {
            $("#sCodingQuestionSNo").text(currentSectionQuestionSNo + ".");
            $("#sCodingCurrentQuestoinSNo").text(currentSectionQuestionSNo);
            $("#sCodingTotalQuestion").text(currentSectionQuestionCount);
            $("#divQuestionOptions").hide();
            $("#contntWrapper").addClass("condingContent");
            $("#codeResult").removeClass("error-badge").empty();
        }
        else {
            $("#divQuestionOptions").show();
            $("#contntWrapper").removeClass("condingContent");
        }

        //$("#sQuestionSNo").text(currentSNo + ".");
        $("#sQuestionSNo").text(currentSectionQuestionSNo + ".");
        $("#divSectionName").text(currentSectionName);
        //$("#sCurrentQuestoinSNo").text(currentSNo);
        $("#sCurrentQuestoinSNo").text(currentSectionQuestionSNo);
        //$("#sTotalQuestion").text(totalNoofQuestions);
        $("#sTotalQuestion").text(currentSectionQuestionCount);
        //$("#sScore").text(Score);

        if (isPreviousButton == "1" || isPreviousButton == 1) {
            btnPreviousSettings(currentSNo);
        }

        if (totalNoofQuestions == currentSNo) {
            $("#btnMarkForReview").hide();
            $("#btnNext").text('Submit');

        } else {
            if (isQuestionPallete == "1") {
                $("#btnMarkForReview").show();
            }
            else {
                $("#btnMarkForReview").hide();
            }
            $("#btnNext").text('Next');
            $("#btnNext").append(' <i class="fa fa-chevron-left  p-r-10"></i>');
        }

        DisableControls();
        RefreshSectionButton();

        //var oldclass = $('#' + DynamicControlPrefixEnum.Section + previousSectionId).attr('class');
        //if (oldclass != '' && oldclass != null && oldclass != undefined) {
        //    $('#' + DynamicControlPrefixEnum.Section + previousSectionId).removeClass(oldclass).addClass(DynamicSectionButtonClassName.Default);
        //}
        //$('#' + DynamicControlPrefixEnum.Section + currentSectionID).addClass(DynamicSectionButtonClassName.Active);

        var masterQuestionOptions = _questionOptionSetDB({ question_id: currentQuestionID }).get();

        switch (currentQuestionType) {
            case QuestionTypeEnum.SituationReaction:
            case QuestionTypeEnum.MCQ:
                BindMCQ(masterQuestionOptions);
                break;

            case QuestionTypeEnum.Psychometric:
                BindPsychometric(masterQuestionOptions);
                break;

            case QuestionTypeEnum.Code_Simulation:
                $("#problem").html(currentQuestion);
                $("#divProgrammingOptions").html("");
                $("#divProgrammingOptions").css("display", "block");

                //var compilername = masterQuestion.compiler_Name;
                //var modetype = masterQuestion.Mode_Type;

                var questionid = masterQuestion.id;

                var answerSetData1 = _assessmentAnswerDB({ question_id: currentQuestionID }).get();
                var answerSetData = answerSetData1[0];


                $("#codeEditor").empty();
                $("#codeEditor").append("<textarea style='height:600px !important' id='editor_" + questionid + "' onload='test()'></textarea><textarea id='Compile' style='display: none;width: 30%; height: 100px'></textarea><script>var editor=CodeMirror.fromTextArea(document.getElementById('editor_" + questionid + "'),{mode:'scheme',theme:'eclipse',lineNumbers:!0,autoCloseTags:!0,hint:'anyword - hint',extraKeys:{'Ctrl-Space':'autocomplete'}});var mac=CodeMirror.keyMap.default==CodeMirror.keyMap.macDefault;CodeMirror.keyMap.default[(mac?'Cmd':'Ctrl')+' - Space']='autocomplete'; $('#select').change(function(){var modeInput = document.getElementById('select');var myindex = modeInput.selectedIndex; var modefly = modeInput.options[myindex].text.toLowerCase();editor.setOption('mode', $(this).val());});</script>");
                //$("#codeEditor").append("<script>var editor=CodeMirror.fromTextArea(document.getElementById('editor_" + questionid + "'),{mode:'scheme',theme:'eclipse',lineNumbers:!0,autoCloseTags:!0,hint:'anyword - hint',extraKeys:{'Ctrl-Space':'autocomplete'}});var mac=CodeMirror.keyMap.default==CodeMirror.keyMap.macDefault;CodeMirror.keyMap.default[(mac?'Cmd':'Ctrl')+' - Space']='autocomplete'; $('#select').change(function(){var modeInput = document.getElementById('select');var myindex = modeInput.selectedIndex; var modefly = modeInput.options[myindex].text.toLowerCase();editor.setOption('mode', $(this).val());});</script>");
                $("#codeEditor").append("<script>var editor=CodeMirror.fromTextArea(document.getElementById('editor_" + questionid + "'),{mode:'scheme',theme:'eclipse',lineNumbers:!0,autoCloseTags:!0,hint:'anyword - hint',autoCloseBrackets:true,globalVars: true,extraKeys:{'Ctrl-Space':'autocomplete'}});var mac=CodeMirror.keyMap.default==CodeMirror.keyMap.macDefault;CodeMirror.keyMap.default[(mac?'Cmd':'Ctrl')+' - Space']='autocomplete'; $('#select').change(function(){var modeInput = document.getElementById('select');var myindex = modeInput.selectedIndex; var modefly = modeInput.options[myindex].text.toLowerCase();editor.setOption('mode', $(this).val());});</script>");

                var removeDuplicatCodeMirror = document.getElementsByClassName("CodeMirror cm-s-eclipse");
                if (removeDuplicatCodeMirror.length > 1) {
                    removeDuplicatCodeMirror[1].remove();
                }

                //document.getElementsByClassName("CodeMirror-gutter CodeMirror-linenumbers")[0].remove()

                $("#divProgrammingRunCode").empty();
                $('#select').empty();
                $('#text').val('');
                //for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                //    $('#select').append("<option value=" + answerSetData.listlanguage[i].Mode_type + ">" + answerSetData.listlanguage[i].compiler_Name + "</option>");
                //    if (answerSetData.listlanguage[i].IsSelected == 1) {
                //        $('#select').val(answerSetData.listlanguage[i].Mode_type);
                //        editor.setOption('mode', answerSetData.listlanguage[i].Mode_type);
                //        CurrentCompilerName = answerSetData.listlanguage[i].compiler_Name;
                //        CurrentModeType = answerSetData.listlanguage[i].Mode_type;

                //    }
                //}
                var result = false;

                for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                    if (result == false && answerSetData.listlanguage[i].IsSelected == 1) {
                        result = true;
                    }
                }

                if (result) {
                    for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                        $('#select').append("<option value=" + answerSetData.listlanguage[i].Mode_type + ">" + answerSetData.listlanguage[i].compiler_Name + "</option>");
                        if (answerSetData.listlanguage[i].IsSelected == 1) {
                            $('#select').val(answerSetData.listlanguage[i].Mode_type);
                            editor.setOption('mode', answerSetData.listlanguage[i].Mode_type);
                            CurrentCompilerName = answerSetData.listlanguage[i].compiler_Name;
                            CurrentModeType = answerSetData.listlanguage[i].Mode_type;

                        }
                    }
                }
                else {
                    for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                        $('#select').append("<option value=" + answerSetData.listlanguage[i].Mode_type + ">" + answerSetData.listlanguage[i].compiler_Name + "</option>");
                        var answerSetData = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                        var datalang = answerSetData.listlanguage;
                        CurrentCompilerName = answerSetData.listlanguage[0].compiler_Name;
                        if (answerSetData.listlanguage[i].compiler_Name == CurrentCompilerName) {
                            datalang[i].IsSelected = 1;
                        }
                        else {
                            datalang[i].IsSelected = 0;
                        }
                    }
                    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ listlanguage: datalang });
                }

                $("#select").tooltip({
                    trigger: 'hover',
                    title: function (e) {
                        return $(this).attr("data-original-title", $(this).find("option:selected").text());
                    }
                });


                $('#select').attr("data-original-title", $('#select').find("option:selected").text());

                $("#select").change(function () {
                    $('#text').val('');
                    $("#divProgrammingRunCode").empty();
                    $("#testcase").empty();
                    $("#codeResult").removeClass("error-badge").empty();
                    var problemId = "#problem-tab";
                    showCodingTabcontrol(problemId);

                    $(this).attr("data-original-title", $(this).find("option:selected").text());
                    $('#select').tooltip();
                    CurrentCompilerName = $(this).find("option:selected").text();
                    CurrentModeType = $(this).find("option:selected").val();
                    var answerSetData = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                    var datalang = answerSetData.listlanguage;
                    for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                        if (answerSetData.listlanguage[i].compiler_Name == CurrentCompilerName) {
                            datalang[i].IsSelected = 1;
                        }
                        else {
                            datalang[i].IsSelected = 0;
                        }
                    }
                    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ listlanguage: datalang });
                    BindCorrectAnswer('');
                });

                BindCorrectAnswer('');
                PostS3Id();
                break;

            case QuestionTypeEnum.VideoRecord:
                BindVideoRecord();
                break;

            case QuestionTypeEnum.TypingTest:
                //$("#divParagraphQuestions").html('');
                //$("#btnNext").attr('disabled', true);
                //$("#btnPrevious").attr('disabled', true);
                //$("#btnMarkForReview").attr('disabled', true);
                //$("#btnEndtest").attr('disabled', true);
                //// $("#divQuestionPallete").hide();
                ////$("#divSectionButtons").attr('disabled', true);
                ////$("#divSectionButtons").show();
                //$('#sQuestion').css("max-height", "150px");
                //$('#sQuestion').css("overflow-y", "auto");
                //var _time = $("#future_date").text();
                //if (_time != '00:00:00') {
                //    //swal("", "You have entered into Typing Test Section.You will be allowed for One go only!", "success");
                //    swal.fire({
                //        title: '<span></span>',
                //        text: "You have entered into Typing Test Section.You will be allowed for One go only!",
                //        type: "success",
                //        showCancelButton: false,
                //        confirmButtonText: "OK",
                //        allowOutsideClick: false
                //    }).then((result) => {
                //        if (result.value) {
                //        }
                //        else {
                //        }
                //    });


                //}

                //BindTypeTestControls();
                break;

            case QuestionTypeEnum.LinkertType:
                $("#divParagraphQuestions").html('');
                $('#sQuestion').css("max-height", "150px");
                $('#sQuestion').css("overflow-y", "auto");
                //$("#sQuestion").html(currentQuestion);
                //var _subQuestions = _subQuestionDB({ question_id: currentQuestionID }).get();
                //var index = 0;
                //var radiobtnName = '';
                //_subQuestions.forEach(function (element) {
                //    radiobtnName = 'radio' + element.subquestion_id;
                //    $("#divQuestionOptions").append("<div id='" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "' ><label>" + element.sub_question + " <i class='helper'></i> </label></div>");
                //    $("#divConstantOptions").append("<div class='col-md-4'> <div class='radio'> <label> <input type='radio' id = '" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "'  name = '" + radiobtnName + "'  value='" + LinkertTypeOptionsEnum.Completely + "' > <i class='helper'></i>Completely</label> </div></div>" +
                //        "<div class='col-md-4'><div class='radio'> <label> <input type='radio' id='" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "' name='" + radiobtnName + "' value='" + LinkertTypeOptionsEnum.Moderately + "' > <i class='helper'></i>Moderately</label> </div></div>" +
                //        "<div class='col-md-4'><div class='radio'> <label> <input type='radio' id='" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "' name='" + radiobtnName + "' value='" + LinkertTypeOptionsEnum.NotAtAll + "' > <i class='helper'></i>NotAtAll</label> </div></div>");
                //    BindCorrectAnswer(element);
                //    index++;
                //});
                break;
            case QuestionTypeEnum.Paragraph:
                BindParagraph();
                break;

            case QuestionTypeEnum.SubjectiveType:
                if (masterQuestion.is_manual_evaluation == "False") {
                    BindSubjectivecontrolsWithManualEvaluation();
                }
                else {
                    $('#divSubjectiveManualEvaluation').hide();
                    if (masterQuestion.is_sub_question_upload) {
                        $("#subjectiveUpload").show();
                    }
                    else {
                        $("#subjectiveUpload").hide();

                    }
                    BindSubjectiveType();
                    PostSubjectiveTypeValue();
                }

                break;
            case QuestionTypeEnum.EssayType:
                BindEssayTypeControls();
                BindCorrectAnswer('');
                PostEssayTypeValue();
                break;
            case QuestionTypeEnum.MCQWeightages:
                TypingTestFirstTime = 0;
                BindWeightageQuestion(masterQuestionOptions);
                break;
            default:
                break;
        }
        LoadQuestionPallete();
        $("#divloading").hide();
        isFirstTime = 0;
        //UnfreezeTimer();

    } catch (e) {
        PostJavascriptError("BindQuestion", "Assessment - Bind question : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}
function BindSubjectivecontrolsWithManualEvaluation() {
    $('#divSubjectiveManualEvaluation').show();
    $('#txtSubjectiveManualEvaluation').val('');
    $("#divSubjectiveType").hide();
    $("#sQuestion").html(currentQuestion);
    $('#sQuestion').css("height", "");
    $('#sQuestion').css("overflow-y", "");
    BindMediaControlTypes();
    BindCorrectAnswer('3(i)');
}

// paramID = Current Section Serial No.
function BindSectionWiseQuestion(paramID, strQuestionMode) {
    BindSectionQuestion(paramID, strQuestionMode);
}

function BindSectionQuestion(paramID, strQuestionMode) {
    try {
        clearInputControls();
        RefreshSectionButton();
        var _currentSection = _sectionDetailsDB({ section_id: Number(currentSectionID) }).first();
        var RemainingTime = _currentSection.Last_ElapsedTimeInHours;
        currentSectionDuration = _currentSection.section_duration;

        if (eventclick == true) {
            if (RemainingTime == '' || RemainingTime == null || RemainingTime == undefined) {
                ConvertMinToTimeFormat(String(currentSectionDuration));
            }
            else {
                BindTimerControls(RemainingTime);
            }
            eventclick = false;
        }

        // need to remaining time validation
        currentSectionSno = paramID;
        var isResume = 0;
        var elementData;

        switch (strQuestionMode) {
            case QuestionMode.ResumeQuestion:
                var secID = _sectionDetailsDB({ SNo: currentSectionSno }).first().section_id;
                secID = secID.toString();
                var SectionWiseQuestions = _questionSetDB({ section_id: String(secID) }).get();
                for (var i = 0; i < SectionWiseQuestions.length; i++) {
                    var _sectionWiseQuestion = SectionWiseQuestions[i];
                    if (_sectionWiseQuestion.resume_point == '1' || _sectionWiseQuestion.resume_point == 1) {
                        isResume = 1;
                        elementData = _sectionWiseQuestion;
                        break;
                    }
                }
                if (isResume == 0 && elementData == null) {
                    elementData = _questionSetDB({ section_id: String(secID) }).first();
                }
                break;

            case QuestionMode.NavigateQuestion:
                elementData = _questionSetDB({ sno: currentSNo }).first();
                break;

            default:
        }



        BindQuestionData(elementData);
        if (currentQuestionType == QuestionTypeEnum.Code_Simulation) {
            $("#sCodingCurrentQuestoinSNo").text(currentSectionQuestionSNo);
            $("#sCodingTotalQuestion").text(currentSectionQuestionCount);
            $("#divQuestionOptions").hide();
            $("#contntWrapper").addClass("condingContent");
            $("#codeResult").removeClass("error-badge").empty();
        }
        else {
            $("#divQuestionOptions").show();
            $("#contntWrapper").removeClass("condingContent");
        }

        var masterQuestionOptions = _questionOptionSetDB({ question_id: currentQuestionID }).get();
        switch (currentQuestionType) {
            case QuestionTypeEnum.SituationReaction:
            case QuestionTypeEnum.MCQ:
                TypingTestFirstTime = 0;
                isResumeTypeTest = true;
                BindMCQ(masterQuestionOptions);
                break;

            case QuestionTypeEnum.Psychometric:
                TypingTestFirstTime = 0;
                isResumeTypeTest = true;
                BindPsychometric(masterQuestionOptions);
                break;

            case QuestionTypeEnum.Code_Simulation:
                TypingTestFirstTime = 0;
                isResumeTypeTest = true;
                $("#problem").html(currentQuestion);
                $("#divProgrammingOptions").html("");
                $("#divParagraphQuestions").html('');
                $("#codingSimulation").show();
                $("#divProgrammingOptions").css("display", "block");
                var questionid = elementData.id;

                var answerSetData = _assessmentAnswerDB({ question_id: currentQuestionID }).first();

                $("#codeEditor").empty();

                $("#codeEditor").append("<textarea style='height:600px !important' id='editor_" + questionid + "' onload='test()'></textarea><textarea id='Compile' style='display: none;width: 30%; height: 100px'></textarea><script>var editor=CodeMirror.fromTextArea(document.getElementById('editor_" + questionid + "'),{mode:'scheme',theme:'eclipse',lineNumbers:!0,autoCloseTags:!0,hint:'anyword - hint',extraKeys:{'Ctrl-Space':'autocomplete'}});var mac=CodeMirror.keyMap.default==CodeMirror.keyMap.macDefault;CodeMirror.keyMap.default[(mac?'Cmd':'Ctrl')+' - Space']='autocomplete'; $('#select').change(function(){var modeInput = document.getElementById('select');var myindex = modeInput.selectedIndex; var modefly = modeInput.options[myindex].text.toLowerCase();editor.setOption('mode', $(this).val());});</script>");
                // $("#codeEditor").append("<script>var editor=CodeMirror.fromTextArea(document.getElementById('editor_" + questionid + "'),{mode:'scheme',theme:'eclipse',lineNumbers:!0,autoCloseTags:!0,hint:'anyword - hint',extraKeys:{'Ctrl-Space':'autocomplete'}});var mac=CodeMirror.keyMap.default==CodeMirror.keyMap.macDefault;CodeMirror.keyMap.default[(mac?'Cmd':'Ctrl')+' - Space']='autocomplete'; $('#select').change(function(){var modeInput = document.getElementById('select');var myindex = modeInput.selectedIndex; var modefly = modeInput.options[myindex].text.toLowerCase();editor.setOption('mode', $(this).val());});</script>");
                $("#codeEditor").append("<script>var editor=CodeMirror.fromTextArea(document.getElementById('editor_" + questionid + "'),{mode:'scheme',theme:'eclipse',lineNumbers:!0,autoCloseTags:!0,hint:'anyword - hint',autoCloseBrackets:true,globalVars: true,extraKeys:{'Ctrl-Space':'autocomplete'}});var mac=CodeMirror.keyMap.default==CodeMirror.keyMap.macDefault;CodeMirror.keyMap.default[(mac?'Cmd':'Ctrl')+' - Space']='autocomplete'; $('#select').change(function(){var modeInput = document.getElementById('select');var myindex = modeInput.selectedIndex; var modefly = modeInput.options[myindex].text.toLowerCase();editor.setOption('mode', $(this).val());});</script>");


                var removeDuplicatCodeMirror = document.getElementsByClassName("CodeMirror cm-s-eclipse");
                if (removeDuplicatCodeMirror.length > 1) {
                    removeDuplicatCodeMirror[1].remove();
                }
                $("#divProgrammingRunCode").empty();
                $('#select').empty();
                $('#text').val('');
                //for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                //    $('#select').append("<option value=" + answerSetData.listlanguage[i].Mode_type + ">" + answerSetData.listlanguage[i].compiler_Name + "</option>");
                //    if (answerSetData.listlanguage[i].IsSelected == 1) {

                //        $('#select').val(answerSetData.listlanguage[i].Mode_type);
                //        editor.setOption('mode', answerSetData.listlanguage[i].Mode_type);
                //        CurrentCompilerName = answerSetData.listlanguage[i].compiler_Name;
                //        CurrentCompilerId = answerSetData.listlanguage[i].compiler_Id;
                //        CurrentModeType = answerSetData.listlanguage[i].Mode_type;

                //    }
                //}

                var result = false;

                for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                    if (result == false && answerSetData.listlanguage[i].IsSelected == 1) {
                        result = true;
                    }
                }

                if (result) {
                    for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                        $('#select').append("<option value=" + answerSetData.listlanguage[i].Mode_type + ">" + answerSetData.listlanguage[i].compiler_Name + "</option>");
                        if (answerSetData.listlanguage[i].IsSelected == 1) {
                            $('#select').val(answerSetData.listlanguage[i].Mode_type);
                            editor.setOption('mode', answerSetData.listlanguage[i].Mode_type);
                            CurrentCompilerName = answerSetData.listlanguage[i].compiler_Name;
                            CurrentModeType = answerSetData.listlanguage[i].Mode_type;

                        }
                    }
                }
                else {
                    for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                        $('#select').append("<option value=" + answerSetData.listlanguage[i].Mode_type + ">" + answerSetData.listlanguage[i].compiler_Name + "</option>");
                        var answerSetData = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                        var datalang = answerSetData.listlanguage;
                        CurrentCompilerName = answerSetData.listlanguage[0].compiler_Name;
                        if (answerSetData.listlanguage[i].compiler_Name == CurrentCompilerName) {
                            datalang[i].IsSelected = 1;
                        }
                        else {
                            datalang[i].IsSelected = 0;
                        }
                    }
                    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ listlanguage: datalang });
                }

                $("#select").tooltip({
                    trigger: 'hover',
                    title: function (e) {
                        return $(this).attr("data-original-title", $(this).find("option:selected").text());
                    }
                });

                $('#select').attr("data-original-title", $('#select').find("option:selected").text());

                $("#select").change(function () {
                    $('#text').val('');
                    $("#divProgrammingRunCode").empty();
                    $("#testcase").empty();
                    $("#codeResult").removeClass("error-badge").empty();
                    var problemId = "#problem-tab";
                    showCodingTabcontrol(problemId);

                    $(this).attr("data-original-title", $(this).find("option:selected").text());
                    $('#select').tooltip();
                    CurrentCompilerName = $(this).find("option:selected").text();
                    CurrentModeType = $(this).find("option:selected").val();
                    var answerSetData = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                    var datalang = answerSetData.listlanguage;

                    for (var i = 0; i < answerSetData.listlanguage.length; i++) {
                        if (answerSetData.listlanguage[i].compiler_Name == CurrentCompilerName) {
                            CurrentCompilerId = answerSetData.listlanguage[i].compiler_Id;
                            datalang[i].IsSelected = 1;
                        }
                        else {
                            datalang[i].IsSelected = 0;
                        }
                    }
                    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ listlanguage: datalang });
                    BindCorrectAnswer('');
                });


                BindCorrectAnswer('');
                PostS3Id();

                break;

            case QuestionTypeEnum.VideoRecord:
                TypingTestFirstTime = 0;
                isResumeTypeTest = true;
                BindVideoRecord();
                break;

            case QuestionTypeEnum.TypingTest:
                TypingTestFirstTime = 1;
                BindTypeTestControls();
                break;


            case QuestionTypeEnum.LinkertType:
                //TypingTestFirstTime = 0;
                //$("#sQuestion").html(currentQuestion);
                //$('#sQuestion').css("height", "");
                //$('#sQuestion').css("overflow-y", "");
                //var _subQuestions = _subQuestionDB({ question_id: currentQuestionID }).get();
                //var index = 0;
                //var radiobtnName = '';
                //_subQuestions.forEach(function (element) {
                //    radiobtnName = 'radio' + element.subquestion_id;
                //    $("#divQuestionOptions").append("<div id='" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "' ><label>" + element.sub_question + " <i class='helper'></i> </label></div>");
                //    $("#divConstantOptions").append("<div class='col-md-4'> <div class='radio'> <label> <input type='radio' id = '" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "'  name = '" + radiobtnName + "'  value='" + LinkertTypeOptionsEnum.Completely + "' > <i class='helper'></i>Completely</label> </div></div>" +
                //        "<div class='col-md-4'><div class='radio'> <label> <input type='radio' id='" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "' name='" + radiobtnName + "' value='" + LinkertTypeOptionsEnum.Moderately + "' > <i class='helper'></i>Moderately</label> </div></div>" +
                //        "<div class='col-md-4'><div class='radio'> <label> <input type='radio' id='" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "' name='" + radiobtnName + "' value='" + LinkertTypeOptionsEnum.NotAtAll + "' > <i class='helper'></i>NotAtAll</label> </div></div>");
                //    BindCorrectAnswer(element);
                //    index++;
                //});
                break;
            case QuestionTypeEnum.Paragraph:
                TypingTestFirstTime = 0;
                isResumeTypeTest = true;
                BindParagraph();
                break;
            case QuestionTypeEnum.SubjectiveType:
                //TypingTestFirstTime = 0;
                //isResumeTypeTest = true;
                //if (elementData.is_sub_question_upload) {
                //    $("#subjectiveUpload").show();
                //}
                //else {
                //    $("#subjectiveUpload").hide();

                //}
                //BindSubjectiveType();
                //PostSubjectiveTypeValue();

                TypingTestFirstTime = 0;
                isResumeTypeTest = true;

                if (elementData.is_manual_evaluation == "False") {
                    BindSubjectivecontrolsWithManualEvaluation();
                }
                else {
                    $('#divSubjectiveManualEvaluation').hide();
                    if (elementData.is_sub_question_upload) {
                        $("#subjectiveUpload").show();
                    }
                    else {
                        $("#subjectiveUpload").hide();

                    }
                    BindSubjectiveType();
                    PostSubjectiveTypeValue();
                }
                break;
            case QuestionTypeEnum.EssayType:
                TypingTestFirstTime = 0;
                isResumeTypeTest = true;
                BindEssayTypeControls();
                BindCorrectAnswer('');
                PostEssayTypeValue();
                break;
            case QuestionTypeEnum.MCQWeightages:
                TypingTestFirstTime = 0;
                isResumeTypeTest = true;
                BindWeightageQuestion(masterQuestionOptions);
                break;
            default:
                break;
        }
        LoadQuestionPallete();
        $("#divloading").hide();
        isFirstTime = 0;
    } catch (e) {
        PostJavascriptError("BindSectionQuestion", "Assessment - Bind Section Wise Question : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

//function SubjectiveKeyDown() {
//    var txtSubjectiveType = document.getElementById('subjectiveEditor');
//    //var txtSubjectiveType = document.getElementsByClassName('note-editable');
//    var questionDetail = _questionSetDB({ id: String(currentQuestionID) }).first();
//    //ForAvoidInitialSpaces(txtSubjectiveType);
//    Check(event, txtSubjectiveType, Number(questionDetail.maxchar));

//    getCharCount(txtSubjectiveType, Number(questionDetail.maxchar));
//}

function SubjectiveKeyDown() {
    try {
        var questionDetail = _questionSetDB({ id: String(currentQuestionID) }).first();
        let characters = $('#subjectiveEditor').text();
        let totalCharacters = characters.length;
        $("#spnCharCount").html("Characters used - " + totalCharacters + " / " + Number(questionDetail.maxchar));
        if (characters.length >= Number(questionDetail.maxchar)) {
            if (event.keyCode != 8 && !(event.keyCode >= 37 && event.keyCode <= 40) && event.keyCode != 46 && !(event.keyCode == 88 && event.ctrlKey) && !(event.keyCode == 67 && event.ctrlKey)) {
                swal.fire({
                    text: "Maximum characters allowed are " + Number(questionDetail.maxchar) + "",
                    imageUrl: '/Images/Pro/warning.svg',
                    imageWidth: 80,
                    imageHeight: 80,
                    type: "waring",
                    confirmButtonText: "Yes",
                    allowOutsideClick: false,
                }).then((result) => {
                    if (result.value) {
                        $("#pauseBtnhms").val("Start");
                        $("#pauseBtnhms").click();
                    }
                    else {
                    }
                });

                event.preventDefault();
            }
        }
    } catch (e) {
        PostJavascriptError("SubjectiveKeyDown", "Assessment - SubjectiveKeyDown: " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

//function SubjectiveKeyUp() {
//    var txtSubjectiveType = document.getElementById('subjectiveEditor');
//    var questionDetail = _questionSetDB({ id: String(currentQuestionID) }).first();
//    Check(event, txtSubjectiveType, Number(questionDetail.maxchar));
//    getCharCount(txtSubjectiveType, Number(questionDetail.maxchar));
//}
function SubjectiveKeyUp() {
    try {
        var questionDetail = _questionSetDB({ id: String(currentQuestionID) }).first();
        let characters = $('#subjectiveEditor').text();
        let totalCharacters = characters.length;
        $("#spnCharCount").html("Characters used - " + totalCharacters + " / " + Number(questionDetail.maxchar));
    } catch (e) {
        PostJavascriptError("SubjectiveKeyUp", "Assessment - SubjectiveKeyUp: " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

$("#txtEssayType").on('change', function (e) {
    try {
        var _answer = $("#txtEssayType").val().trim();
        _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: _answer });
        var questionPalID;
        if (_answer != '' && _answer != null && _answer != undefined && _answer != 0) {
            questionPalID = QuestionPalleteEnum.Answered;
        }
        else {
            questionPalID = QuestionPalleteEnum.NotAnswered;
        }

        _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });
    } catch (e) {
        PostJavascriptError("EssayType click", "Assessment - EssayType click: " + e.message + ":" + "Testpin:" + _logDetails);
    }

});

function Check(event, textBox, maxLength) {
    try {
        if (cnt == "0") {
            //FreezeTimer();
            if (event.ctrlKey || event.shiftKey) {
                if (event.keyCode == 8 || event.keyCode == 46)
                    return true;
            }
            else {
                if (event.keyCode == 8 || event.keyCode == 46)
                    return true;
            }

            swal.fire({
                text: "Maximum characters allowed are " + maxLength + "",
                imageUrl: '/Images/Pro/warning.svg',
                imageWidth: 80,
                imageHeight: 80,
                type: "waring",
                confirmButtonText: "Yes",
                allowOutsideClick: false,
            }).then((result) => {
                if (result.value) {
                    $("#pauseBtnhms").val("Start");
                    $("#pauseBtnhms").click();
                }
                else {
                }
            });
            event.preventDefault();
            //textBox.textContent = textBox.textContent.substr(0, maxLength);
        }
        else if (cnt.includes("-")) {

            if (event.ctrlKey || event.shiftKey) {
                if (event.keyCode == 8 || event.keyCode == 46)
                    return true;
            }
            else {
                if (event.keyCode == 8 || event.keyCode == 46)
                    return true;
            }

            swal.fire({
                text: "Maximum characters allowed are " + maxLength + "",
                imageUrl: '/Images/Pro/warning.svg',
                imageWidth: 80,
                imageHeight: 80,
                type: "waring",
                confirmButtonText: "Yes",
                allowOutsideClick: false,
            }).then((result) => {
                if (result.value) {
                    $("#pauseBtnhms").val("Start");
                    $("#pauseBtnhms").click();
                }
                else {
                }
            });
            event.preventDefault();
        }
    } catch (e) {
        PostJavascriptError("Check", "Assessment - Check: " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function getCharCount(txtID, charLimit) {
    cnt = (charLimit - (parseInt(txtID.textContent.length))).toString();
    $("#spnCharCount").html("Characters used - " + cnt);
}
var replaceHtmlEntites = (function () {
    var translate_re = /&(nbsp|amp|quot|lt|gt);/g;
    var translate = {
        "nbsp": " ",
        "amp": "",

    };
    return function (s) {
        return (s.replace(translate_re, function (match, entity) {
            return translate[entity];
        }));
    }
})();


function BindTypeTestControls() {
    try {
        $("#btnNext").attr('disabled', true);
        $("#btnPrevious").attr('disabled', true);
        $("#btnMarkForReview").attr('disabled', true);
        $("#btnEndtest").attr('disabled', true);
        $("#divSectionButtons *").attr('disabled', true);
        $("#divParagraphQuestions").html('');
        $("#divTypingTest").show();
        $("#divQuestionPalleteview").hide();
        $("#btnInstruction").attr('disabled', true);
        $("#button_calc").attr('disabled', true);

        var cleantxt = currentQuestion.trim().replace(/(<([^>]+)>)/ig, '');
        cleantxt = cleantxt.replace(/&nbsp;/g, ' ');
        cleantxt = cleantxt.replace(/^\s+/g, '');
        cleantxt = cleantxt.replace(/&rsquo;/g, "'");
        //cleantxt = cleantxt.replace(/\r?\n|\r/, " ");
        //Type Test style code updated
        defaultText = cleantxt;

        current = 'current', success = 'success', warning = 'warning';
        arrayDefaultWord = defaultText.split(" ");
        arrayDefaultWordTemp = [];

        for (let i = 0; i < arrayDefaultWord.length; i++) {

            let temp1 = arrayDefaultWord[i].replace(/\n/g, ' ').split(' ');
            //let temp1 = arrayDefaultWord[i].replace(/\n/g, '');
            if (temp1.length > 1) {
                for (let j = 0; j < temp1.length; j++) {

                    if (temp1[j] == " ")
                        continue;

                    if (temp1[j].includes('<p>') && temp1[j].includes('</p>')) {
                        let tempTage = arrayDefaultWord[i].split('</p><p>');
                        if (tempTage.length > 1) {
                            arrayDefaultWordTemp.push(tempTage[0]);
                            arrayDefaultWordTemp.push('<p>');
                            arrayDefaultWordTemp.push('</p>');
                            arrayDefaultWordTemp.push(tempTage[1]);
                        }

                    }
                    else if (temp1[j].includes('<p>')) {
                        arrayDefaultWordTemp.push('<p>');
                        arrayDefaultWordTemp.push(temp1[j].substring(3, temp1[j].length))
                    }
                    else if (temp1[j].includes('</p>')) {

                        arrayDefaultWordTemp.push(temp1[j].substring(0, temp1[j].indexOf('</p>')))
                        arrayDefaultWordTemp.push('</p>');
                    }
                    else
                        arrayDefaultWordTemp.push(temp1[j]);
                }
            }
            else {

                if (arrayDefaultWord[i].includes('<p>') && arrayDefaultWord[i].includes('</p>')) {
                    let tempTage = arrayDefaultWord[i].split('</p><p>');
                    if (tempTage.length > 1) {
                        arrayDefaultWordTemp.push(tempTage[0]);
                        arrayDefaultWordTemp.push('<p>');
                        arrayDefaultWordTemp.push('</p>');
                        arrayDefaultWordTemp.push(tempTage[1]);
                    }

                }
                else if (arrayDefaultWord[i].includes('<p>')) {
                    arrayDefaultWordTemp.push('<p>');
                    arrayDefaultWordTemp.push(arrayDefaultWord[i].substring(3, arrayDefaultWord[i].length))

                }
                else if (arrayDefaultWord[i].includes('</p>')) {

                    arrayDefaultWordTemp.push(arrayDefaultWord[i].substring(0, arrayDefaultWord[i].indexOf('</p>')))
                    arrayDefaultWordTemp.push('</p>');
                }
                else
                    arrayDefaultWordTemp.push(arrayDefaultWord[i]);

                // arrayDefaultWordTemp.push(arrayDefaultWord[i]);
            }

        }

        arrayDefaultWordWithSpace = [];
        loadDefaultText();


        $("#divProgrammingOptions").html("");
        $("#divProgrammingOptions").css("display", "none");
        var typingtextElement = document.getElementById('txtTypingTest');
        var endTestElement = document.getElementById('btnTypeEndTest');
        var questionControl = document.getElementById('sQuestion');
        var hdnTypeTestResult = document.getElementById('hdnTypeTestResult');

        VeeTypingTest(typingtextElement, endTestElement, questionControl.innerText, currentQuestionID, hdnTypeTestResult);
        BindCorrectAnswer(typingtextElement);
    } catch (e) {
        PostJavascriptError("BindTypeTestControls", "Assessment - BindTypeTestControls: " + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function BindSubjectiveTypeControls() {
    try {
        $("#divSubjectiveType").show();
        $("#sQuestion").html(currentQuestion);
        $('#sQuestion').css("height", "");
        $('#sQuestion').css("overflow-y", "");

        $("#divProgrammingOptions").html("");
        $("#divProgrammingOptions").css("display", "none");
        $("#divQuestionOptions").css("display", "none");

        $('#SelectedFiles').html('');
        cnt = "";
        var txtSubjectiveType = document.getElementById('subjectiveEditor');
        txtSubjectiveType.addEventListener("keydown", SubjectiveKeyDown);
        txtSubjectiveType.addEventListener("keyup", SubjectiveKeyUp);
        BindCorrectAnswer(txtSubjectiveType);
    } catch (e) {
        PostJavascriptError("BindSubjectiveTypeControls", "Assessment - BindSubjectiveTypeControls: " + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function BindEssayTypeControls() {
    $("#divEssayType").show();
    $("#sQuestion").html(currentQuestion);
    $('#sQuestion').css("height", "");
    $('#sQuestion').css("overflow-y", "");

    $("#divProgrammingOptions").html("");
    $("#divProgrammingOptions").css("display", "none");
    $("#divQuestionOptions").css("display", "none");

    //var essayTypetextElement = document.getElementById('txtEssayType');

}


function BindCorrectAnswer(element) {
    try {
        var isMultipleOpt = '';
        if (currentQuestionType == QuestionTypeEnum.MCQWeightages) {
            isMultipleOpt = 1;
        }
        else {
            isMultipleOpt = currentIsMultipleOption;
        }
        switch (currentQuestionType) {
            case QuestionTypeEnum.SituationReaction:
            case QuestionTypeEnum.MCQ:
            case QuestionTypeEnum.MCQWeightages:
                switch (Number(isMultipleOpt)) {
                    case Number(MupltipleOptionEnum.Single):
                        var masterQuestionAnswer = _assessmentAnswerDB({ question_id: currentQuestionID }).get();
                        masterQuestionAnswer.forEach(function (element) {
                            $("input[id='" + DynamicControlPrefixEnum.Radio + element.exam_answer + "'] ").attr("checked", "checked");
                        });
                        break;

                    case Number(MupltipleOptionEnum.Multiple):
                        var masterQuestionAnswer = _assessmentAnswerDB({ question_id: currentQuestionID }).get();
                        masterQuestionAnswer.forEach(function (element) {
                            var splitStr = element.exam_answer.split(',');
                            for (var i = 0; i < splitStr.length; i++) {
                                $("input[id='" + DynamicControlPrefixEnum.CheckBox + splitStr[i] + "'] ").attr("checked", "checked");
                            }
                        });
                        break;
                }
                break;

            case QuestionTypeEnum.LinkertType:
            case QuestionTypeEnum.Psychometric:
                //var masterQuestionAnswer = _assessmentAnswerDB({ question_id: currentQuestionID }).first();

                //if (masterQuestionAnswer.exam_answer != "" && masterQuestionAnswer.exam_answer != null && masterQuestionAnswer.exam_answer != 0) {
                //    $("input[id='" + DynamicControlPrefixEnum.Radio + masterQuestionAnswer.sub_question_id + "'] ").attr("checked", "checked");
                //    $("input[id='" + DynamicControlPrefixEnum.Radio + masterQuestionAnswer.exam_answer + "'] ").attr("checked", "checked");
                //}

                var ques = _questionSetDB({ id: currentQuestionID }).first();
                let psychometericSubQusType = ques.psychometeric_sub_question_type_id;

                switch (psychometericSubQusType) {
                    case PsychometericSubQuestionTypeEnum.RatingScale:
                        switch (Number(currentIsMultipleOption)) {
                            case Number(MupltipleOptionEnum.Single):
                                var masterQuestionAnswer = _assessmentAnswerDB({ question_id: currentQuestionID }).get();

                                masterQuestionAnswer.forEach(function (element) {
                                    $("input[id='" + DynamicControlPrefixEnum.Radio + element.exam_answer + "'] ").attr("checked", "checked");
                                });
                                break;

                        }
                        break;

                    case PsychometericSubQuestionTypeEnum.ForcedChoice:

                        switch (Number(currentIsMultipleOption)) {
                            case Number(MupltipleOptionEnum.Single):
                                var masterQuestionAnswer = _assessmentAnswerDB({ question_id: currentQuestionID }).get();
                                let examanswer = "";
                                masterQuestionAnswer.forEach(function (element) {

                                    if (!element.exam_answer.includes("~")) {
                                        examanswer = element.sub_question_id + "~" + element.exam_answer;
                                    }
                                    else
                                        examanswer = element.exam_answer;

                                    if (element.exam_answer != "0") {
                                        $("input[name=mRadio]").each(function () {

                                            let subQuestionID = this.id.substring(2, this.id.length);
                                            if (!element.exam_answer.includes("~")) {
                                                if (subQuestionID == examanswer) {
                                                    $("input[id='" + this.id + "'] ").attr("checked", "checked");
                                                }
                                            }
                                            else {
                                                $("input[id='" + element.exam_answer + "'] ").attr("checked", "checked");
                                            }

                                        });
                                        $("input[name=lRadio]").each(function () {
                                            let subQuestionID = this.id.substring(2, this.id.length);
                                            if (!element.exam_answer.includes("~")) {
                                                if (subQuestionID == examanswer) {
                                                    $("input[id='" + this.id + "'] ").attr("checked", "checked");
                                                }
                                            }
                                            else {
                                                $("input[id='" + element.exam_answer + "'] ").attr("checked", "checked");
                                            }
                                        });
                                    }
                                });
                                break;

                        }
                        break;

                    case PsychometericSubQuestionTypeEnum.AdjectivesType:
                        switch (Number(currentIsMultipleOption)) {
                            case Number(MupltipleOptionEnum.Single):
                                var masterQuestionAnswer = _assessmentAnswerDB({ question_id: currentQuestionID }).get();
                                masterQuestionAnswer.forEach(function (element) {
                                    if (element.exam_answer != "0") {
                                        let splitStr = "";
                                        if (element.exam_answer.includes(",")) {
                                            splitStr = element.exam_answer.split(',');
                                        }
                                        else if (element.exam_answer.includes("^")) {
                                            splitStr = element.exam_answer.split('^');
                                        }
                                        else {
                                            splitStr = element.exam_answer.split(',');
                                        }
                                        for (var i = 0; i < splitStr.length; i++) {
                                            if (splitStr[i] != "") {
                                                let optionElement = ("#" + DynamicControlPrefixEnum.SpanOption) + splitStr[i];
                                                $(optionElement).removeAttr('draggable').removeClass('spanAnswer').addClass('spanUsedAnswer').css("pointer-events", "none");
                                                let subQuestionAnswerDiv = "#SubQAnwserDiv" + element.sub_question_id;
                                                let optionText = $(optionElement).text();
                                                //let addHTML = "<span class='dropedAnswer' name='" + DynamicControlPrefixEnum.SpanOption + splitStr[i] + "' id='" + DynamicControlPrefixEnum.SpanAnswer + DynamicControlPrefixEnum.SpanOption + splitStr[i] + "'>" + optionText + "<span onClick=removeElement('" + subQuestionAnswerDiv + "','spanD" + DynamicControlPrefixEnum.SpanOption + splitStr[i] + "','" + DynamicControlPrefixEnum.SpanAnswer + DynamicControlPrefixEnum.SpanOption + splitStr[i] + "','" + DynamicControlPrefixEnum.SpanOption + splitStr[i] + "') class='spanClose' id='spanD" + splitStr[i] + "'>X</span></span>";
                                                let addHTML = "<span class='adjective-list-items ui-sortable-handle' name='" + DynamicControlPrefixEnum.SpanOption + splitStr[i] + "' id='" + DynamicControlPrefixEnum.SpanAnswer + DynamicControlPrefixEnum.SpanOption + splitStr[i] + "'>" + optionText.substring(3, optionText.length) + "<a class='action'><span onClick=removeElement('" + subQuestionAnswerDiv + "','spanD" + DynamicControlPrefixEnum.SpanOption + splitStr[i] + "','" + DynamicControlPrefixEnum.SpanAnswer + DynamicControlPrefixEnum.SpanOption + splitStr[i] + "','" + DynamicControlPrefixEnum.SpanOption + splitStr[i] + "') class='lnr lnr-cross' id='spanD" + splitStr[i] + "'></span></a></span>";
                                                $(subQuestionAnswerDiv).append(addHTML);
                                            }
                                        }
                                    }
                                });

                                if (masterQuestionAnswer.length == 2) {
                                    let subQ1AnsDiv = "#SubQAnwserDiv" + masterQuestionAnswer[0].sub_question_id;
                                    let subQ2AnsDiv = "#SubQAnwserDiv" + masterQuestionAnswer[1].sub_question_id;
                                    if (($(subQ1AnsDiv).children().length) == adjective_EntityMinCount && ($(subQ2AnsDiv).children().length) == adjective_EntityMinCount) {
                                        $("#divQuestionSet").parent().find('span.spanAnswer').removeAttr('draggable').css("pointer-events", "none");

                                    }
                                }
                                break;

                        }
                        break;

                    default:
                        break;
                }

                break;

            case QuestionTypeEnum.Code_Simulation:
                var masterQuestionAnswer = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                var test;
                for (var i = 0; i < masterQuestionAnswer.listlanguage.length; i++) {
                    if (masterQuestionAnswer.listlanguage[i].IsSelected == 1) {
                        test = masterQuestionAnswer.listlanguage[i].exam_answer;
                    }
                }
                //var splitedData = test.split('@<$start>@');
                editor.setValue(test);
                // $("#editor_" + currentQuestionID + "").text(test);  
                setTimeout(function () {
                    editor.refresh();
                }, 1);

                break;

            case QuestionTypeEnum.TypingTest:
                var masterQuestionAnswer = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                //Bind UserAnswer in the control
                $('#txtTypingTest').val(masterQuestionAnswer.exam_answer.User_Answer);
                break;
            case QuestionTypeEnum.Paragraph:

                var masterQuestionAnswer = _assessmentAnswerDB({ question_id: currentQuestionID, sub_question_id: element.subquestion_id }).first();
                // var data = element.subquestion_id;          

                if (masterQuestionAnswer.exam_answer != "" && masterQuestionAnswer.exam_answer != null && masterQuestionAnswer.exam_answer != 0 && masterQuestionAnswer.exam_answer != "0") {
                    $("input[id='" + DynamicControlPrefixEnum.Radio + masterQuestionAnswer.sub_question_id + "'] ").attr("checked", "checked");
                    $("input[id='" + DynamicControlPrefixEnum.Radio + masterQuestionAnswer.exam_answer + "'] ").attr("checked", "checked");
                }

                break;
            case QuestionTypeEnum.SubjectiveType:
                if (element == QuestionTypeEnum.SubjectiveTypeManualEval) {
                    var masterQuestionAnswer = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                    if (masterQuestionAnswer.exam_answer != null) {
                        $('#txtSubjectiveManualEvaluation').val(masterQuestionAnswer.exam_answer);
                    }
                    else {
                        $('#txtSubjectiveManualEvaluation').val('');
                    }
                }
                else {
                    var masterQuestionAnswer = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                    //Bind UserAnswer in the control
                    if (masterQuestionAnswer.exam_answer == '0') {
                        masterQuestionAnswer.exam_answer = "";
                    }
                    var subjectiveFiles = masterQuestionAnswer.listSubjectiveS3;
                    var data;

                    if (subjectiveFiles.length > 0) {
                        $("input[id='toggleCheckbox'] ").attr("checked", "checked");
                        $("#uploadFile").show();
                        $("#altSubfile").show();
                    }
                    else {
                        $('#toggleCheckbox').prop('checked', false);
                        $("#uploadFile").hide();
                    }

                    for (var i = 0; i < subjectiveFiles.length; i++) {

                        data = subjectiveFiles[i].S3_Id;
                        var splitFile = data.split('/');
                        var orginalFileName = splitFile[2];
                        var filename = subjectiveFiles[i].Bucket_Id;

                        //$('#SelectedFiles').append("<div id=uploadfile" + i + " style='background-color:#F2F3F4;color:darkblue;padding:5px 5px 5px 5px;width=100px;float:left'  title='" + filename + "' >" + filename + " <span onclick=RemoveFile('" + i + "')  class='fa fa-remove' style='cursor:pointer;float:right'></span></div>");
                        $('#SelectedFiles').append("<div id=uploadfile" + i + " class='adjective-list-items ui-sortable-handle'  title='" + orginalFileName + "' value='" + data + "'>" + filename + "<span style='cursor:pointer' onclick=RemoveFile('" + i + "')  class='action lnr lnr-cross'></span></div>");
                    }



                    $('#txtSubjectiveType').summernote('code', masterQuestionAnswer.exam_answer);
                    var txtSubText = document.getElementById('subjectiveEditor');
                    var questionDetail = _questionSetDB({ id: String(currentQuestionID) }).first();
                    cnt = (Number(questionDetail.maxchar) - (parseInt(txtSubText.textContent.length))).toString();
                    $("#spnCharCount").html("Characters used - " + cnt);
                }

                break;

            case QuestionTypeEnum.EssayType:
                var masterQuestionAnswer = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                //Bind UserAnswer in the control
                if (masterQuestionAnswer.exam_answer == '0') {
                    masterQuestionAnswer.exam_answer = "";
                }
                if (masterQuestionAnswer.s3_id != null) {
                    if (masterQuestionAnswer.s3_id.includes("Source")) {
                        DownloadS3DataFromS3();
                        $('#txtEssayType').val(EssayS3Data);
                    }
                    else {
                        $('#txtEssayType').val(masterQuestionAnswer.exam_answer);
                    }
                }

                if (masterQuestionAnswer.exam_answer != null) {
                    if (masterQuestionAnswer.exam_answer.includes("Source")) {
                        DownloadS3DataFromS3();
                        $('#txtEssayType').val(EssayS3Data);
                    }
                    else {
                        $('#txtEssayType').val(masterQuestionAnswer.exam_answer);
                    }
                }

                break;
        }

    } catch (e) {
        PostJavascriptError("BindCorrectAnswer", "Assessment - Bind Correct Answer : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function BindQuestionData(element) {
    try {
        currentSNo = element.sno;
        currentSectionID = element.section_id;
        currentSectionQuestionSNo = element.section_sno;
        currentSectionName = element.section_name;
        currentQuestionID = element.id;
        currentIsMultipleOption = element.IsMultipleOption;
        currentQuestion = element.question;
        currentQuestionType = element.question_type;
        currentSectionDuration = element.section_duration;
        CurrentProblemCode = element.problem_Code;
        CurrentProblemId = element.problem_Id;
        is_media_type = element.is_Media_type;
        is_multiple_facet = element.is_multiple_facet;

        if (isPreviousButton == "1" || isPreviousButton == 1) {
            btnPreviousSettings(currentSNo);
        }

        DisableControls();

        var sectionCount = _sectionDetailsDB({ section_id: Number(currentSectionID) }).first().section_count;
        currentSectionQuestionCount = sectionCount;

        $("#sQuestionSNo").text(currentSectionQuestionSNo + ".");

        if (currentQuestionType == QuestionTypeEnum.Code_Simulation) {
            $("#sCodingQuestionSNo").text(currentSectionQuestionSNo + ".");
            $("#sCodingCurrentQuestoinSNo").text(currentSectionQuestionSNo);
            $("#sCodingTotalQuestion").text(currentSectionQuestionCount);
        }
        $("#sQuestion").text(currentQuestion);
        $("#sQuestionMultimedia").html('');
        if (is_media_type == true) {
            var SectionWiseQuestionsMedia = _multimediaQuestion({ question_id: currentQuestionID }).get();

            if (SectionWiseQuestionsMedia != null) {
                for (var i = 0; i < SectionWiseQuestionsMedia.length; i++) {
                    $("#sQuestionMultimedia").append("<div id='myElement_" + currentQuestionID + "_" + i + "'></div><br/>");
                    $("#sQuestionMultimedia").append("<script  type ='text/javascript'> $('document').ready(function() {var playerInstance = jwplayer('myElement_" + currentQuestionID + "_" + i + "'); playerInstance.setup({ file: '" + SectionWiseQuestionsMedia[i].file + "', mediaid: 'xxxxYYYY', Mimetype: '" + SectionWiseQuestionsMedia[i].mimetype + "',image:'" + SectionWiseQuestionsMedia[i].backdropimage + "'});}); </script>");
                }
            }
        }
        $("#divSectionName").text(currentSectionName);
        $("#sCurrentQuestoinSNo").text(currentSectionQuestionSNo);
        $("#sTotalQuestion").text(currentSectionQuestionCount);

        if (totalNoofQuestions == currentSNo) {
            $("#btnMarkForReview").hide();
            $("#btnNext").text('Submit');

        } else {
            var sectionDetailsTmp = _sectionDetailsDB({ section_id: { ">": currentSectionID }, Last_ElapsedTimeInHours: { "!is": "00:00:00" } }).first();
            if (sectionDetailsTmp != false) {
                $("#btnNext").text('Next');
                $("#btnNext").append(' <i class="fa fa-chevron-left  p-r-10"></i>');
                if (isQuestionPallete == "1") {
                    $("#btnMarkForReview").show();
                }
                else {
                    $("#btnMarkForReview").hide();
                }
            }
            else {
                if (currentSectionQuestionSNo == Number(currentSectionQuestionCount)) {
                    $("#btnNext").text('Submit');
                    $("#btnMarkForReview").hide();
                }
                else {
                    $("#btnNext").text('Next');
                    $("#btnNext").append(' <i class="fa fa-chevron-left  p-r-10"></i>');
                    if (isQuestionPallete == "1") {
                        $("#btnMarkForReview").show();
                    }
                    else {
                        $("#btnMarkForReview").hide();
                    }
                }
            }
        }

        var sectionDetails = _sectionDetailsDB({ section_id: { "<": currentSectionID }, Last_ElapsedTimeInHours: { "!is": "00:00:00" } }).first();
        if (sectionDetails == false) {
            if (Number(currentSectionQuestionSNo) < 2) {
                $("#btnPrevious").hide();
            }
            else {
                BindPreviousSettings();
            }
        }
    } catch (e) {
        PostJavascriptError("BindQuestionData", "Assessment - BindQuestionData : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

$('#btnViewSimulatior').click(function () {
    iswindowproct = true;
})
$('#btnSubjectiveHtmlViewCls').click(function () {
    iswindowproct = false;
})

function DisableControls() {
    try {
        $('#divSubjectiveManualEvaluation').hide();
        $('#btnViewSimulatior').hide();
        $("#divPalleteHeader").css("background", "");
        $("#divPalleteHeader").css("height", "");
        $("#divPalleteFooter").addClass("col-md-9");
        $("#divPalleteFooter").removeClass("col-md-12");
        $("#btnNext").attr('disabled', false);
        $("#btnPrevious").attr('disabled', false);
        $("#btnMarkForReview").attr('disabled', false);
        $("#btnEndtest").attr('disabled', false);
        $("#btnInstruction").attr('disabled', false);
        if (Number(_testPinDB().first().is_Scientific_calc) == 1) {
            $("#button_calc").show();
            $("#button_calc").attr('disabled', false);
        }
        else {
            $("#button_calc").hide();
        }


        $("#collapse-widget").show();
        $('#divNavbar').attr('style', 'display: flex  !important');
        $('#questions-nav-info').attr('style', 'display: none !important');
        $('#questionProblemAreaContent').attr('style', 'display: none !important');
        $("#AllOptionQuestionWithoutCoding").attr('style', 'display: flex !important');
        $("#sQuestionSNo").show();
        $("#subjectiveUpload").hide();
        $("#adjectiveHelp").hide();
        $('#sQuestion').removeClass("whileparagraph");
        $('#altSubfile').hide();

        $('#divQuestionOptions').css("word-break", "break-word");
        $('#divProgrammingOptions').css("word-break", "break-word");

        if (currentQuestionType == (QuestionTypeEnum.Code_Simulation)) {
            $("#sQuestionSNo").hide();
            $("#divcodingSimulation").show();
            $("#divTypingTest").hide();
            $("#divSubjectiveType").hide();
            $("#divEssayType").hide();
            $("#paragraphQuestion").hide();
            $("#sQuestionMultimedia").hide();
            if (isQuestionPallete == '1') {
                $("#divQuestionPalleteview").show();
            }
            else {
                $("#divQuestionPalleteview").hide();
                $("#collapse-widget").hide();
            }
            $("#divQuestionPalleteview").css("", "");
            $('#sQuestion').css("max-height", "150px");
            $('#sQuestion').css("overflow-y", "auto");
            //$('#divQuestionOptions').css("word-break", "break-word");
            //$('#divProgrammingOptions').css("word-break", "break-word");
            $('#divNavbar').attr('style', 'display: none !important');
            $('#questions-nav-info').attr('style', 'display: flex  !important');
            $('#questionProblemAreaContent').attr('style', 'display: flex !important; margin-top:-16px !important');
            //$('#questionProblemAreaContent').attr('style', 'display: flex !important');
            $("#AllOptionQuestionWithoutCoding").attr('style', 'display: none !important');

            $("#codeResult").removeClass("error-badge").empty();
            $("#testcase").empty();
            var problemId = "#problem-tab";
            showCodingTabcontrol(problemId);
        }

        if (currentQuestionType == (QuestionTypeEnum.TypingTest)) {
            $("#divSection li").css("cursor", "not-allowed");
            $("#divSection a").css("pointer-events", "none");
            $("#divcodingSimulation").hide();
            $("#divTypingTest").show();
            $("#divSubjectiveType").hide();
            $("#divEssayType").hide();
            $("#paragraphQuestion").hide();
            $("#divQuestionPalleteview").hide();
            $("#sQuestionMultimedia").hide();
            $("#divQuestionPalleteview").css("display", "none");
            $('#sQuestion').css("max-height", "150px");
            $('#sQuestion').css("overflow-y", "auto");
            $("#divPalleteHeader").css("background", "#ccc");
            $("#divPalleteHeader").css("height", "51px");
            $("#divPalleteFooter").removeClass("col-md-9");
            $("#divPalleteFooter").addClass("col-md-12");
            //$('#divQuestionOptions').css("word-break", "break-word");
            //$('#divProgrammingOptions').css("word-break", "break-word");
            $('#sQuestion').css("word-break", "break-word");
            if (isQuestionPallete == '1') {
                //if ($('#collapse-widget').text() == "CLOSE") {
                //    $('#collapse-widget').click();
                //}
                if ($('#collapse-widget').text() != 'OPEN') {
                    $('#collapse-widget').click();
                }
                //$('#collapse-widget').click();
            }
            $("#collapse-widget").hide();

        }

        if (currentQuestionType == (QuestionTypeEnum.Paragraph)) {
            $("#divcodingSimulation").hide();
            $("#divTypingTest").hide();
            $("#divSubjectiveType").hide();
            $("#divEssayType").hide();
            $("#paragraphQuestion").show();
            if (isQuestionPallete == '1') {
                $("#divQuestionPalleteview").show();
            }
            else {
                $("#divQuestionPalleteview").hide();
                $("#collapse-widget").hide();
            }
            $("#sQuestionMultimedia").show();
            $("#divQuestionPalleteview").css("", "");
            $('#sQuestion').addClass("whileparagraph");
            $('#sQuestion').removeAttr("style");
            //$('#sQuestion').css("max-height", "150px");
            //$('#sQuestion').css("overflow-y", "auto");

            //$('#divQuestionOptions').css("word-break", "break-word");
            //$('#divProgrammingOptions').css("word-break", "break-word");
            $('#sQuestion').css("word-break", "break-word");

        }
        if (String(currentQuestionType) == String(QuestionTypeEnum.MCQ) || String(currentQuestionType) == String(QuestionTypeEnum.MCQWeightages)) {
            $("#divcodingSimulation").hide();
            $("#divTypingTest").hide();
            $("#divSubjectiveType").hide();
            $("#divEssayType").hide();
            $("#paragraphQuestion").hide();
            if (isQuestionPallete == '1') {
                $("#divQuestionPalleteview").show();
            }
            else {
                $("#divQuestionPalleteview").hide();
                $("#collapse-widget").hide();
            }
            $("#sQuestionMultimedia").show();
            $("#divQuestionPalleteview").css("", "");
            $('#sQuestion').css("max-height", "");
            $('#sQuestion').css("overflow-y", "");
            //$('#divQuestionOptions').css("word-break", "break-word");
            //$('#divProgrammingOptions').css("word-break", "break-word");
        }
        if (currentQuestionType == (QuestionTypeEnum.SubjectiveType)) {

            var flag = window.localStorage.getItem("IsSubjectiveViewSimulationCompanyId");
            if (flag == _testPinDB().first().company_id) {
                $('#btnViewSimulatior').show();
            }
            else {
                $('#btnViewSimulatior').hide();
            }

            $("#btnToggle").show();
            $("#divcodingSimulation").hide();
            $("#divTypingTest").hide();
            $("#divSubjectiveType").show();
            $("#divEssayType").hide();
            $("#paragraphQuestion").hide();
            $("#sQuestionMultimedia").show();
            if (isQuestionPallete == '1') {
                $("#divQuestionPalleteview").show();
            }
            else {
                $("#divQuestionPalleteview").hide();
                $("#collapse-widget").hide();
            }
            $("#divQuestionPalleteview").css("", "");
            $('#sQuestion').css("max-height", "");
            $('#sQuestion').css("overflow-y", "");
            //$('#divQuestionOptions').css("word-break", "break-word");
            //$('#divProgrammingOptions').css("word-break", "break-word");
        }
        if (currentQuestionType == (QuestionTypeEnum.EssayType)) {
            $("#btnToggle").hide();
            $("#divcodingSimulation").hide();
            $("#divTypingTest").hide();
            $("#divSubjectiveType").hide();
            $("#divEssayType").show();
            $("#paragraphQuestion").hide();
            $("#sQuestionMultimedia").hide();
            if (isQuestionPallete == '1') {
                $("#divQuestionPalleteview").show();
            }
            else {
                $("#divQuestionPalleteview").hide();
                $("#collapse-widget").hide();
            }
            $("#divQuestionPalleteview").css("", "");
            $('#sQuestion').css("max-height", "");
            $('#sQuestion').css("overflow-y", "");
            //$('#divQuestionOptions').css("word-break", "break-word");
            //$('#divProgrammingOptions').css("word-break", "break-word");
        }
        if (currentQuestionType == (QuestionTypeEnum.Psychometric)) {
            $("#divcodingSimulation").hide();
            $("#divTypingTest").hide();
            $("#divSubjectiveType").hide();
            $("#divEssayType").hide();
            $("#paragraphQuestion").hide();
            $("#sQuestionMultimedia").hide();
            if (isQuestionPallete == '1') {
                $("#divQuestionPalleteview").show();
            }
            else {
                $("#divQuestionPalleteview").hide();
                $("#collapse-widget").hide();
            }
            $("#divQuestionPalleteview").css("", "");
            $('#sQuestion').css("max-height", "");
            $('#sQuestion').css("overflow-y", "");
            $('#divPsychometricOptions').css("word-break", "break-word");
            //$('#divQuestionOptions').css("word-break", "break-word");
            //$('#divProgrammingOptions').css("word-break", "break-word");

            var ques = _questionSetDB({ id: currentQuestionID }).first();
            let psychometericSubQusType = ques.psychometeric_sub_question_type_id;

            if (psychometericSubQusType == PsychometericSubQuestionTypeEnum.RatingScale) {

                $("#sQuestionMultimedia").hide();
                $("#divQuestionPalleteview").css("", "");
                $('#sQuestion').css("max-height", "");
                $('#sQuestion').css("overflow-y", "");
                //$('#divQuestionOptions').css("word-break", "break-word");
                //$('#divProgrammingOptions').css("word-break", "break-word");
                if (is_multiple_facet == 2) {
                    $("#btnMarkForReview").attr('disabled', true);
                }
            }

            if (psychometericSubQusType == PsychometericSubQuestionTypeEnum.AdjectivesType) {

                $("#AdjectiveSubQuestion").show();
                $("#adjectiveHelp").show();
            }
            else {
                $("#AdjectiveSubQuestion").hide();
                $("#adjectiveHelp").hide();
            }

        }
        window.mobilecheck = DetectMobileBrowser();
    } catch (e) {
        PostJavascriptError("DisableControls", "Assessment - DisableControls : " + e.message + ":" + "Testpin:" + _logDetails);
    }


}


$("#divQuestionOptions").on("change", "input[type=radio]", function () {
    try {
        switch (currentQuestionType) {
            case QuestionTypeEnum.SituationReaction:
            case QuestionTypeEnum.MCQ:
                if (currentIsMultipleOption == Number(MupltipleOptionEnum.Single)) {
                    var id = $(this).attr("id");
                    previousExamAnswer = id.replace(DynamicControlPrefixEnum.Radio, '');
                    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: previousExamAnswer });

                    var questionPalID;

                    if (previousExamAnswer != '' && previousExamAnswer != null && previousExamAnswer != undefined && previousExamAnswer != 0) {
                        questionPalID = QuestionPalleteEnum.Answered;
                    }
                    else {
                        questionPalID = QuestionPalleteEnum.NotAnswered;
                    }

                    _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });
                }
                break;
            case QuestionTypeEnum.Psychometric:
                var ques = _questionSetDB({ id: currentQuestionID }).first();
                let psychometericSubQusType = ques.psychometeric_sub_question_type_id;

                if (psychometericSubQusType == PsychometericSubQuestionTypeEnum.RatingScale) {
                    if (currentIsMultipleOption == Number(MupltipleOptionEnum.Single)) {
                        var id = $(this).attr("id");
                        previousExamAnswer = id.replace(DynamicControlPrefixEnum.Radio, '');
                        _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: previousExamAnswer });

                        var questionPalID;

                        if (previousExamAnswer != '' && previousExamAnswer != null && previousExamAnswer != undefined && previousExamAnswer != 0) {
                            questionPalID = QuestionPalleteEnum.Answered;
                        }
                        else {
                            questionPalID = QuestionPalleteEnum.NotAnswered;
                        }

                        _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });
                    }
                }
                break;
        }

    } catch (e) {
        PostJavascriptError("divQuestionOptions Change", "Assessment - divQuestionOptions Change : " + e.message + ":" + "Testpin:" + _logDetails);
    }

});

$("#divSubjectiveType").on('change', function (e) {
    try {
        var _answer = $("#txtSubjectiveType").summernote('code');
        _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: _answer });
        var questionPalID;

        if (_answer != '' && _answer != null && _answer != undefined && _answer != 0) {
            questionPalID = QuestionPalleteEnum.Answered;
        }
        else {
            questionPalID = QuestionPalleteEnum.NotAnswered;
        }

        _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });
    } catch (e) {
        PostJavascriptError("divSubjectiveType Change", "Assessment - divSubjectiveType Change : " + e.message + ":" + "Testpin:" + _logDetails);
    }

});

function UpdateSubAns() {
    var _answer = $("#txtSubjectiveType").summernote('code');
    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: _answer });
    var questionPalID;

    if (_answer != '' && _answer != null && _answer != undefined && _answer != 0) {
        questionPalID = QuestionPalleteEnum.Answered;
    }
    else {
        questionPalID = QuestionPalleteEnum.NotAnswered;
    }

    _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });
}


$("#divSubjectiveManualEvaluation").on("input", function () {
    var _answer = $("#txtSubjectiveManualEvaluation").val();
    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: _answer });
    var questionPalID;

    if (_answer != '' && _answer != null && _answer != undefined && _answer != 0) {
        questionPalID = QuestionPalleteEnum.Answered;
    }
    else {
        questionPalID = QuestionPalleteEnum.NotAnswered;
    }

    _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });
});



//$("#txtEssayType").on('change', function (e) {
//    var _answer = $("#txtEssayType").val().trim();
//    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: _answer });
//    var questionPalID;

//    if (_answer != '' && _answer != null && _answer != undefined && _answer != 0) {
//        questionPalID = QuestionPalleteEnum.Answered;
//    }
//    else {
//        questionPalID = QuestionPalleteEnum.NotAnswered;
//    }

//    _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });
//});


$(document).on('change', '[type=checkbox]', function (e) {
    try {
        var ExamAnswer = '';
        var isMultipleOpt = '';
        if (currentQuestionType == QuestionTypeEnum.MCQWeightages) {
            isMultipleOpt = 1;
        }
        else {
            isMultipleOpt = currentIsMultipleOption;
        }
        switch (currentQuestionType) {
            case QuestionTypeEnum.SituationReaction:
            case QuestionTypeEnum.MCQ:
            case QuestionTypeEnum.MCQWeightages:

                if (isMultipleOpt == Number(MupltipleOptionEnum.Multiple)) {
                    $('input:checkbox[name="mcqcheckbox"]:checked').each(function () {
                        var id = $(this).attr("id");
                        if (ExamAnswer == '') {
                            ExamAnswer = id.replace(DynamicControlPrefixEnum.CheckBox, '');
                        }
                        else {
                            ExamAnswer = ExamAnswer + ',' + id.replace(DynamicControlPrefixEnum.CheckBox, '');
                        }

                    });
                    previousExamAnswer = ExamAnswer;
                    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: previousExamAnswer });

                    var questionPalID;

                    if (previousExamAnswer != '' && previousExamAnswer != null && previousExamAnswer != undefined && previousExamAnswer != 0) {
                        questionPalID = QuestionPalleteEnum.Answered;
                    }
                    else {
                        questionPalID = QuestionPalleteEnum.NotAnswered;
                    }
                    _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });
                }
                break;
        }
    } catch (e) {
        PostJavascriptError("checkbox Change", "Assessment - checkbox Change : " + e.message + ":" + "Testpin:" + _logDetails);
    }

});


//$("#divPsychometricQuestions").on("change", "input[type=radio]", function () {

//    switch (currentQuestionType) {
//        case QuestionTypeEnum.Psychometric:
//            var _subquestionid = 0;
//            var _optionid = 0;
//            var loopid = 0;

//            $("input[type='radio']:checked").each(function () {
//                if (loopid == 0) {
//                    _subquestionid = $(this).attr('id');
//                    _subquestionid = _subquestionid.replace(DynamicControlPrefixEnum.Radio, '');
//                    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ sub_question_id: _subquestionid });
//                }
//                else {
//                    _optionid = $(this).attr('id');
//                    _optionid = _optionid.replace(DynamicControlPrefixEnum.Radio, '');
//                    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: _optionid });
//                }
//                loopid++;
//            });

//            var questionPalID;

//            if (_subquestionid != '' && _subquestionid != null && _subquestionid != undefined && _subquestionid != 0) {
//                questionPalID = QuestionPalleteEnum.Answered;
//            }
//            else {
//                questionPalID = QuestionPalleteEnum.NotAnswered;
//            }

//            _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });

//            break;
//    }
//});

//$("#divPsychometricOptions").on("change", "input[type=radio]", function () {
//    switch (currentQuestionType) {
//        case QuestionTypeEnum.Psychometric:
//            var _optionid = 0;

//            $("input[type='radio']:checked").each(function () {
//                _optionid = $(this).attr('id');
//                _optionid = _optionid.replace(DynamicControlPrefixEnum.Radio, '');
//            });
//            _assessmentAnswerDB({ question_id: currentQuestionID }).update({ exam_answer: _optionid });

//            var questionPalID;

//            if (_optionid != '' && _optionid != null && _optionid != undefined && _optionid != 0) {
//                questionPalID = QuestionPalleteEnum.Answered;
//            }
//            else {
//                questionPalID = QuestionPalleteEnum.NotAnswered;
//            }

//            _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });

//            break;
//    }
//});

$("#divParagraphQuestions").on("change", "input[type=radio]", function () {
    try {
        switch (currentQuestionType) {
            case QuestionTypeEnum.Paragraph:
                var _optionid = 0;
                var loopid = 0;
                var _paragraphsubquestionid = 0;
                $("input[type='radio']:checked").each(function () {
                    if (loopid == 0) {
                        _paragraphsubquestionid = $(this).val();

                        _paragraphsubquestionid = _paragraphsubquestionid.replace(DynamicControlPrefixEnum.Radio, '');
                        var subquestion = _questionOptionSetDB({ question_id: currentQuestionID, id: _paragraphsubquestionid }).first();

                        _assessmentAnswerDB({ question_id: currentQuestionID, sub_question_id: subquestion.sub_question_id }).update({ exam_answer: _paragraphsubquestionid });
                    }
                    else {
                        _optionid = $(this).val();
                        _optionid = _optionid.replace(DynamicControlPrefixEnum.Radio, '');
                        var subquestion = _questionOptionSetDB({ question_id: currentQuestionID, id: _optionid }).get();
                        _assessmentAnswerDB({ question_id: currentQuestionID, sub_question_id: subquestion[0].sub_question_id }).update({ exam_answer: _optionid });
                    }
                    loopid++;
                });
                var questionPalID;

                if (_paragraphsubquestionid != '' && _paragraphsubquestionid != null && _paragraphsubquestionid != undefined && _paragraphsubquestionid != 0) {
                    var questionPalID;

                    if (_optionid != '' && _optionid != null && _optionid != undefined && _optionid != 0) {
                        questionPalID = QuestionPalleteEnum.Answered;
                    }
                    else {
                        questionPalID = QuestionPalleteEnum.NotAnswered;
                    }
                    _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });
                    questionPalID = QuestionPalleteEnum.Answered;
                }
                else {
                    questionPalID = QuestionPalleteEnum.NotAnswered;
                }
                _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });
                break;
        }
    } catch (e) {
        PostJavascriptError("divParagraphQuestions Change", "Assessment - divParagraphQuestions Change : " + e.message + ":" + "Testpin:" + _logDetails);
    }

});

function LoadQuestionPallete() {
    try {
        $("#questions").empty();
        switch (durationType) {
            case DurationTypeEnum.ExamWise:
            case DurationTypeEnum.SectionWise:
                _questionSetDB({ section_id: currentSectionID }).each(function (element) {
                    var sectionSNo = _sectionDetailsDB({ section_id: Number(currentSectionID) }).first();
                    var functionName = 'GetPalleteQuestion(this,"' + sectionSNo.SNo + '")';
                    switch (Number(element.Question_Palette_Enum_Id)) {
                        case Number(QuestionPalleteEnum.Answered):
                            $("#questions").append("<span class='question answered' id='" + element.sno + "' onclick='" + functionName + "' >" + element.section_sno + "</span>");
                            break;

                        case Number(QuestionPalleteEnum.NotAnswered):

                            $("#questions").append("<div class='question not-answer' id='" + element.sno + "' onclick='" + functionName + "' >" + element.section_sno + "</span>");
                            break;
                        case Number(QuestionPalleteEnum.MarkForReview):
                            $("#questions").append("<div class='question mark-for-review' id='" + element.sno + "' onclick='" + functionName + "' >" + element.section_sno + "</span>");
                            break;
                        default:
                            $("#questions").append("<div class='question not-visit' id='" + element.sno + "' onclick='" + functionName + "' >" + element.section_sno + "</span>");
                            break;
                    }
                });
                break;

        }
    }
    catch (e) {
        PostJavascriptError("LoadQuestionPallete", "Assessment - LoadQuestionPallete : " + e.message + ":" + "Testpin:" + _logDetails);
        throw e;
    }
}

function GetPalleteQuestion(element, sectionSno) {

    AutomaticInvokeFlag = false;
    try {
        MCQAnswerupdate();
        typingpromiseResult = null;
        _Qelement = element;
        _Qsection = sectionSno;
        if (isDoubleClicked($(this))) return;
        typingpromiseResult = new Promise(function (resolve, reject) {
            InvokeTypingTest(resolve);
        });

        typingpromiseResult.then(result => BindQuestionPalleteInfo());

    } catch (e) {
        PostJavascriptError("GetPalleteQuestion", "Assessment - GetPalleteQuestion : " + e.message + ":" + "Testpin:" + _logDetails);
        throw e;
    }

}

function BindQuestionPalleteInfo() {
    try {
        element = _Qelement;
        sectionSno = _Qsection;

        $("#divloading").show();
        lastSectionElapsedTime = $("#future_date").text();
        palleteElementValues = '';
        palleteSectionSno = '';

        palleteElementValues = element;
        palleteSectionSno = sectionSno;
        isNavigation = 1;
        ProcessEventLog(ClickEvent.QuestionPallete);
        typingpromiseResult = null;
    } catch (e) {
        PostJavascriptError("BindQuestionPalleteInfo", "Assessment - BindQuestionPalleteInfo : " + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function isDoubleClicked(element) {
    try {
        //if already clicked return TRUE to indicate this click is not allowed

        if (element.data("isclicked")) return true;

        //mark as clicked for 1 second
        element.data("isclicked", true);
        setTimeout(function () {
            element.removeData("isclicked");
        }, 800);

        //return FALSE to indicate this click was allowed
        return false;

    } catch (e) {
        PostJavascriptError("isDoubleClicked", "Assessment - isDoubleClicked : " + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function BindPalleteQuestion() {
    try {
        clearInputControls();
        currentSNo = palleteElementValues.id;

        switch (durationType) {
            case DurationTypeEnum.ExamWise:
                BindQuestion(currentSNo, QuestionMode.NavigateQuestion);
                break;
            case DurationTypeEnum.SectionWise:
                _last_elapsedTime = $("#future_date").text();
                _sectionDetailsDB({ section_id: Number(previousSectionId) }).update({ Last_ElapsedTimeInHours: _last_elapsedTime });
                BindSectionWiseQuestion(palleteSectionSno, QuestionMode.NavigateQuestion);
            default:
        }

    } catch (e) {
        PostJavascriptError("BindPalleteQuestion", "Assessment - BindPalleteQuestion : " + e.message + ":" + "Testpin:" + _logDetails);
        throw e;
    }
}

function FreezeTimer() {
    try {
        $("#pauseBtnhms").val("Pause");
        $("#pauseBtnhms").click();
    } catch (e) {
        throw e;
    }
}

function UnfreezeTimer() {
    try {
        $("#pauseBtnhms").val("Start");
        $("#pauseBtnhms").click();
    } catch (e) {
        throw e;
    }
}

function HandleTimerButton() {
    try {
        var value = $("#pauseBtnhms").val();

        if (value == "Pause") {

            clearInterval(TimerHandle);
        }
        else {
            if (TimerHandle != null) {
                clearInterval(TimerHandle);
            }
            var output = $("#future_date").text();

            timeString = output;
            var splitStr = timeString.split(':');

            CountDownTimer(splitStr[0], splitStr[1], splitStr[2], $("#future_date"));
        }
    } catch (e) {
        PostJavascriptError("HandleTimerButton", "Assessment - HandleTimerButton : " + e.message + ":" + "Testpin:" + _logDetails);
        throw e;
    }
}

function PostJavascriptError(methodName, error) {
    try {
        $("#divloading").hide();
        var requestData = {
            class_name: "Assessment-js",
            method_name: methodName,
            exception_message: error,
            os_platform: window.localStorage.getItem("browserName")
        };
        $.ajax({
            url: "/ErrorHandler/PostJavascriptError",
            type: "POST",
            dataType: 'json',
            //data: '{message : "' + error + '"}',
            data: JSON.stringify(requestData),
            contentType: 'application/json;charset=utf-8',
            success: function (response) {
            }
        });
    } catch (e) {

    }
}

function BindMediaControlTypes() {
    try {
        $("#sQuestionMultimedia").html('');
        $('#divPdfView').html('');
        //if (is_media_type == true) {

        var SectionWiseQuestionsMedia = _multimediaQuestion({ question_id: currentQuestionID }).get();
        if (SectionWiseQuestionsMedia != null) {
            for (var i = 0; i < SectionWiseQuestionsMedia.length; i++) {
                if (SectionWiseQuestionsMedia[i].s3_id != null) {
                    if (SectionWiseQuestionsMedia[i].mediatype != 'pdf') {
                        $("#sQuestionMultimedia").append("<div id='myElement_" + currentQuestionID + "_" + i + "'></div><br/>");
                        $("#sQuestionMultimedia").append("<script  type ='text/javascript'> $('document').ready(function() {var playerInstance = jwplayer('myElement_" + currentQuestionID + "_" + i + "'); playerInstance.setup({ file: '" + SectionWiseQuestionsMedia[i].file + "', mediaid: 'xxxxYYYY', Mimetype: '" + SectionWiseQuestionsMedia[i].mimetype + "',image:'" + SectionWiseQuestionsMedia[i].backdropimage + "'});}); </script>");
                    }
                    else {
                        $("#sQuestionMultimedia").append("<a href='#' data-toggle='modal' data-target='#divMultimediaPdfView'>Click here</a>  <span>to View file</span><br/>");
                        //$('#divPdfView').append("<embed id='embedPdfView_" + currentQuestionID + "_" + i + "' src='" + SectionWiseQuestionsMedia[i].file + "' style='min-height:500px;' width='100%'>");
                        $('#divPdfView').append("<embed id='embedPdfView_" + currentQuestionID + "_" + i + "' src='" + SectionWiseQuestionsMedia[i].file + "#toolbar=0' style='min-height:500px;' width='100%'>");
                    }


                }
            }
        }
        //}
    } catch (e) {
        PostJavascriptError("BindMediaControlTypes", "Assessment - BindMediaControlTypes : " + e.message + ":" + "Testpin:" + _logDetails);
    }

}


function BindMediaControlSubQuestionTypes() {
    try {
        $("#sQuestionMultimedia").html('');

        //if (is_media_type == true) {

        var SectionWiseQuestionsMedia = _multimediaQuestion({ sub_question_id: subquestion_id }).get();

        if (SectionWiseQuestionsMedia != null) {
            for (var i = 0; i < SectionWiseQuestionsMedia.length; i++) {
                $("#sQuestionMultimedia").append("<div id='myElement_" + subquestion_id + "_" + i + "'></div><br/>");
                $("#sQuestionMultimedia").append("<script  type ='text/javascript'> $('document').ready(function() {var playerInstance = jwplayer('myElement_" + subquestion_id + "_" + i + "'); playerInstance.setup({ file: '" + SectionWiseQuestionsMedia[i].file + "', mediaid: 'xxxxYYYY', Mimetype: '" + SectionWiseQuestionsMedia[i].mimetype + "',image:'" + SectionWiseQuestionsMedia[i].backdropimage + "'});}); </script>");
            }
        }
        // }
    } catch (e) {
        PostJavascriptError("BindMediaControlSubQuestionTypes", "Assessment - BindMediaControlSubQuestionTypes : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function BindRatingScaleQuestions(masterQuestionOptions) {
    try {
        // var ques = _questionSetDB({ id: currentQuestionID }).first();
        // is_multiple_facet = ques.is_multiple_facet;
        // is_multiple_facet = true;

        $("#sQuestion").html(currentQuestion);
        //$("#divProgrammingOptions").css("display", "none");
        $("#divParagraphQuestions").html('');
        if (is_multiple_facet == 2) {
            // $("#divQuestionOptions").append("<div class='col-md-12'><div class='radio'><form id='radioOption'></form></div></div>")
            $("#divQuestionOptions").append("<div class='col-md-12'><div class='radio'><form id='radioOption'><table id='psychometricTable' style='border-collapse: separate; border-spacing: 20px 0px;'><tr id='radioButtons' style='text-align:center;'></tr><tr id='options'style='text-align:center;'></tr></table></form></div></div>")
        }


        masterQuestionOptions.forEach(function (element) {
            let tempoptions = element.options.replace("<p>", "");
            tempoptions = tempoptions.replace("</p>", "");
            if (currentIsMultipleOption == Number(MupltipleOptionEnum.Single)) {
                //$("#divQuestionOptions").append("<div class='radio d-flex'><div class='row col-md-12'><div class='p-l-20'> <input type='radio' id = '" + DynamicControlPrefixEnum.Radio + element.id + "'  name = 'radio' value='" + DynamicControlPrefixEnum.Radio + element.id + "' ><label for='" + DynamicControlPrefixEnum.Radio + element.id + "' class='radio-label d-flex'></div><div class='col-md-11'><span class='text'>" + element.options + "</span></label></div></div></div>");            
                if (is_multiple_facet == 2) {
                    $("#radioButtons").append("<td><input type='radio' id = '" + DynamicControlPrefixEnum.Radio + element.id + "'  name = 'radio' value='" + DynamicControlPrefixEnum.Radio + element.id + "' ><label for='" + DynamicControlPrefixEnum.Radio + element.id + "' class='radio-label'></label></td>");
                    $("#options").append("<td><span class='text' style='word-break:normal;cursor:pointer;' onClick=textclick('" + DynamicControlPrefixEnum.Radio + element.id + "')>" + tempoptions + "</span></td>");
                }
                else {
                    $("#divQuestionOptions").append("<div class='col-md-12'><div class='radio'><input type='radio' id = '" + DynamicControlPrefixEnum.Radio + element.id + "'  name = 'radio' value='" + DynamicControlPrefixEnum.Radio + element.id + "' ><label for='" + DynamicControlPrefixEnum.Radio + element.id + "' class='radio-label d-flex'><div class='col-md-11'><span class='text'>" + tempoptions + "</span></div></label></div></div>");
                }

                BindCorrectAnswer(element);
            }
        });

    } catch (e) {
        PostJavascriptError("BindRatingScaleQuestions", "Assessment - BindRatingScaleQuestions : " + e.message + ":" + "Testpin:" + _logDetails);
    }

}
function textclick(id) {
    var tempradio = "#" + id;
    $(tempradio).click();
}

function BindAdjectivesTypeQuestions(masterQuestionOptions) {
    try {
        TypingTestFirstTime = 0;
        $("#sQuestion").html(currentQuestion);
        $("#divProgrammingOptions").css("display", "none");
        $("#divParagraphQuestions").html('');
        $("#divQ1").empty();
        $("#divQ2").empty();
        let adjectiveHTML = "<div class='d-flex justify-content-start'><div class='parent-list-wrapper droptrue ui-sortable' id='sortable1'>";
        masterQuestionOptions.forEach(function (element) {
            if (currentIsMultipleOption == Number(MupltipleOptionEnum.Single)) {
                //adjectiveHTML += "<span name='" + element.id + "' draggable='true' ondragstart='drag(event)' class='spanAnswer' id='" + DynamicControlPrefixEnum.SpanOption + element.id + "'>" + element.options + "</span>";
                adjectiveHTML += "<span class='adjective-list-items ui-sortable - handle spanAnswer' name='" + element.id + "' draggable='true' ondragstart='drag(event)' id='" + DynamicControlPrefixEnum.SpanOption + element.id + "'><b class='handler'>::</b> " + element.options + "</span>";

            }

        });
        adjectiveHTML += "</div><div class='arrow'><span class='lnr lnr-chevron-up'></span></div>";
        adjectiveHTML += "<div class='child-list-wrapper' id='AdjectiveSubQuestion'><div class='most-category droptrue ui-sortable'><div id='AdjSubQuestion1'></div><div id='divQ1'></div></div><div class='least-category'><div id='AdjSubQuestion2'></div><div id='divQ2'></div></div></div> ";
        $("#divQuestionOptions").append(adjectiveHTML);
        var subQuestion = _subQuestionDB({ question_id: currentQuestionID }).get();
        var index = 1;
        subQuestion.forEach(function (element) {
            let question = "#AdjSubQuestion" + index;
            $(question).empty();
            $(question).append(element.sub_question);
            let subQuestionDiv = "#divQ" + index;
            $(subQuestionDiv).empty();
            let subQuestionAnswerDiv = "SubQAnwserDiv" + element.subquestion_id;
            $(subQuestionDiv).append("<div id='" + subQuestionAnswerDiv + "' class=Qstyle ondrop=drop(event,'" + subQuestion[0].subquestion_id + "','" + subQuestion[1].subquestion_id + "') ondragover=allowDrop(event)></div>");
            index++;
        });
        BindCorrectAnswer('');
    } catch (e) {
        PostJavascriptError("BindAdjectivesTypeQuestions", "Assessment - BindAdjectivesTypeQuestions : " + e.message + ":" + "Testpin:" + _logDetails);
    }

}
function loadDefaultText() {
    try {
        let newHTML = "";
        let nextI = 0;
        for (var i = 0; i < arrayDefaultWordTemp.length; i++) {
            nextI++;

            if (arrayDefaultWordTemp[i] == '<p>') {

                newHTML += "<p>";
                nextI--;
                continue;
            }
            else if (arrayDefaultWordTemp[i] == '</p>') {

                newHTML += "</p>";
                nextI--;
                continue;
            }

            if (arrayDefaultWordTemp[i] == "") {
                arrayDefaultWordWithSpace.push("");
                continue;
            }

            newHTML += "<span id='span" + nextI + "'>" + arrayDefaultWordTemp[i] + "</span>";

            arrayDefaultWordWithSpace.push(arrayDefaultWordTemp[i]);
            if (i < arrayDefaultWordTemp.length - 1) {
                if (arrayDefaultWordTemp[i + 1] == '</p>') {
                    if (arrayDefaultWordTemp[i + 1] != '')
                        continue;
                }

                nextI++;
                newHTML += "<span id='span" + nextI + "'> </span>";

                arrayDefaultWordWithSpace.push("");
            }
        }

        $("#sQuestion").html(newHTML);
        applyStyle("#span1", false, false, true, false);
        $("#txtTypingTest").focus();
    } catch (e) {
        PostJavascriptError("loadDefaultText", "Assessment - loadDefaultText : " + e.message + ":" + "Testpin:" + _logDetails);
    }

};

function applyStyle(control, isWarning, isSuccess, isCurrent, isRemoveAll) {
    if (isWarning) {

        $(control).removeClass(current);
        $(control).removeClass(success);
        $(control).addClass(warning);
    }
    else if (isSuccess) {

        $(control).removeClass(warning);
        $(control).removeClass(current);
        $(control).addClass(success);

    }
    else if (isCurrent) {

        $(control).removeClass(warning);
        $(control).removeClass(success);
        $(control).addClass(current);

    }
    else if (isRemoveAll) {
        $(control).removeClass(warning);
        $(control).removeClass(current);
        $(control).removeClass(success);
    }
}

function verifyTypingText(event) {

    if (event.keyCode == 37 || event.keyCode == 38 || event.keyCode == 39 || event.keyCode == 40) {
        event.preventDefault();
    }

    let typingText = $("#txtTypingTest").val();
    let arrayTypingTextMain = $("#txtTypingTest").val().split("");
    if (typingText.length > 0) {
        //$("#txtDisplayText").html(typingText);
        //let txtLength = typingText.length;
        //let result = defaultText.substring(0, txtLength);
        //if (result == typingText)
        //    $("#txtTypingTest").removeClass('errorClass');
        //else
        //    $("#txtTypingTest").addClass('errorClass');


    }
    else {
        for (var i = 0; i < arrayDefaultWordWithSpace.length + 2; i++) {

            var revertSpan = "#span" + i;

            applyStyle(revertSpan, false, false, false, true)

        }

        applyStyle("#span1", false, false, true, false)

        //$("#txtTypingTest").removeClass('errorClass');
        return true;
    }


    let backCheck = false, lastBack = false;

    if (event.keyCode == 8)//backspace
    {

        var cursorPosition = document.getElementById('txtTypingTest').selectionStart;
        let typingLength = $("#txtTypingTest").val().length;
        if (cursorPosition <= typingLength - 1) {
            backCheck = true;
        }
        else if (cursorPosition == typingLength) {
            if (typingLength > 0)
                lastBack = true;
        }
    }



    let arrayTypingText = [];

    //var nextI = 0;
    //for (var i = 0; i < arrayTypingTextMain.length; i++) {

    //    nextI++;
    //    if (arrayTypingTextMain[i] != "") {
    //        arrayTypingText.push(arrayTypingTextMain[i]);
    //        if (i < arrayTypingTextMain.length - 1) {
    //            nextI++;
    //            arrayTypingText.push("");

    //        }
    //    }
    //}


    var nextI = 0;
    var conString = "";
    for (var i = 0; i < arrayTypingTextMain.length; i++) {




        if (arrayTypingTextMain[i] == " ") {

            if (conString != "")
                arrayTypingText.push(conString);
            conString = "";
            arrayTypingText.push(conString);

        }
        else {
            let conStringTemp = arrayTypingTextMain[i].replace(/\n/g, ' ');

            if (conStringTemp == " ") {
                arrayTypingText.push(conString);
                arrayTypingText.push("");
                conString = "";
                continue;
            }

            conString += arrayTypingTextMain[i];

            if ((arrayTypingTextMain.length - 1) == i)
                arrayTypingText.push(conString);

        }
    }





    var arrLength = arrayTypingText.length;

    //if (arrLength > arrayDefaultWordWithSpace.length)
    //    return true;


    var breakFalg = false;
    let iCount = 0;
    for (var i = 0; i < arrLength; i++) {
        if (breakFalg) {
            for (var inext = i; inext < arrLength + 1; inext++) {
                let revertNext = inext + 1
                var revertSpan = "#span" + revertNext;

                applyStyle(revertSpan, false, false, false, true);
            }
            break;
        }

        if (lastBack) {


            var testArraryLength = arrayTypingText.length;
            for (var inext = testArraryLength; testArraryLength < arrayDefaultWordWithSpace.length + 1; testArraryLength++) {
                let revertNext = testArraryLength + 1;
                var revertSpan = "#span" + revertNext;

                applyStyle(revertSpan, false, false, false, true);
            }

            //30-12-2019 again verify
            if ($('#sQuestion').find('span.warning').length !== 0) {

                if (arrayDefaultWordWithSpace.length == arrayTypingText.length) {
                    if (arrayDefaultWordWithSpace[testArraryLength - 2] == arrayTypingText[testArraryLength - 2]) {


                        var findId = "#" + $('#sQuestion').find('span.warning')[0].id + ".warning"
                        if ($(findId)[0].id == $('#sQuestion').find('span.warning')[0].id) {
                            revertSpan = "#span" + arrayTypingText.length;


                            applyStyle(revertSpan, false, true, false, false);
                        }
                        else {
                            revertSpan = "#span" + arrayTypingText.length;

                            applyStyle(revertSpan, false, false, false, true);

                        }
                    }
                    else {
                        revertSpan = "#span" + arrayTypingText.length;

                        applyStyle(revertSpan, false, false, true, false);
                    }
                }
                else {
                    //here will check at 31/12/2019
                    let checkFirstWarning = "#" + $('#sQuestion').find('span.warning')[0].id;

                    var lastSpan = arrayTypingText.length - 1;
                    let txtLength = arrayTypingText[lastSpan].length;
                    let result = arrayDefaultWordWithSpace[lastSpan].substring(0, txtLength);
                    if (result == arrayTypingText[lastSpan]) {

                        revertSpan = "#span" + arrayTypingText.length;

                        if (checkFirstWarning == revertSpan) {

                            if (txtLength == arrayDefaultWordWithSpace[lastSpan].length) {
                                applyStyle(revertSpan, false, true, false, false);

                                if (arrayTypingText.length != arrayDefaultWordWithSpace.length) {
                                    let focusNext = arrayTypingText.length + 1;
                                    revertSpan = "#span" + focusNext;
                                    applyStyle(revertSpan, false, false, true, false);
                                }

                            }
                            else
                                applyStyle(revertSpan, false, false, true, false);

                        }
                        else {

                            //applyStyle(revertSpan, false, false, false, false);

                            //to be delete must check 02-01-2020
                            //arrayTypingText[lastSpan]
                            applyStyle(revertSpan, false, false, true, false);
                        }
                    }


                }
                //alert('yes');
            }
            else {

                let lastSpan = arrayTypingText.length - 1;
                revertSpan = "#span" + arrayTypingText.length;
                if ($(revertSpan).text() == " ") {
                    if (arrayTypingText[lastSpan] != "") {
                        revertSpan = "#span" + arrayTypingText.length;
                    }
                    else {
                        lastSpan = arrayTypingText.length + 1;
                        revertSpan = "#span" + lastSpan;
                    }
                }
                else {
                    if (arrayTypingText[lastSpan] == arrayDefaultWordWithSpace[lastSpan]) {
                        lastSpan = arrayTypingText.length + 1;
                        revertSpan = "#span" + lastSpan;

                    }
                    else {
                        lastSpan = arrayTypingText.length;
                        revertSpan = "#span" + lastSpan;
                    }
                }


                applyStyle(revertSpan, false, false, true, false);

            }
            break
        }


        iCount++;
        var ledSpan = "#span" + iCount;
        if (arrLength == 1) {
            if (arrayTypingText[i] == arrayDefaultWordWithSpace[i]) {

                applyStyle(ledSpan, false, true, false, false);

                let setNext = iCount + 1;
                ledSpan = "#span" + setNext;

                applyStyle(ledSpan, false, false, true, false);

            }
            else if (arrayTypingText[i].length != arrayDefaultWordWithSpace[i].length) {
                let txtLength = arrayTypingText[i].length;
                let result = arrayDefaultWordWithSpace[i].substring(0, txtLength);
                if (result == arrayTypingText[i]) {

                    applyStyle(ledSpan, false, false, true, false);

                }
                else {

                    applyStyle(ledSpan, true, false, false, false);

                    //to be delete
                    let setlocalcount = iCount + 1;
                    let localledSpan = "#span" + setlocalcount;

                    applyStyle(localledSpan, false, false, false, false);
                    //breakFalg = true;
                }

            }
            else {

                applyStyle(ledSpan, true, false, false, false);
                //breakFalg = true;
            }
        }
        else if (arrayTypingText[i] == arrayDefaultWordWithSpace[i]) {

            applyStyle(ledSpan, false, true, false, false);
            let setNext = iCount + 1;
            ledSpan = "#span" + setNext;

            applyStyle(ledSpan, false, false, true, false);

            // to be delete 02-01-2020
            //if (arrayTypingText[i] == "" && arrayTypingText[i+1]=="")
            //    applyStyle(ledSpan, true, false, false, false);
            //else
            //    applyStyle(ledSpan, false, false, true, false);

        }
        else if (arrayTypingText[i].length != arrayDefaultWordWithSpace[i].length) {
            let txtLength = arrayTypingText[i].length;
            let result = arrayDefaultWordWithSpace[i].substring(0, txtLength);
            if (result == arrayTypingText[i]) {

                if (backCheck) {

                    if (i == 0) {

                        applyStyle(ledSpan, false, false, true, false);
                    }
                    else {

                        applyStyle(ledSpan, true, false, false, false);
                        //breakFalg = true;
                    }
                }
                else {
                    //30-12-2019 again verify
                    if (arrayTypingText.length > i + 1) {
                        applyStyle(ledSpan, true, false, false, false);
                        //breakFalg = true;
                    }
                    else {

                        //applyStyle(ledSpan, false, false, true, false);

                        //to be delete 02-01-2020
                        if (arrayTypingText[i] == "" && arrayTypingText[i - 1] == "") {
                            applyStyle(ledSpan, true, false, false, false);

                            let setNext = i + 2;
                            ledSpan = "#span" + setNext;
                            applyStyle(ledSpan, false, false, true, false);
                        }
                        else
                            applyStyle(ledSpan, false, false, true, false);
                    }
                }
            }
            else {

                applyStyle(ledSpan, true, false, false, false);

                let setNext = iCount + 1;
                ledSpan = "#span" + setNext;
                applyStyle(ledSpan, false, false, false, true);
                // breakFalg = true;
            }

        }
        else {

            applyStyle(ledSpan, true, false, false, false);
            //breakFalg = true;
        }

    }


    let checkSpace = false;
    // var breakFalg = false;
    for (var i = 0; i < arrayTypingText.length; i++) {

        //if (checkSpace) {
        //    //alert('double space');
        //    //breakFalg = true;
        //    return true;
        //}
        //if (arrayTypingText[i] == "") {

        //    if (arrayTypingText[i + 1] == "") {
        //        checkSpace = true;
        //        var revertSpan = "#span" + (i + 2);
        //        applyStyle(revertSpan, true, false, false, false);
        //        revertSpan = "#span" + (i + 3);
        //        applyStyle(revertSpan, false, false, true, false);
        //    }
        //}
    }
};

function restirctArrowKeys(event) {
    if (event.which == 37 || event.which == 38 || event.which == 39 || event.which == 40) {
        event.preventDefault();
    }
};

function timeToSeconds(time) {
    time = time.split(/:/);
    return (time[0] * 3600) + (time[1] * 60) + Number(time[2]);
}
//Note: code review on Endtest button click event
function endTestClickAlert() {
    try {
        $("#divloading").show();
        //FreezeTimer();
        eventclick = true;
        isEndtestCapture = true;
        isTimer = true;
        lastSectionElapsedTime = $("#future_date").text();
        if (_testPinDB().first().is_index_page == "true") {
            let promiseResult = new Promise(function (resolve, reject) {
                ProcessEventLog("Endtest", resolve);
                resolve("done");
            });
            promiseResult.then(result => GetCustomDetails());
            $('#divMarkforReview').hide();
            $('#marforReviewCount').text('');
        }
        else {
            ProcessEventLog("Endtest");
        }

        $("#pauseBtnhms").val("Start");
        HandleTimerButton();
        if (_testPinDB().first().is_index_page != "true") {
            $('#btnEndtest').removeAttr('data-target');
            $('#btnNext').attr('data-target', '');
            $("#divloading").hide();
            swal.fire({
                title: 'Confirm End Test',
                text: 'Are you sure you want to end this Test',
                imageUrl: '/Images/Pro/warning.svg',
                imageWidth: 80,
                imageHeight: 80,
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: "No, Please Continue",
                allowOutsideClick: false
            }).then((result) => {
                isEndtestCapture = true;
                if (result.value) {
                    ProcessResult();
                }
                else {
                    if (currentClickMode != ClickEvent.TimerElapsed) {
                        UnfreezeTimer();
                    }
                    currentClickMode = null;
                    isEndtestCapture = false;
                    isTimer = false;

                    if (isSubmitCaptureCancel) {
                        ProcessEventLog("Submitcancel");
                    }
                    else {
                        ProcessEventLog("Endtestcancel");
                    }
                    isSubmitCaptureCancel = false;
                }

            });
        }
        else {
            $('#btnEndtest').attr('data-target', '#btnEndtestModel');
        }
    } catch (e) {
        PostJavascriptError("endTestClickAlert", "Assessment - endTestClickAlert : " + e.message + ":" + "Testpin:" + _logDetails);
    }

}
//Note: code review on BindSectionButtonInfo
//If section/option is null or empty

function alertIsNullOrEmptyForSectionandOption(text) {
    $("#divloading").hide();
    FreezeTimer();

    swal.fire({
        title: '<span></span>',
        text: text,
        imageUrl: '/Images/Pro/warning.svg',
        imageWidth: 80,
        imageHeight: 80,
        type: "warning",
        showCancelButton: false,
        confirmButtonText: 'Yes',
        allowOutsideClick: false
    }).then((result) => {
        if (result.value) {
            $("#pauseBtnhms").val("Start");
            $("#pauseBtnhms").click();
        }

    })
    UnfreezeTimer();
}

function GetCustomDetails() {
    try {
        if (currentQuestionType == QuestionTypeEnum.Psychometric) {
            var answerSetData = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
            var is_PshycometricMandatory = validatePsychometericQuestionSelectionOnProcessEventLog();
            if (is_PshycometricMandatory != false) {
                if (answerSetData.exam_answer != null && answerSetData.exam_answer != "0" && answerSetData.exam_answer != 0 && answerSetData.exam_answer != '') {
                    if (String(currentSNo) == String(totalNoofQuestions)) {
                        $('#btnNext').attr('data-target', '#btnEndtestModel');
                    }
                    $('#btnEndtest').attr('data-target', '#btnEndtestModel');
                    setTimeout(function () {
                        GetEndTestDetails();
                    }, 100);
                }
                else {
                    $('#btnEndtest').attr('data-target', '');
                    $('#btnNext').attr('data-target', '');
                    return false;
                }
            }
            else {
                $('#btnEndtest').attr('data-target', '');
                $('#btnNext').attr('data-target', '');
                return false;
            }
            

        }
        else {
            if (String(currentSNo) == String(totalNoofQuestions)) {
                $('#btnNext').attr('data-target', '#btnEndtestModel');
            }
            $('#btnEndtest').attr('data-target', '#btnEndtestModel');
            setTimeout(function () {
                GetEndTestDetails();
            }, 100);
        }
    } catch (e) {
        PostJavascriptError("GetCustomDetails", "Assessment - GetCustomDetails : " + e.message + ":" + "Testpin:" + _logDetails);
    }


}

//Note: code review
//If is there any internal server error redirect to start page
function internalServerError(text) {
    swal.fire({
        title: '<span></span>',
        text: text,
        type: "error",
        showCancelButton: false,
        confirmButtonText: "OK",
        imageUrl: '/Images/Pro/error.svg',
        imageWidth: 80,
        imageHeight: 80,
        confirmButtonColor: '#ed5364',
        allowOutsideClick: false
    }).then((result) => {
        if (result.value) {
            UnfreezeTimer();
            var settingsinfo = _testPinDB().first().settingsname;
            if (settingsinfo != null && settingsinfo != "") {
                window.location.href = settingsinfo;
            }

        }

    });
}
//Note: code review
//window proctoring limit alert
function windowProctoringLimit(remainingTries) {
    FreezeTimer();
    swal.fire({
        title: '<span></span>',
        text: "Window Proctoring Limit " + remainingTries + " left !",
        type: "warning",
        imageUrl: '/Images/Pro/error.svg',
        imageWidth: 80,
        imageHeight: 80,
        showCancelButton: false,
        confirmButtonText: "Yes",
        allowOutsideClick: false,
        //timer: 60000,
    }).then((result) => {
        if (result.value) {
            if (allSecElapsed == true) {
                let promiseResult = new Promise(function (resolve, reject) {
                    if (durationType == DurationTypeEnum.SectionWise) {
                        if (currentQuestionType == QuestionTypeEnum.TypingTest) {
                            TypingTestAlert();
                        }
                    }
                    resolve("done");
                });
                promiseResult.then(result => ProcessResult());
            }
            else {
                WindowProctoringNavigationLog();
                UnfreezeTimer();
            }
        }
        else {
        }
    });
    UnfreezeTimer();
}
//Note : Code Review BindQuestion and BindSectionQuestion
function BindMCQ(masterQuestionOptions) {
    try {
        $("#sQuestion").html(currentQuestion);
        $("#divProgrammingOptions").css("display", "none");
        $("#divParagraphQuestions").html('');
        if (masterQuestionOptions.length > 0) {
            masterQuestionOptions.forEach(function (element) {
                let tempoptions = element.options.replace("<p>", "");

                tempoptions = tempoptions.replace("</p>", "");
                if (currentIsMultipleOption == Number(MupltipleOptionEnum.Single)) {
                    //$("#divQuestionOptions").append("<div class='radio d-flex'><div class='row col-md-12'><div class='p-l-20'> <input type='radio' id = '" + DynamicControlPrefixEnum.Radio + element.id + "'  name = 'radio' value='" + DynamicControlPrefixEnum.Radio + element.id + "' ><label for='" + DynamicControlPrefixEnum.Radio + element.id + "' class='radio-label d-flex'></div><div class='col-md-11'><span class='text'>" + element.options + "</span></label></div></div></div>");
                    $("#divQuestionOptions").append("<div class='col-md-12'><div class='radio'><input type='radio' id = '" + DynamicControlPrefixEnum.Radio + element.id + "'  name = 'mcqradio' value='" + DynamicControlPrefixEnum.Radio + element.id + "' ><label for='" + DynamicControlPrefixEnum.Radio + element.id + "' class='radio-label d-flex'><div class='col-md-11'><span class='text'>" + tempoptions + "</span></div></label></div></div>");
                    BindCorrectAnswer(element);
                }
                else if (currentIsMultipleOption == Number(MupltipleOptionEnum.Multiple)) {
                    //$("#divQuestionOptions").append("<div class='checkbox d-flex'><div class='row col-md-12'><div class='p-l-20'><input type='checkbox' id = '" + DynamicControlPrefixEnum.CheckBox + element.id + "'  name = 'checkbox' value='" + DynamicControlPrefixEnum.CheckBox + element.id + "' > <label for='" + DynamicControlPrefixEnum.CheckBox + element.id + "' class='checkbox-label'><span class='text'>" + element.options + "</span></label></div></div></div>");

                    $("#divQuestionOptions").append("<div class='col-md-12'><div class='checkbox'><input type='checkbox' id = '" + DynamicControlPrefixEnum.CheckBox + element.id + "'  name ='mcqcheckbox' value='" + DynamicControlPrefixEnum.CheckBox + element.id + "' > <label for='" + DynamicControlPrefixEnum.CheckBox + element.id + "' class='checkbox-label d-flex'><div class='col-md-11'><span class='text'>" + tempoptions + "</span></div></label></div></div>");

                    //$("#divQuestionOptions").append("<div > <label> <input type='checkbox' id = '" + DynamicControlPrefixEnum.CheckBox + element.id + "'  name = 'checkbox' value='" + element.options + "' > <span class='cr'> <i class='cr-icon fa fa-check txt-primary'></i></span>" + element.options + "</label> </div><br/>");
                    BindCorrectAnswer(element);
                }
            });
        }
        BindMediaControlTypes();
    } catch (e) {
        PostJavascriptError("BindMCQ", "Assessment - BindMCQ : " + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function BindWeightageQuestion(masterQuestionOptions) {
    try {
        $("#sQuestion").html(currentQuestion);
        $("#divProgrammingOptions").css("display", "none");
        $("#divParagraphQuestions").html('');
        if (masterQuestionOptions.length > 0) {
            masterQuestionOptions.forEach(function (element) {
                let tempoptions = element.options.replace("<p>", "");
                tempoptions = tempoptions.replace("</p>", "");
                //tempoptions = tempoptions.replace("<br/>", "");
                $("#divMcqWeightageOptions").append("<div class='col-md-6'><div class='checkbox'><input type='checkbox' id = '" + DynamicControlPrefixEnum.CheckBox + element.id + "'  name ='mcqcheckbox' value='" + DynamicControlPrefixEnum.CheckBox + element.id + "' > <label for='" + DynamicControlPrefixEnum.CheckBox + element.id + "' class='checkbox-label d-flex'><div class='col-md-5'><span class='text'>" + tempoptions + "</span></div></label></div></div>");
                BindCorrectAnswer(element);
            });
        }
        BindMediaControlTypes();
    } catch (e) {
        PostJavascriptError("BindWeightageQuestion", "Assessment - BindWeightageQuestion : " + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function BindPsychometric(masterQuestionOptions) {
    try {
        $("#sQuestion").html(currentQuestion);
        $("#divParagraphQuestions").html('');
        $("#divProgrammingOptions").css("display", "none");
        //var subQuestion = _subQuestionDB({ question_id: currentQuestionID }).get();
        //var index = 0;
        //subQuestion.forEach(function (element) {
        //    let localPsyQuestion = element.sub_question.replace(/<p>/g, "").replace(/<\/p>/g, "");
        //    if (index == 1) {
        //        $("#divPsychometricQuestions").append("<div class='text-center'><div style='col-md-6 text-align:center'><h8>OR</h8></div></div>");
        //    }
        //    $("#divPsychometricQuestions").append("<div class='radio'> <input type='radio' id = '" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "'  name = 'subquestion' value='" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "' ><label for='" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "' class='radio-label'><span class='text'>" + localPsyQuestion + "</span></label> </div>");
        //    if (index == 1) {
        //        $("#divPsychometricQuestions").append("<div style='padding-bottom:5px;'></div>");
        //    }
        //    index++;
        //});

        //masterQuestionOptions.forEach(function (element) {
        //    let localPsyOptions = element.options.replace(/<p>/g, "").replace(/<\/p>/g, "");
        //    $("#divPsychometricOptions").append("<div class='radio'> <input type='radio' id = '" + DynamicControlPrefixEnum.Radio + element.id + "'  name = 'psychometric' value='" + DynamicControlPrefixEnum.Radio + element.id + "' ><label for='" + DynamicControlPrefixEnum.Radio + element.id + "' class='radio-label'><span class='text'>" + localPsyOptions + "</span></label> </div>");
        //});

        //BindCorrectAnswer('');
        var ques = _questionSetDB({ id: currentQuestionID }).first();
        let psychometericSubQusType = ques.psychometeric_sub_question_type_id;
        adjective_EntityMinCount = ques.adjective_Entity_MinCount;

        switch (psychometericSubQusType) {
            case PsychometericSubQuestionTypeEnum.RatingScale:
                BindRatingScaleQuestions(masterQuestionOptions);
                break;

            case PsychometericSubQuestionTypeEnum.ForcedChoice:
                BindForcedChoiceQuestions(masterQuestionOptions);
                break;

            case PsychometericSubQuestionTypeEnum.AdjectivesType:
                BindAdjectivesTypeQuestions(masterQuestionOptions);
                break;

            default:
                break;
        }
    } catch (e) {
        PostJavascriptError("BindPsychometric", "Assessment - BindPsychometric : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function BindSubjectiveType() {
    $("#divParagraphQuestions").html('');
    BindSubjectiveTypeControls();
    BindMediaControlTypes();
}

function BindParagraph() {
    try {

        $("#sQuestion").html(currentQuestion);
        $("#sQuestionMultimedia").html('');
        var SectionWiseQuestionsMedia = _multimediaQuestion({ question_id: currentQuestionID, subquestion_id: "" }).get();
        var firsttime = 0;
        if (SectionWiseQuestionsMedia != null) {
            for (var i = 0; i < SectionWiseQuestionsMedia.length; i++) {
                if (SectionWiseQuestionsMedia[i].s3_id != null) {
                    $("#sQuestion").append("<div id='myElement_" + currentQuestionID + "_" + i + "'></div><br/>");
                    $("#sQuestion").append("<script  type ='text/javascript'> $('document').ready(function() {var playerInstance = jwplayer('myElement_" + currentQuestionID + "_" + i + "'); playerInstance.setup({ file: '" + SectionWiseQuestionsMedia[i].file + "', mediaid: 'xxxxYYYY', Mimetype: '" + SectionWiseQuestionsMedia[i].mimetype + "',image:'" + SectionWiseQuestionsMedia[i].backdropimage + "'});}); </script>");
                }
            }
        }

        $("#divParagraphQuestions").html('');
        var str = "";
        var _subQuestions = _subQuestionDB({ question_id: currentQuestionID }).get();
        //BindMediaControlTypes();
        var index = 1;
        var optionhtml = '';

        _subQuestions.forEach(function (element) {
            var _QuestionsOptions = _questionOptionSetDB({ sub_question_id: element.subquestion_id }).get();
            _QuestionsOptions.forEach(function (optionelement) {
                var localParaOptions = optionelement.options.replace(/<p>/g, "").replace(/<\/p>/g, "");
                //optionhtml = optionhtml + "<div class='col-md-12'> <div class='radio' style='padding-left:50px'><input type='radio' id = " + DynamicControlPrefixEnum.Radio + optionelement.id + "  name ='radio_" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "'  value=" + optionelement.id + "> <label  for='" + DynamicControlPrefixEnum.Radio + optionelement.id + "' class='radio-label'><span class='text'>" + localParaOptions + "</span> </label></div></div>";
                optionhtml = optionhtml + "<div class='col-md-12'><div class='radio' style='padding-left:50px'><input type='radio' id = " + DynamicControlPrefixEnum.Radio + optionelement.id + "  name ='radio_" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "'  value=" + optionelement.id + "> <label  for='" + DynamicControlPrefixEnum.Radio + optionelement.id + "' class='radio-label d-flex'><div class='col-md-10'><span class='text'>" + localParaOptions + "</span></div></label></div></div>";

            })

            var SectionWiseQuestionsMedia = _multimediaQuestion({ question_id: currentQuestionID, subquestion_id: element.subquestion_id }).get();

            var optionmediahtml = '';
            if (SectionWiseQuestionsMedia != null) {
                for (var i = 0; i < SectionWiseQuestionsMedia.length; i++) {
                    if (SectionWiseQuestionsMedia[i].s3_id != null) {
                        optionmediahtml += "<br/><br/><div id='myElement_" + element.subquestion_id + "_" + i + "'></div><br/>";
                        optionmediahtml += "<script  type ='text/javascript'> $('document').ready(function() {var playerInstance = jwplayer('myElement_" + element.subquestion_id + "_" + i + "'); playerInstance.setup({ file: '" + SectionWiseQuestionsMedia[i].file + "', mediaid: 'xxxxYYYY', Mimetype: '" + SectionWiseQuestionsMedia[i].mimetype + "',image:'" + SectionWiseQuestionsMedia[i].backdropimage + "'});}); </script>";
                    }
                }
            }

            str = "";
            str = "<b>Ques " + index + " : " + '' + "</b>";
            let testSubQuestion = "";
            if (element.sub_question.includes("<p>")) {
                testSubQuestion = element.sub_question.replace("<p>", "");
                testSubQuestion = testSubQuestion.replace("</p>", "")
                testSubQuestion = $("<div/>").html(testSubQuestion).text();
            }
            else {
                testSubQuestion = $("<div/>").html(element.sub_question).text();
            }

            testSubQuestion = str + $("<div/>").html(testSubQuestion).text();
            if (firsttime == 0) {
                $("#divParagraphQuestions").append("<div id=" + DynamicControlPrefixEnum.Radio + element.subquestion_id + " ><div class='col-md-12 p-t-15 m-l-35'><label>" + testSubQuestion + " <i class='helper'></i></label></div><div style='padding-left: 65px;'>" + optionmediahtml + "</div>" + optionhtml + "</div>");
                firsttime = firsttime + 1;
            }
            else {
                $("#divParagraphQuestions").append("<div id=" + DynamicControlPrefixEnum.Radio + element.subquestion_id + " ><div class='col-md-12 p-t-15 m-l-35'><hr size='100'><label>" + testSubQuestion + " <i class='helper'></i></label></div><div style='padding-left: 65px;'>" + optionmediahtml + "</div>" + optionhtml + "</div>");
            }

            optionhtml = '';
            BindCorrectAnswer(element);
            index++;
            str = "";
        });

    } catch (e) {
        PostJavascriptError("BindParagraph", "Assessment - BindParagraph : " + e.message + ":" + "Testpin:" + _logDetails);
    }
}

function BindVideoRecord() {
    $("#sQuestion").html(currentQuestion);
    $('#sQuestion').css("height", "");
    $('#sQuestion').css("overflow-y", "");
    $("#divProgrammingOptions").html("");
    $("#divParagraphQuestions").html('');
    $("#divProgrammingOptions").css("display", "none");
    $("#btnStop").hide();
    $("#btnUpload").hide();

    if (cameraFlag == false) {
        $("#videoRecorder").hide();
        $("#videoRecorderButtons").hide();
        $("#divQuestionOptions").html("<h4><b>Permission Denied to Access Camera and MicroPhone</b></h4>");

    }
    else {

        $("#recorder").hide();
        $("#videoRecorder").show();
        $("#videoRecorderButtons").show();

        var videoElement = document.getElementById("preview");
        var recordElement = document.getElementById("recorder");

        var startControlElement = document.getElementById("btnStart");
        var stopControlElement = document.getElementById("btnStop");
        var uploadControlElement = document.getElementById("btnUpload");

        VeeVideo(videoElement, recordElement, startControlElement, stopControlElement, uploadControlElement, 60000);
    }
}

//End code review BindQuestion and BindSectionQuestion

function allowDrop(ev) {
    ev.preventDefault();
}

function drag(ev) {
    ev.dataTransfer.setData("text", ev.target.id);
}

function drop(ev, subQA1, SubQA2) {

    ev.preventDefault();
    var data = ev.dataTransfer.getData("text");

    if (data == 'undefined' || data == null)
        return true;

    var element = document.getElementById(data);
    destinationElement = "#" + ev.target.id;
    let checkElementExists = '#' + DynamicControlPrefixEnum.SpanAnswer + element.id;

    if ($(checkElementExists).length)
        return true;

    finalElement = "#" + $(destinationElement).closest('div').attr('id');
    if ($(finalElement).children().length < adjective_EntityMinCount) {
        //let addHTML = "<span class='dropedAnswer' name='" + element.id + "' id='" + DynamicControlPrefixEnum.SpanAnswer + element.id + "'>" + element.textContent + "<span onClick=removeElement('" + destinationElement + "','spanD" + element.id + "','" + DynamicControlPrefixEnum.SpanAnswer + element.id + "','" + element.id + "') class='spanClose' id='spanD" + element.id + "'>X</span></span>";
        let addHTML = "<span class='adjective-list-items ui-sortable-handle' name='" + element.id + "' id='" + DynamicControlPrefixEnum.SpanAnswer + element.id + "'>" + element.textContent.substring(3, element.textContent.length) + "<a class='action'><span onClick=removeElement('" + destinationElement + "','spanD" + element.id + "','" + DynamicControlPrefixEnum.SpanAnswer + element.id + "','" + element.id + "') class='lnr lnr-cross' id='spanD" + element.id + "'></span></a></span>";
        $(finalElement).append(addHTML);
        sourceElement = "#" + element.id;
        $(sourceElement).removeAttr('draggable').removeClass('spanAnswer').addClass('spanUsedAnswer').css("pointer-events", "none");
        let subQuestionId = destinationElement.substring(14, destinationElement.length);// #SubQAnwserDiv
        updateAdjectiveAnswers(destinationElement, subQuestionId);


    }
    else {
        swal.fire({
            text: 'Accept only ' + adjective_EntityMinCount + ' answers',
            type: "warning",
            imageUrl: '/Images/Pro/warning.svg',
            imageWidth: 80,
            imageHeight: 80,
            confirmButtonText: 'OK',
            allowOutsideClick: false
        });
        return true;
    }

    let subQ1AnsDiv = "#SubQAnwserDiv" + subQA1
    let subQ2AnsDiv = "#SubQAnwserDiv" + SubQA2
    if (($(subQ1AnsDiv).children().length) == adjective_EntityMinCount && ($(subQ2AnsDiv).children().length) == adjective_EntityMinCount) {
        $("#divQuestionSet").parent().find('span.spanAnswer').removeAttr('draggable').css("pointer-events", "none");

    }
}


function removeElement(destinationElement, delElement, parentElement, sourceElement) {
    let deleteElement = "#" + delElement
    let deleteParentElement = "#" + parentElement
    let revertSourcetElement = "#" + sourceElement
    $(deleteElement).remove();
    $(deleteParentElement).remove();
    $(revertSourcetElement).attr('draggable', true).removeClass('spanUsedAnswer').addClass('spanAnswer').css("pointer-events", "auto");;
    $("#divQuestionSet").parent().find('span.spanAnswer').attr('draggable', true).css("pointer-events", "auto");
    let subQuestionId = destinationElement.substring(14, destinationElement.length);// #SubQAnwserDiv
    updateAdjectiveAnswers(destinationElement, subQuestionId);
}

function updateAdjectiveAnswers(destinationElement, subQuestionId) {
    //switch (currentQuestionType) {
    //    case QuestionTypeEnum.AdjectivesType:
    let _optionid = "";

    $(destinationElement).children().each(function () {
        _optionid += this.id.substring(4, this.id.length) + '^'
    });
    _assessmentAnswerDB({ question_id: currentQuestionID, sub_question_id: subQuestionId }).update({ exam_answer: _optionid.slice(0, -1) });

    var questionPalID;

    if (_optionid != '' && _optionid != null && _optionid != undefined && _optionid != 0) {
        questionPalID = QuestionPalleteEnum.Answered;
    }
    else {
        questionPalID = QuestionPalleteEnum.NotAnswered;
    }

    _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });

    //break;
    //}
}
function ForcedChoiceEvent(event) {
    var rValue = event.value;
    var rId = event.id;
    var rName = event.name;
    var firtChar = rName.substring(0, 1);

    var nextRadio = "";
    if (firtChar == 'l') {
        nextRadio = 'm' + rName.substring(1, rName.length);
        var checkedValue = $("input[name='" + nextRadio + "']:checked").val();
        if (checkedValue == rValue) {
            $("input[name='" + nextRadio + "']:checked").prop('checked', false);
        }
    }
    else if (firtChar == 'm') {
        nextRadio = 'l' + rName.substring(1, rName.length);
        var checkedValue = $("input[name='" + nextRadio + "']:checked").val();
        if (checkedValue == rValue) {
            $("input[name='" + nextRadio + "']:checked").prop('checked', false);
        }
    }
    var CheckedRadio = "";
    $("input[name='" + nextRadio + "']").each(function () {

        let subQuestionID = this.id.substring(2, event.id.length);
        let splitSubOption = subQuestionID.split('~');
        if ($("input:radio[id='" + this.id + "']").is(":checked")) {
            updateForcedChoice(splitSubOption[0], this.id)
            CheckedRadio = splitSubOption[0];
        }
        else {
            if (CheckedRadio != splitSubOption[0]) {
                let nextRChecked = $("input[name='" + rName + "']:checked").attr('id');

                if (nextRChecked) {
                    let nextRSubId = nextRChecked.substring(2, nextRChecked.length);
                    if (nextRSubId != splitSubOption[0])
                        updateForcedChoice(splitSubOption[0], "")
                }
                else
                    updateForcedChoice(splitSubOption[0], "")
            }
        }

    });
    $("input[name='" + rName + "']").each(function () {

        let subQuestionID = this.id.substring(2, event.id.length);
        let splitSubOption = subQuestionID.split('~');
        if ($("input:radio[id='" + this.id + "']").is(":checked")) {
            updateForcedChoice(splitSubOption[0], this.id)
            CheckedRadio = splitSubOption[0];
        }
        else {
            if (CheckedRadio != splitSubOption[0]) {
                let nextRChecked = $("input[name='" + nextRadio + "']:checked").attr('id');
                if (nextRChecked) {
                    let nextRSubId = nextRChecked.substring(2, nextRChecked.length);
                    let splitNextSubOption = nextRSubId.split('~');
                    if (splitNextSubOption[0] != splitSubOption[0])
                        updateForcedChoice(splitSubOption[0], "")
                }
                else
                    updateForcedChoice(splitSubOption[0], "")
            }
        }
    });
}

function updateForcedChoice(subQuestionId, optionId) {

    //switch (currentQuestionType) {
    //    case QuestionTypeEnum.ForcedChoice:
    if (optionId == "") {
        let idOfforcenochosen = "#forcenochosen" + currentQuestionID;
        optionId = $(idOfforcenochosen).text();
    }

    _assessmentAnswerDB({ question_id: currentQuestionID, sub_question_id: subQuestionId }).update({ exam_answer: optionId });
    var questionPalID;

    if (optionId != '' && optionId != null && optionId != undefined && optionId != 0) {
        questionPalID = QuestionPalleteEnum.Answered;
    }
    else {
        questionPalID = QuestionPalleteEnum.NotAnswered;
    }

    _questionSetDB({ sno: currentSNo }).update({ Question_Palette_Enum_Id: questionPalID });



    // break;
    //}
}

function showCodingTabcontrol(element) {
    if (element == "#problem-tab") {
        $(element).addClass('active');
        $("#test-case-tab").removeClass('active');
        //$("#problem").show();
        $("#problem,#sCodingQuestionSNo").show();
        $("#codeingSnoProblem").attr("style", "");
        $("#testcase").hide();
    }
    else if (element == "#test-case-tab") {
        $("#test-case-tab").addClass('active');
        $("#problem-tab").removeClass('active');
        //$("#problem").hide();
        $("#problem,#sCodingQuestionSNo").hide();
        $("#codeingSnoProblem").attr("style", "display:none !important");
        $("#testcase").show();
    }
}

function BindForcedChoiceQuestions(masterQuestionOptions) {
    try {
        TypingTestFirstTime = 0;
        $("#sQuestion").html(currentQuestion);
        $('#sQuestion').css("height", "");
        $('#sQuestion').css("overflow-y", "");
        var _subQuestions = _subQuestionDB({ question_id: currentQuestionID }).get();
        var index = 1;
        var radiobtnName = '';
        let loadQusOptions = "";
        //loadQusOptions = "<div class='options'><div class='forced-wrapper'><div id='forcenochosen" + currentQuestionID + "' style='display:none'>" + masterQuestionOptions[1].id + "</div><div class='d-flex justify-content-between align-items-center header'><div class='most'>" + masterQuestionOptions[0].options + "</div><div class='item'>" + masterQuestionOptions[1].options +"</div ><div class='least'>" + masterQuestionOptions[2].options +"</div> </div>";

        loadQusOptions = "<div class='options'><div class='forced-wrapper'><div id='forcenochosen" + currentQuestionID + "' style='display:none'>" + masterQuestionOptions[1].id + "</div><div class='d-flex justify-content-between align-items-center header'><div class='most'>" + masterQuestionOptions[0].options + "</div><div class='item'>item</div ><div class='least'>" + masterQuestionOptions[2].options + "</div> </div>";

        //masterQuestionOptions.forEach(function (element) {
        //    //if (currentIsMultipleOption == Number(MupltipleOptionEnum.Single)) {
        //    //    $("#divQuestionOptions").append("<div class='radio d-flex'><div class='row col-md-12'><div class='p-l-20'> <input type='radio' id = '" + DynamicControlPrefixEnum.Radio + element.id + "'  name = 'radio' value='" + DynamicControlPrefixEnum.Radio + element.id + "' ><label for='" + DynamicControlPrefixEnum.Radio + element.id + "' class='radio-label d-flex'></div><div class='col-md-11'><span class='text'>" + element.options + "</span></label></div></div></div>");
        //    //    BindCorrectAnswer(element);
        //    //}

        //    loadQusOptions += "<div class='d-flex justify-content-between align-items-center forced-items'><div class='most'><label class='container-checkbox'>&nbsp;<input type='radio' id ='" + _subQuestions[element.index].subquestion_id+"'+'~M" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "'  name = 'mRadio' value='" + index + "' onclick='ForcedChoiceEvent(this)'><span class='checkmark'></span></label></div><div class='item d-flex flex-row align-items-center'>" + element.sub_question + "</div><div class='least'><label class='container-checkbox'>&nbsp;<input type='radio' id = 'L" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "'  name ='lRadio' value='" + index + "' onclick='ForcedChoiceEvent(this)'><span class='checkmark'></span></label></div></div>";
        //    index++;

        //});

        _subQuestions.forEach(function (element) {
            loadQusOptions += "<div class='d-flex justify-content-between align-items-center forced-items'><div class='most'><label class='container-checkbox'>&nbsp;<input type='radio' id ='M" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "~" + masterQuestionOptions[0].id + "''  name = 'mRadio' value='" + index + "' onclick='ForcedChoiceEvent(this)'><span class='checkmark'></span></label></div><div class='item d-flex flex-row align-items-center'>" + element.sub_question + "</div><div class='least'><label class='container-checkbox'>&nbsp;<input type='radio' id = 'L" + DynamicControlPrefixEnum.Radio + element.subquestion_id + "~" + masterQuestionOptions[2].id + "'  name ='lRadio' value='" + index + "' onclick='ForcedChoiceEvent(this)'><span class='checkmark'></span></label></div></div>";
            index++;

        });
        loadQusOptions += "</div></div>";
        $("#divQuestionOptions").append(loadQusOptions);
        BindCorrectAnswer('');
    } catch (e) {
        PostJavascriptError("BindForcedChoiceQuestions", "Assessment - BindForcedChoiceQuestions : " + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function validatePsychometericQuestionSelection() {
    try {
        let flag = true;
        if (currentQuestionType == QuestionTypeEnum.Psychometric) {
            var ques = _questionSetDB({ id: currentQuestionID }).first();
            let psychometericSubQusType = ques.psychometeric_sub_question_type_id;
            adjective_EntityMinCount = ques.adjective_Entity_MinCount;

            switch (psychometericSubQusType) {
                case PsychometericSubQuestionTypeEnum.RatingScale:
                    var answer = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                    optionID = answer.exam_answer;
                    if (optionID == 0 || optionID == null) {
                        alertIsNullOrEmptyForSectionandOption("Select Options !");
                        flag = false;
                    }
                    break;

                case PsychometericSubQuestionTypeEnum.ForcedChoice:
                    if (!$("input[name='lRadio']:checked").val() || !$("input[name='mRadio']:checked").val()) {
                        alertIsNullOrEmptyForSectionandOption("Select one most preferred and one least preferred item !");
                        flag = false;
                    }
                    break;

                case PsychometericSubQuestionTypeEnum.AdjectivesType:
                    let subQ1AnsDiv = "#" + $("#divQ1 :first-child").attr('id')
                    let subQ2AnsDiv = "#" + $("#divQ2 :first-child").attr('id')
                    if (($(subQ1AnsDiv).children().length) != adjective_EntityMinCount || ($(subQ2AnsDiv).children().length) != adjective_EntityMinCount) {
                        alertIsNullOrEmptyForSectionandOption("Choose " + adjective_EntityMinCount + " most preferred and " + adjective_EntityMinCount + " least preferred options !");
                        flag = false;
                    }
                    break;

                default:
                    break;
            }

        }
        else {
            flag = true;
        }
        return flag;
    } catch (e) {
        PostJavascriptError("validatePsychometericQuestionSelection", "Assessment - validatePsychometericQuestionSelection : " + e.message + ":" + "Testpin:" + _logDetails);
    }

}
function validatePsychometericQuestionSelectionOnProcessEventLog() {
    try {
        let flag = true;
        if (currentQuestionType == QuestionTypeEnum.Psychometric) {
            var ques = _questionSetDB({ id: currentQuestionID }).first();
            let psychometericSubQusType = ques.psychometeric_sub_question_type_id;
            adjective_EntityMinCount = ques.adjective_Entity_MinCount;

            switch (psychometericSubQusType) {
                case PsychometericSubQuestionTypeEnum.RatingScale:
                    var answer = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
                    optionID = answer.exam_answer;
                    if (optionID == 0 || optionID == null) {
                        $("#divloading").hide();
                        FreezeTimer();
                        swal.fire({
                            title: '<span></span>',
                            text: "Select options !",
                            imageUrl: '/Images/Pro/warning.svg',
                            imageWidth: 80,
                            imageHeight: 80,
                            showCancelButton: false,
                            confirmButtonText: "OK",
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.value) {
                                $("#pauseBtnhms").val("Start");
                                $("#pauseBtnhms").click();
                                HandleTimerButton();
                            }
                            else {
                            }
                        });
                        flag = false;
                    }
                    break;

                case PsychometericSubQuestionTypeEnum.ForcedChoice:
                    if (!$("input[name='lRadio']:checked").val() || !$("input[name='mRadio']:checked").val()) {
                        $("#divloading").hide();
                        FreezeTimer();
                        swal.fire({
                            title: '<span></span>',
                            text: "Select one most preferred and one least preferred item !",
                            imageUrl: '/Images/Pro/warning.svg',
                            imageWidth: 80,
                            imageHeight: 80,
                            showCancelButton: false,
                            confirmButtonText: "OK",
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.value) {
                                $("#pauseBtnhms").val("Start");
                                $("#pauseBtnhms").click();
                                HandleTimerButton();
                            }
                            else {
                            }
                        });
                        flag = false;
                    }
                    break;

                case PsychometericSubQuestionTypeEnum.AdjectivesType:
                    let subQ1AnsDiv = "#" + $("#divQ1 :first-child").attr('id')
                    let subQ2AnsDiv = "#" + $("#divQ2 :first-child").attr('id')
                    if (($(subQ1AnsDiv).children().length) != adjective_EntityMinCount || ($(subQ2AnsDiv).children().length) != adjective_EntityMinCount) {
                        $("#divloading").hide();
                        FreezeTimer();
                        swal.fire({
                            title: '<span></span>',
                            text: "Choose " + adjective_EntityMinCount + " most preferred and " + adjective_EntityMinCount + " least preferred options!",
                            imageUrl: '/Images/Pro/warning.svg',
                            imageWidth: 80,
                            imageHeight: 80,
                            showCancelButton: false,
                            confirmButtonText: "OK",
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.value) {
                                $("#pauseBtnhms").val("Start");
                                $("#pauseBtnhms").click();
                                HandleTimerButton();
                            }
                            else {
                            }
                        });
                        flag = false;
                    }

                    break;

                default:
                    break;
            }

        }
        else {
            flag = true;
        }
        return flag;
    } catch (e) {
        PostJavascriptError("validatePsychometericQuestionSelectionOnProcessEventLog", "Assessment - validatePsychometericQuestionSelectionOnProcessEventLog : " + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function toggleButton() {
    try {
        $('input[type="checkbox"]').click(function () {
            if ($(this).prop("checked") == true) {
                $("#altSubfile").show();
                $("#uploadFile").show();
            }
            else if ($(this).prop("checked") == false) {
                var datalength = document.getElementById("SelectedFiles").innerHTML.length;
                if (datalength > 0) {
                    $("input[id='toggleCheckbox'] ").attr("checked", "checked");
                    swal.fire({
                        title: '<span></span>',
                        text: "Please Remove the Files",
                        imageUrl: '/Images/Pro/warning.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        allowOutsideClick: false
                    });
                }
                else {
                    $("#altSubfile").hide();
                    $("#uploadFile").hide();
                }
            }
        });
    } catch (e) {
        PostJavascriptError("toggleButton", "Assessment - toggleButton : " + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function getFile() {
    $("#upfile").trigger("click");
    iswindowproct = true;
    $(document).keyup(function (e) {
        if (e.keyCode === 27) {
            iswindowproct = false;
        }
    });
}

function uploadedFileInfo() {
    try {
        if ($("#upfile").val() == '')
            return false;
        var fileExtension = ['pdf', 'png', 'jpg', 'jpeg'];
        if ($.inArray($("#upfile").val().split('.').pop().toLowerCase(), fileExtension) == -1) {
            swal.fire({
                title: '<span></span>',
                text: "Only the file formats PDF, PNG, JPG and JPEG are allowed!",
                imageUrl: '/Images/Pro/warning.svg',
                imageWidth: 80,
                imageHeight: 80,
                showCancelButton: false,
                confirmButtonText: "OK",
                allowOutsideClick: false
            });
            this.value = ''; // Clean field
            return false;
        }

        var uploadedfiles = [];
        $('#SelectedFiles').children('div').each(function () {
            uploadedfiles.push($(this).attr('title'));
        });


        var fileUpload = $("#upfile").get(0);
        var files = fileUpload.files;
        var aSize = 0;
        var sizeList = [];
        var fileData = new FormData();
        for (var i = 0; i < files.length; i++) {
            aSize = aSize + files[i].size;
            if (files[i].size == 0) {
                swal.fire({
                    title: '<span></span>',
                    text: files[i].name + "  file size is 0",
                    imageUrl: '/Images/Pro/warning.svg',
                    imageWidth: 80,
                    imageHeight: 80,
                    showCancelButton: false,
                    confirmButtonText: "OK",
                    allowOutsideClick: false
                });
                continue;
            }
            if (files[i].name.includes(',')) {
                swal.fire({
                    title: '<span></span>',
                    text: "Please check file name (,) not allowed",
                    imageUrl: '/Images/Pro/warning.svg',
                    imageWidth: 80,
                    imageHeight: 80,
                    showCancelButton: false,
                    confirmButtonText: "OK",
                    allowOutsideClick: false
                });
                continue;
            }

            let isduplicatefile = false;
            for (var iufile = 0; iufile < uploadedfiles.length; iufile++) {
                if (uploadedfiles[iufile] == files[i].name) {
                    isduplicatefile = true;
                    break;
                }
            }

            if (isduplicatefile) {
                swal.fire({
                    title: '<span></span>',
                    text: "duplicate file not allowed",
                    imageUrl: '/Images/Pro/warning.svg',
                    imageWidth: 80,
                    imageHeight: 80,
                    showCancelButton: false,
                    confirmButtonText: "OK",
                    allowOutsideClick: false
                }).then((result) => {
                    UnfreezeTimer();
                })
                continue;
            }

            var iSize = (files[i].size / 1024);
            //if (aSize > 5242880) {
            //    swal.fire({
            //        title: '<span></span>',
            //        text: "Max file size is 5 MB",
            //        imageUrl: '/Images/Pro/warning.svg',
            //        imageWidth: 80,
            //        imageHeight: 80,
            //        showCancelButton: false,
            //        confirmButtonText: "OK",
            //        allowOutsideClick: false
            //    });
            //    return false;
            //}
            if (isfileBytes != 0) {
                if (aSize > isfileBytes) {
                    swal.fire({
                        title: '<span></span>',
                        text: "Max file size is " + maxFilesize + "  MB",
                        imageUrl: '/Images/Pro/warning.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        allowOutsideClick: false
                    });
                    return false;
                }
            }
            else {
                if (aSize > 5242880) {
                    swal.fire({
                        title: '<span></span>',
                        text: "Max file size is 5 MB",
                        imageUrl: '/Images/Pro/warning.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        allowOutsideClick: false
                    });
                    return false;
                }
            }
            if (iSize / 1024 > 1) {
                if (((iSize / 1024) / 1024) > 1) {
                    iSize = (Math.round(((iSize / 1024) / 1024) * 100) / 100);
                    iSize = iSize + "Gb";
                }
                else {
                    iSize = (Math.round((iSize / 1024) * 100) / 100)
                    iSize = iSize + "Mb";
                }
            }
            else {
                iSize = (Math.round(iSize * 100) / 100)
                iSize = iSize + "kb";
            }
            sizeList.push(iSize);
            fileData.append(files[i].name, files[i]);
            //document.getElementById("SelectedFiles").innerHTML += "<div id=uploadfile" + i + " style='background-color:#F2F3F4;color:darkblue;padding:5px 5px 5px 5px;width=100px;float:left'  title='" + files[i].name + "' value='" + files[i].name + "'  >" + files[i].name + "(" + iSize + ") <span onclick=RemoveFile('" + i + "')  class='fa fa-remove' style='cursor:pointer;float:right'></span></div>";
        }
        if (files.length > 0) {
            GetUploadedFileValue(sizeList, fileData);
        }

    } catch (e) {
        PostJavascriptError("uploadedFileInfo", " Assessment-uploadedFileInfo: " + e.message + ":" + "Testpin:" + _logDetails);
        $("#pauseBtnhms").val("Start");
        $("#pauseBtnhms").click();
        HandleTimerButton();
    }
}

function RemoveFile(id) {
    $('#uploadfile' + id).remove();
    updateSubjectiveTaff(currentQuestionID);
    var fileLength = document.getElementById("SelectedFiles").innerHTML.length;
    if (fileLength == 0) {
        isNofiles = true;
        $('#toggleCheckbox').prop('checked', false);
        $("#uploadFile").hide();
        $("#altSubfile").hide();
        clear();
    }
}

function clear() {
    $('#upfile').val('');
    $('#SelectedFiles').empty();
}

function GetUploadedFileValue(sizeList, fileData) {
    try {
        fileData.append('question_id', currentQuestionID);
        fileData.append('testpin', _testPinDB().first().TestPin);
        $("#divloading").show();
        // FreezeTimer();
        $.ajax({
            url: "/Assessment/PostSubjectiveFile",
            type: "POST",
            contentType: false,
            processData: false,
            data: fileData,
            success: function (response) {
                if (response) {
                    var S3Parsevalue = JSON.parse(response);
                    var s3List = S3Parsevalue.s3_id;
                    //var s3fileList = S3Parsevalue.s3_file;
                    for (j = 0; j < s3List.length; j++) {

                        var res = s3List[j].split("|");
                        var filewithsize = res[2] + "(" + sizeList[j] + ")";
                        let setremovefilename = res[1].replace(/ /g, '')
                        //document.getElementById("SelectedFiles").innerHTML += "<div id=uploadfile" + res[1] + " style='background-color:#F2F3F4;color:darkblue;padding:5px 5px 5px 5px;width=100px;float:left'  title='" + res[2] + "' value='" + res[0] + "'  >"+filewithsize+"<span onclick=RemoveFile('" + res[1] + "')  class='fa fa-remove' style='cursor:pointer;float:right'></span></div>";

                        document.getElementById("SelectedFiles").innerHTML += "<div id=uploadfile" + setremovefilename + " class='adjective-list-items ui-sortable-handle'  title='" + res[2] + "' value='" + res[0] + "'  >" + filewithsize + "<span style='cursor:pointer' onclick=RemoveFile('" + setremovefilename + "')  class='action lnr lnr-cross'></span></div>";
                    }
                    updateSubjectiveTaff(currentQuestionID)
                    $("#pauseBtnhms").val("Start");
                    $("#pauseBtnhms").click();
                    HandleTimerButton();
                    $("#divloading").hide();
                }
                else {
                    swal.fire({
                        title: '<span></span>',
                        text: "try again",
                        imageUrl: '/Images/Pro/error.svg',
                        imageWidth: 80,
                        imageHeight: 80,
                        showCancelButton: false,
                        confirmButtonText: "OK",
                        allowOutsideClick: false
                    }).then((result) => {
                        UnfreezeTimer();
                        $("#divloading").hide();
                    })
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $("#divloading").hide();
                var data = " LoadAssessment - PostSubjectiveFile Ajax Call - Retry Attempt-" + this.tryCount + ":" + "StatusText:" + textStatus + ":" + "errorThrown:" + errorThrown + ":" + "Testpin:" + _logDetails;
                PostJavascriptError("GetUploadedFileValue", data);
                UnfreezeTimer();
                $("#divloading").hide();
                return;
            }

        });
        iswindowproct = false;
        $('#upfile').val('');

    } catch (e) {
        PostJavascriptError("GetUploadedFileValue-Catch", " Assessment-GetUploadedFileValue: " + e.message + ":" + "Testpin:" + _logDetails);
    }


}

function updateSubjectiveTaff(currentQuestionID) {
    var sindex = 1;
    var answerSubList = [];
    $('#SelectedFiles').children('div').each(function () {
        var fileDatas = {
            "id": sindex,
            "testpin": _logDetails,
            "question_id": currentQuestionID,
            "S3_Id": $(this).attr('value'),
            "Bucket_Id": $(this).text()
        };
        sindex++;
        answerSubList.push(fileDatas);
    });

    _assessmentAnswerDB({ question_id: currentQuestionID }).update({ listSubjectiveS3: answerSubList });
}

function DownloadS3DataFromS3() {
    try {
        var ansdata = _assessmentAnswerDB({ question_id: currentQuestionID }).first();
        var exam_answer = ansdata.s3_id;
        var requestData = {
            ExamAnswer: exam_answer
        };
        $.ajax({
            url: "/Assessment/GetS3Data",
            async: false,
            type: "POST",
            dataType: 'json',
            //data: '{ExamAnswer:"' + exam_answer + '" }',
            data: JSON.stringify(requestData),
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                EssayS3Data = response;
            }
        });
    } catch (e) {
        PostJavascriptError("DownloadS3DataFromS3", " Assessment-DownloadS3DataFromS3: " + e.message + ":" + "Testpin:" + _logDetails);
    }

}
function MCQAnswerupdate() {
    try {
        switch (previousQuestionType) {
            case QuestionTypeEnum.MCQ:
                let tempanswer = '';
                switch (Number(currentIsMultipleOption)) {
                    case Number(MupltipleOptionEnum.Single):
                        if ($("input[name='mcqradio']:checked").val()) {
                            var id = $("input[name='mcqradio']:checked").attr("id");
                            tempanswer = id.replace(DynamicControlPrefixEnum.Radio, '');
                        }
                        break;

                    case Number(MupltipleOptionEnum.Multiple):
                        $('input:checkbox[name="mcqcheckbox"]:checked').each(function () {
                            var id = $(this).attr("id");
                            if (tempanswer == '') {
                                tempanswer = id.replace(DynamicControlPrefixEnum.CheckBox, '');
                            }
                            else {
                                tempanswer = tempanswer + ',' + id.replace(DynamicControlPrefixEnum.CheckBox, '');
                            }

                        });
                        break;
                }

                if (tempanswer == '') {
                    tempanswer = '0';
                }
                _assessmentAnswerDB({ question_id: previousQuestionId }).update({ exam_answer: tempanswer });
                break;
        }

    } catch (e) {
        PostJavascriptError("MCQAnswerupdate", " Assessment-MCQAnswerupdate: " + e.message + ":" + "Testpin:" + _logDetails);
    }

}

function MeasureConnectionSpeed() {
    try {
        var imageAddr = "/Images/Pro/hiremee-logo.png";
        var startTime, endTime;
        var downloadSize = 4000;
        var download = new Image();
        download.onload = function () {
            endTime = (new Date()).getTime();
            showResults();
        }

        download.onerror = function (err, msg) {
            PostJavascriptError("Assessment - Measure Connection: " + msg);
        }

        startTime = (new Date()).getTime();
        var cacheBuster = "?nnn=" + startTime;
        download.src = imageAddr + cacheBuster;

        function showResults() {
            try {
                var duration = (endTime - startTime) / 1000;
                var bitsLoaded = downloadSize * 8;
                var speedBps = (bitsLoaded / duration).toFixed(2);
                var speedKbps = (speedBps / 1024).toFixed(2);
                var speedMbps = (speedKbps / 1024).toFixed(2);
                currentInternetSpeed = speedMbps;
            } catch (e) {

            }
        }
    } catch (e) {
        PostJavascriptError("MeasureConnectionSpeed", " Assessment-MeasureConnectionSpeed: " + e.message + ":" + "Testpin:" + _logDetails);
        throw e;
    }
}
